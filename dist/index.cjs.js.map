{"version":3,"file":"index.cjs.js","sources":["../src/consts.js","../src/utils/getCropperQueryString.js","../src/components/Icon/index.js","../src/icons/ArrowIcon.js","../src/utils/openLinkInNewTab.js","../src/modules/styled.js","../src/modules/NavBar/Page.js","../src/hooks/useOutsideClick.js","../src/modules/NavBar/Button.js","../src/components/CropImage/index.js","../src/modules/NavBar/index.js","../src/icons/BurgerIcon.js","../src/modules/NavBarMobile/Row.js","../src/modules/NavBarMobile/Button.js","../src/modules/NavBarMobile/Page.js","../src/modules/NavBarMobile/index.js"],"sourcesContent":["export const logoImageWidth = 100;\r\nexport const logoImageHeight = 50;\r\n","const roundedNumber = (value) => Math.floor(value);\n\nexport const getCropperQueryString = (crop) => {\n  if (!crop || Object.keys(crop).length === 0) {\n    return '';\n  }\n  const { imageBox, rotate } = crop;\n  const { x, y, height, width } = imageBox;\n  return `?x=${roundedNumber(x)}&y=${roundedNumber(y)}&w=${roundedNumber(width)}&h=${roundedNumber(\n    height\n  )}&rotate=${rotate}`;\n};\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = ({\r\n  icon,\r\n  opacity = 1,\r\n  hoverOpacity = 1,\r\n  color = '#000',\r\n  hoverColor = color,\r\n  size = 20,\r\n  rotate,\r\n  noCursor,\r\n  padding = 0,\r\n  width,\r\n  height,\r\n  tableIcon\r\n}) => (\r\n  <IconWrapper\r\n    color={color}\r\n    hoverColor={hoverColor}\r\n    size={size}\r\n    width={width}\r\n    height={height}\r\n    opacity={opacity}\r\n    hoverOpacity={hoverOpacity}\r\n    rotate={rotate}\r\n    noCursor={noCursor}\r\n    padding={padding}\r\n    tableIcon={tableIcon}\r\n  >\r\n    {_renderIcon(icon)}\r\n  </IconWrapper>\r\n);\r\n\r\nconst _renderIcon = (icon) => {\r\n  const Icon = icon;\r\n\r\n  if (typeof icon === 'function') {\r\n    return <Icon />;\r\n  } else if (typeof icon === 'string') {\r\n    return icon;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst IconWrapper = styled.div`\r\n  cursor: ${({ noCursor }) => (noCursor ? 'initial' : 'pointer')};\r\n  display: ${({ tableIcon }) => (tableIcon ? 'table-cell' : 'flex')};\r\n  flex: 0 0 auto;\r\n  align-items: center;\r\n  font-size: ${({ tableIcon }) => !tableIcon && '0'};\r\n  width: ${({ size, width }) => (width ? width : size)}px;\r\n  height: ${({ size, height }) => (height ? height : size)}px;\r\n  transform: rotate(${({ rotate }) => rotate}deg);\r\n  transform-origin: 50% 50%;\r\n  padding: ${({ padding }) => padding}px;\r\n\r\n  :hover {\r\n    svg {\r\n      fill: ${({ hoverColor }) => hoverColor};\r\n      opacity: ${({ hoverOpacity }) => hoverOpacity};\r\n    }\r\n  }\r\n\r\n  svg {\r\n    fill: ${({ color }) => color};\r\n    opacity: ${({ opacity }) => opacity};\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: all ease-in-out 0.3s;\r\n    vertical-align: ${({ tableIcon }) => tableIcon && 'middle'};\r\n  }\r\n`;\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string,\r\n  hoverColor: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  size: PropTypes.number,\r\n  padding: PropTypes.number,\r\n  opacity: PropTypes.number,\r\n  hoverOpacity: PropTypes.number,\r\n  rotate: PropTypes.number,\r\n  noCursor: PropTypes.bool,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  tableIcon: PropTypes.bool\r\n};\r\n\r\nIcon.defaultProps = {\r\n  opacity: 1,\r\n  color: '#000',\r\n  size: 20,\r\n  padding: 0,\r\n  rotate: 0,\r\n  noCursor: false,\r\n  tableIcon: false\r\n};\r\n\r\nexport { Icon };\r\n","import React from 'react';\r\nconst ArrowIcon = () => (\r\n  <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n    <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\r\n  </svg>\r\n);\r\n\r\nexport default ArrowIcon;\r\n","export const openLinkInNewTab = (link) => window.open(link, '_blank', 'noreferrer noopener');\r\n","import styled from \"styled-components\";\r\n\r\nexport const IconWrapper = styled.div``;\r\n\r\nexport const PageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    color: ${({navBarTextHoverColor}) => navBarTextHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    color: ${({navBarTextClickedColor}) => navBarTextClickedColor};\r\n  }\r\n`;\r\n\r\nexport const PageWrapperMobile = styled(PageWrapper)`\r\n    word-break: break-word;\r\n`;\r\n","import React, {memo, useCallback, useEffect, useState} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport {useOutsideClick} from '../../hooks/useOutsideClick.js';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport {IconWrapper, PageWrapper} from \"../styled\";\r\n\r\nconst DropDown = memo((props) => {\r\n\r\n    const {\r\n        disabledRedirect,\r\n        childs,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding,\r\n        setOpen,\r\n        rootId,\r\n        parentRef,\r\n    } = props;\r\n\r\n    let left = 0, top = 0;\r\n    if (parentRef) {\r\n        left = parentRef.getBoundingClientRect().left;\r\n        const navbarContainer = document.querySelector(\"[data-navbarcontainer]\");\r\n        const navbar = document.querySelector('.navbar-desktop');\r\n        if (navbarContainer) {\r\n            const containerLeft = navbarContainer.getBoundingClientRect().left;\r\n            if (left < containerLeft) left = containerLeft;\r\n        }\r\n        const navbarBox =navbar.getBoundingClientRect();\r\n        top = navbarBox.top + navbarBox.height;\r\n    }\r\n\r\n    const component = <DropdownWrapper data-list={true} className={\"navbar-list\"} left={left} top={top} dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}>\r\n        {childs.map((el) => (\r\n            <DropdownElement\r\n                key={el.id}\r\n                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                onClick={() => {\r\n                    if (el.link?.value && !disabledRedirect) {\r\n                        openLinkInNewTab(el.link.value);\r\n                        setOpen(false);\r\n                    } else {\r\n                        setOpen(false);\r\n                    }\r\n                }}\r\n                data-link={el.link?.value}\r\n            >\r\n                {el.title}\r\n            </DropdownElement>\r\n        ))}\r\n    </DropdownWrapper>\r\n\r\n    return ReactDOM.createPortal(component, document.getElementById(rootId));\r\n})\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link: linkProps,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         dropdownSettingsInactiveFill,\r\n         dropdownSettingsInactiveBorder,\r\n         dropdownSettingsHoverClickedFill,\r\n         dropdownSettingsHoverClickedBorder,\r\n         dropdownSettingsTextColorRegular,\r\n         dropdownSettingsTextColorHover,\r\n         dropdownSettingsTextColorClicked,\r\n         dropdownSettingsTextFontFamily,\r\n         dropdownSettingsTextFontSize,\r\n         dropdownSettingsTextBold,\r\n         dropdownSettingsTextUnderline,\r\n         dropdownSettingsTextItalic,\r\n         dropdownSettingsHorizontalPadding,\r\n         dropdownSettingsVerticalPadding,\r\n         isStatic,\r\n         navBarHoverColor,\r\n         navBarClickedColor,\r\n         rootId,\r\n     }) => {\r\n        const [open, setOpen] = useState(isStatic);\r\n        const link = linkProps?.value;\r\n\r\n        const ref = useOutsideClick(() => {\r\n            setOpen(false);\r\n        });\r\n\r\n        const [containerRef, setContainerRef] = useState(null);\r\n        useEffect(() => {\r\n            setContainerRef(ref.current);\r\n        }, [])\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n        return (\r\n            <Container ref={ref} navBarHoverColor={navBarHoverColor} navBarClickedColor={navBarClickedColor}>\r\n                <PageWrapper\r\n                    navBarTextHoverColor={navBarTextHoverColor}\r\n                    navBarTextClickedColor={navBarTextClickedColor}\r\n                    onClick={onClick}\r\n                    data-link={!isDropdown ? link : undefined}\r\n                    data-isdropdown={isDropdown}\r\n                >\r\n                    {title}{' '}\r\n                    {isDropdown && (\r\n                        <IconWrapper data-arrow={true}>\r\n                            {open ? (\r\n                                <Icon icon={ArrowIcon} rotate={isStatic ? -90 : 90} color={'#ffffff'}/>\r\n                            ) : (\r\n                                <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'}/>\r\n                            )}\r\n                        </IconWrapper>\r\n                    )}\r\n                </PageWrapper>\r\n                {open && isDropdown &&\r\n                    <DropDown\r\n                        dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                        dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                        dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                        dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                        dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                        dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                        dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                        dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                        dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                        dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                        dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                        dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                        dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                        dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                        childs={children}\r\n                        setOpen={setOpen}\r\n                        disabledRedirect={disabledRedirect}\r\n                        rootId={rootId}\r\n                        parentRef={containerRef}\r\n                    />\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n);\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    background: ${({navBarHoverColor}) => navBarHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({navBarClickedColor}) => navBarClickedColor};\r\n  }\r\n`;\r\n\r\nconst DropdownWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  left: ${({left}) => left}px;\r\n  top: ${({top}) => top}px;\r\n  z-index: 2;\r\n  \r\n  > div {\r\n    border-right: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n    border-left: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n    border-bottom: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n  }\r\n  > div:first-child {\r\n    border-top: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n  }\r\n`;\r\n\r\nconst DropdownElement = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  background: ${({dropdownSettingsInactiveFill}) => dropdownSettingsInactiveFill};\r\n  color: ${({dropdownSettingsTextColorRegular}) => dropdownSettingsTextColorRegular};\r\n  font-size: ${({dropdownSettingsTextFontSize}) => dropdownSettingsTextFontSize}px;\r\n  font-family: ${({dropdownSettingsTextFontFamily}) => dropdownSettingsTextFontFamily};\r\n  font-weight: ${({dropdownSettingsTextBold}) => (dropdownSettingsTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({dropdownSettingsTextItalic}) => (dropdownSettingsTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({dropdownSettingsTextUnderline}) => (dropdownSettingsTextUnderline ? 'underline' : 'none')};\r\n  padding: ${({dropdownSettingsVerticalPadding, dropdownSettingsHorizontalPadding}) =>\r\n          `${dropdownSettingsVerticalPadding}px ${dropdownSettingsHorizontalPadding}px`};\r\n\r\n  &:hover {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorHover}) => dropdownSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorClicked}) => dropdownSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    dropdownSettingsInactiveFill: PropTypes.string,\r\n    dropdownSettingsInactiveBorder: PropTypes.string,\r\n    dropdownSettingsHoverClickedFill: PropTypes.string,\r\n    dropdownSettingsHoverClickedBorder: PropTypes.string,\r\n    dropdownSettingsTextColorRegular: PropTypes.string,\r\n    dropdownSettingsTextColorHover: PropTypes.string,\r\n    dropdownSettingsTextColorClicked: PropTypes.string,\r\n    dropdownSettingsTextFontFamily: PropTypes.string,\r\n    dropdownSettingsTextFontSize: PropTypes.number,\r\n    dropdownSettingsTextBold: PropTypes.bool,\r\n    dropdownSettingsTextUnderline: PropTypes.bool,\r\n    dropdownSettingsTextItalic: PropTypes.bool,\r\n    dropdownSettingsHorizontalPadding: PropTypes.number,\r\n    dropdownSettingsVerticalPadding: PropTypes.number,\r\n    navBarHoverColor: PropTypes.string,\r\n    navBarClickedColor: PropTypes.string,\r\n    rootId: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, { createRef, useEffect } from 'react';\r\n\r\nexport const useOutsideClick = (callback) => {\r\n  const ref = createRef();\r\n\r\n  const listener = (e) => {\r\n    if (ref.current && !ref?.current.contains(e.target)) {\r\n      callback(e, ref.current);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', listener);\r\n    document.addEventListener('touchstart', listener);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener);\r\n      document.removeEventListener('touchstart', listener);\r\n    };\r\n  });\r\n\r\n  return ref;\r\n};\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link: linkProps,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         navBarTextFontSize\r\n     }) => {\r\n\r\n        const link = linkProps?.value;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [link, disabledRedirect]);\r\n        return (\r\n            <ButtonWrapper\r\n                buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                onClick={onClick}\r\n                data-link={link}\r\n                navBarTextFontSize={navBarTextFontSize}\r\n            >\r\n                {title}\r\n            </ButtonWrapper>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({buttonSettingsRoundCorners}) => buttonSettingsRoundCorners}px;\r\n  border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsRegularBorder}) => buttonSettingsRegularBorder};\r\n  background: ${({buttonSettingsRegularFill}) => buttonSettingsRegularFill};\r\n  padding: ${({buttonSettingsHorizontalPadding}) =>\r\n          `0 ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({buttonSettingsTextColorRegular}) => buttonSettingsTextColorRegular};\r\n  height: ${({\r\n               buttonSettingsVerticalPadding,\r\n               navBarTextFontSize,\r\n               buttonSettingsBorderWidth\r\n             }) => navBarTextFontSize + ((buttonSettingsVerticalPadding || 0) * 2) + ((buttonSettingsBorderWidth || 0) * 2)}px;\r\n\r\n  &:hover {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorHover}) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorClicked}) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string,\r\n    navBarTextFontSize: PropTypes.number,\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Index = forwardRef(({ height, id, crop, source, alt, ignoreMaxHeight, isTurntable, isHero }, ref) => {\r\n  const styles = { width: '100%', height: '100%', objectFit: 'cover' };\r\n  if (!ignoreMaxHeight) {\r\n    styles.maxHeight = '600px';\r\n  }\r\n  return (\r\n    <CropArea ref={ref} isTurntable={isTurntable} isHero={isHero} height={height} id={id}>\r\n      <CropImageWrapper {...crop.imagePosition} isHero={isHero}>\r\n        <img src={source} alt={alt} style={styles} />\r\n      </CropImageWrapper>\r\n    </CropArea>\r\n  );\r\n});\r\n\r\nconst CropImageWrapper = styled.div`\r\n  position: relative;\r\n  left: ${({ x }) => x || 0}%;\r\n  top: ${({ y }) => y || 0}%;\r\n  width: ${({ width }) => width || 100}%;\r\n  height: ${({ height }) => height || 100}%;\r\n\r\n  ${({ isHero }) =>\r\n    isHero &&\r\n    css`\r\n      position: static;\r\n      img {\r\n        object-fit: cover;\r\n        //margin-left: auto;\r\n        //margin-right: auto;\r\n        //width: auto !important;\r\n      }\r\n    `};\r\n`;\r\n\r\nconst CropArea = styled.div`\r\n  width: 100%;\r\n  height: ${({ height, isTurntable, isHero }) =>\r\n    isTurntable ? '100%' : isHero ? '100%' : height ? height + 'px' : '100%'};\r\n  position: relative;\r\n  background-color: transparent;\r\n  overflow: hidden;\r\n`;\r\n\r\nIndex.propTypes = {\r\n  height: PropTypes.number,\r\n  id: PropTypes.string,\r\n  crop: PropTypes.object,\r\n  source: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n  ignoreMaxHeight: PropTypes.bool,\r\n  isTurntable: PropTypes.bool,\r\n  isHero: PropTypes.bool\r\n};\r\n\r\nIndex.defaultProps = {\r\n  id: '',\r\n  alt: '',\r\n  ignoreMaxHeight: false,\r\n  crop: {}\r\n};\r\n\r\nexport default Index;\r\n","import React, {Fragment} from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport NavBarPage from './Page.js';\r\nimport NavBarButton from './Button.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\n\r\nconst LogoElement = ({logoSrc, logoCropperOptions, hideElement}) => {\r\n    return (\r\n        <Logo hideElement={hideElement}>\r\n            <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)} crop={logoCropperOptions}/>\r\n        </Logo>\r\n    )\r\n}\r\n\r\nconst NavBar = ({\r\n                    config,\r\n                    disabledRedirect = false,\r\n                    disabledListClick = false,\r\n                    stickyOffset = 0,\r\n                    isStatic = false,\r\n                    hideLogo = false,\r\n                    isPreview = false,\r\n                    rootId = \"root\"\r\n                }) => {\r\n    const {\r\n        height,\r\n        navBarRegularColor,\r\n        navBarHoverColor,\r\n        navBarClickedColor,\r\n        logoAlignment,\r\n        logoCropperOptions,\r\n        logoSrc,\r\n        navBarTextAlignment,\r\n        navBarTextFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        structure,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        navBarBehavior,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding\r\n    } = config;\r\n\r\n    return (\r\n        <Wrapper height={height} navBarRegularColor={navBarRegularColor} navBarBehavior={navBarBehavior}\r\n                 stickyOffset={stickyOffset} className={\"navbar-desktop\"}>\r\n            <Menu height={height}>\r\n                <LogoElement logoSrc={logoSrc} logoCropperOptions={logoCropperOptions} hideElement={hideLogo || logoAlignment !== 'left'} />\r\n                <Container\r\n                    data-navbarcontainer={true}\r\n                    navBarTextAlignment={navBarTextAlignment}\r\n                    navBarTextFontSize={navBarTextFontSize}\r\n                    navBarTextFontFamily={navBarTextFontFamily}\r\n                    navBarTextBold={navBarTextBold}\r\n                    navBarTextItalic={navBarTextItalic}\r\n                    navBarTextUnderline={navBarTextUnderline}\r\n                    navBarTextRegularColor={navBarTextRegularColor}\r\n                    navBarTextSpacing={navBarTextSpacing}\r\n                    // logoAlignment={logoAlignment}\r\n                >\r\n                    {\r\n                        structure?.length === 0 && isPreview ?\r\n                            <PreviewText>Navigation will preview here once created</PreviewText> :\r\n                            <>\r\n                                {structure?.map((el) => {\r\n                                    let component = null;\r\n                                    if (el.type === 'button') {\r\n                                        component = (\r\n                                            <NavBarButton\r\n                                                {...el}\r\n                                                disabledRedirect={disabledRedirect}\r\n                                                buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                                buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                                buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                                buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                                buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                                buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                                buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                                buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                                buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                                buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                                buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                                navBarTextFontSize={navBarTextFontSize}\r\n                                            />\r\n                                        );\r\n                                    } else if (el.type === 'page') {\r\n                                        component = (\r\n                                            <NavBarPage\r\n                                                {...el}\r\n                                                disabledRedirect={disabledRedirect}\r\n                                                disabledListClick={disabledListClick}\r\n                                                navBarTextHoverColor={navBarTextHoverColor}\r\n                                                navBarTextClickedColor={navBarTextClickedColor}\r\n                                                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                                                dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                                                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                                                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                                                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                                                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                                                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                                                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                                                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                                                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                                                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                                                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                                                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                                                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                                                isStatic={isStatic}\r\n                                                navBarHoverColor={navBarHoverColor}\r\n                                                navBarClickedColor={navBarClickedColor}\r\n                                                rootId={rootId}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                    return <Fragment key={el.id}>{component}</Fragment>;\r\n                                })}\r\n                            </>\r\n                    }\r\n                </Container>\r\n                <LogoElement logoSrc={logoSrc} logoCropperOptions={logoCropperOptions} hideElement={hideLogo || logoAlignment !== 'right'} />\r\n            </Menu>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nNavBar.propTypes = {\r\n    config: PropTypes.object,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    stickyOffset: PropTypes.number,\r\n    isStatic: PropTypes.bool,\r\n    hideLogo: PropTypes.bool,\r\n    isPreview: PropTypes.bool,\r\n};\r\n\r\nconst PreviewText = styled.div`\r\n  font-family: Montserrat-bold, sans-serif;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  font-size: 15px;\r\n  letter-spacing: 1.5px;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  padding: 0 50px;\r\n  width: 100%;\r\n  margin: auto;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n  z-index: 1002;\r\n\r\n  ${({navBarBehavior, stickyOffset}) =>\r\n          navBarBehavior === 'frozen' &&\r\n          css`\r\n            position: sticky;\r\n            top: ${stickyOffset}px;\r\n          `};\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${logoImageHeight}px;\r\n  opacity: ${({hideElement}) => hideElement ? 0 : 1};\r\n`;\r\n\r\nconst Menu = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  max-width: 1120px;\r\n  margin: auto;\r\n  height: ${({height}) => height}px;\r\n`;\r\n\r\n/*\r\n  margin: ${({logoAlignment}) => {\r\n    if (logoAlignment === 'right') {\r\n      return '0 24px 0 0';\r\n    }\r\n    return '0 0 0 24px';\r\n  }};\r\n */\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  margin: 0 24px;\r\n  justify-content: ${({navBarTextAlignment}) => navBarTextAlignment};\r\n  font-size: ${({navBarTextFontSize}) => navBarTextFontSize}px;\r\n  font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n  font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n  height: 100%;\r\n  align-items: center;\r\n  width: calc(100% - 250px);\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n\r\n  > div {\r\n    margin-right: ${({navBarTextSpacing}) => navBarTextSpacing}px;\r\n\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nconst BurgerIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"19.94\" height=\"16.44\" viewBox=\"0 0 19.94 16.44\">\r\n        <path d=\"M20.41,6.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,6.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,13.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,13.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,20.34H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,20.34Z\" transform=\"translate(-1.97 -3.91)\" />\r\n    </svg>\r\n);\r\n\r\nexport default BurgerIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\n\r\nconst Row = ({children, onClick, mobileTextAlignment, link, isDropdown}) => {\r\n\r\n    return (\r\n        <Wrapper onClick={onClick} mobileTextAlignment={mobileTextAlignment} data-link={link} data-isdropdown={isDropdown}>\r\n            {children}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 15px;\r\n    display: flex;\r\n    justify-content: ${({mobileTextAlignment}) => mobileTextAlignment === 'center' ? 'center' : 'flex-start'};\r\n`\r\n\r\nRow.propTypes = {\r\n    children: PropTypes.any,\r\n    onClick: PropTypes.func,\r\n    link: PropTypes.string,\r\n    isDropdown: PropTypes.bool,\r\n};\r\n\r\nexport default Row;\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link: linkProps,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         mobileTextAlignment\r\n     }) => {\r\n        const link = linkProps?.value;\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [link, disabledRedirect]);\r\n        return (\r\n            <Row onClick={onClick} link={link} mobileTextAlignment={mobileTextAlignment}>\r\n                <ButtonWrapper\r\n                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                >\r\n                    {title}\r\n                </ButtonWrapper>\r\n            </Row>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  word-break: break-word;\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({ buttonSettingsRoundCorners }) => buttonSettingsRoundCorners}px;\r\n  border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n    ${({ buttonSettingsRegularBorder }) => buttonSettingsRegularBorder};\r\n  background: ${({ buttonSettingsRegularFill }) => buttonSettingsRegularFill};\r\n  padding: ${({ buttonSettingsVerticalPadding, buttonSettingsHorizontalPadding }) =>\r\n    `${buttonSettingsVerticalPadding}px ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({ buttonSettingsTextColorRegular }) => buttonSettingsTextColorRegular};\r\n\r\n  &:hover {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorHover }) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorClicked }) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, {memo, useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport {IconWrapper, PageWrapperMobile} from \"../styled\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link: linkProps,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         mobileTextAlignment,\r\n         isStatic\r\n     }) => {\r\n        const link = linkProps?.value;\r\n        const [open, setOpen] = useState(isStatic);\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n        return (\r\n            <Wrapper>\r\n                <Row isDropdown={isDropdown} link={!isDropdown ? link : undefined} onClick={onClick} mobileTextAlignment={mobileTextAlignment}>\r\n                    <PageWrapperMobile\r\n                        navBarTextHoverColor={navBarTextHoverColor}\r\n                        navBarTextClickedColor={navBarTextClickedColor}\r\n                    >\r\n                        {title}{' '}\r\n                        {isDropdown && (\r\n                            <IconWrapper data-arrow={true}>\r\n                                {open ? (\r\n                                    <Icon icon={ArrowIcon} rotate={isStatic ? -90 : 90} color={'#ffffff'}/>\r\n                                ) : (\r\n                                    <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'}/>\r\n                                )}\r\n                            </IconWrapper>\r\n                        )}\r\n                    </PageWrapperMobile>\r\n                </Row>\r\n                {open && isDropdown && (\r\n                    <Container data-mobile-dropdown-list={true}>\r\n                        {children.map((el) => (\r\n                            <Row\r\n                                key={el.id}\r\n                                onClick={() => {\r\n                                    if (el.link?.value && !disabledRedirect) {\r\n                                        openLinkInNewTab(el.link.value);\r\n                                    }\r\n                                }}\r\n                                link={el.link?.value}\r\n                                mobileTextAlignment={mobileTextAlignment}\r\n                            >\r\n                                <PageWrapperMobile\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                >\r\n                                    {el.title}\r\n                                </PageWrapperMobile>\r\n                            </Row>\r\n                        ))}\r\n                    </Container>\r\n                )}\r\n            </Wrapper>\r\n        )\r\n    }\r\n);\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    mobileTextAlignment: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, {Fragment, useCallback, useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, {css} from 'styled-components';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {Icon} from \"../../components/Icon\";\r\nimport BurgerIcon from '../../icons/BurgerIcon.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\nimport NavBarButton from \"./Button\";\r\nimport NavBarPage from \"./Page\";\r\n\r\nconst NavBarMobile = ({\r\n                          config, stickyOffset = 0, isConstructor = false, isStatic = false, disabledRedirect = false,\r\n                          disabledListClick = false\r\n                      }) => {\r\n\r\n    const [open, setOpen] = useState(isConstructor);\r\n\r\n    useEffect(() => {\r\n        if (!isConstructor) {\r\n            document.body.style.overflowY = open ? 'hidden' : \"auto\";\r\n        }\r\n    }, [isConstructor, open])\r\n\r\n    const {\r\n        mobileHeight,\r\n        navBarRegularColor,\r\n        mobileLogoAlignment,\r\n        logoSrc,\r\n        logoCropperOptions,\r\n        navBarBehavior,\r\n        mobileFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        mobileTextAlignment,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        structure\r\n    } = config;\r\n\r\n    const onClick = useCallback(() => {\r\n        if (!isConstructor && !disabledListClick) {\r\n            setOpen(value => !value);\r\n        }\r\n    }, [isConstructor, disabledListClick]);\r\n\r\n    return (\r\n        <Container className={\"navbar-mobile\"} navBarBehavior={navBarBehavior} stickyOffset={stickyOffset}\r\n                   isConstructor={isConstructor}>\r\n            <Wrapper height={mobileHeight} navBarRegularColor={navBarRegularColor} data-mobile-header={true}>\r\n                <IconWrapper onClick={onClick} data-mobile-menu-button={true}>\r\n                    <Icon icon={BurgerIcon} color={'#ffffff'}/>\r\n                </IconWrapper>\r\n                <LogoWrapper mobileLogoAlignment={mobileLogoAlignment}>\r\n                    <Logo>\r\n                        <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)}\r\n                                   crop={logoCropperOptions}/>\r\n                    </Logo>\r\n                </LogoWrapper>\r\n            </Wrapper>\r\n            <ListWrapper data-mobile-menu={true} mobileHeight={mobileHeight} offsetTop={stickyOffset + mobileHeight}\r\n                         isConstructor={isConstructor} open={open}\r\n                         navBarRegularColor={navBarRegularColor}\r\n                         mobileFontSize={mobileFontSize} navBarTextFontFamily={navBarTextFontFamily}\r\n                         navBarTextBold={navBarTextBold}\r\n                         navBarTextItalic={navBarTextItalic}\r\n                         navBarTextUnderline={navBarTextUnderline}\r\n                         navBarTextRegularColor={navBarTextRegularColor}\r\n                         navBarTextSpacing={navBarTextSpacing}\r\n            >\r\n                {\r\n                    structure?.map(el => {\r\n                        let component = 'any';\r\n                        if (el.type === 'button') {\r\n                            component = (\r\n                                <NavBarButton\r\n                                    {...el}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    disabledRedirect={isConstructor}\r\n                                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                />\r\n                            );\r\n                        } else if (el.type === 'page') {\r\n                            component = (\r\n                                <NavBarPage\r\n                                    {...el}\r\n                                    disabledRedirect={disabledRedirect}\r\n                                    disabledListClick={disabledListClick}\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    isStatic={isStatic}\r\n                                />\r\n                            );\r\n                        }\r\n                        return <Fragment key={el.id}>{component}</Fragment>;\r\n                    })\r\n                }\r\n            </ListWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n  z-index: 1001;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  ${({navBarBehavior, stickyOffset, isConstructor}) =>\r\n          navBarBehavior === 'frozen' && !isConstructor &&\r\n          css`\r\n            position: sticky;\r\n            top: ${stickyOffset}px;\r\n          `};\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: ${({mobileHeight}) => mobileHeight}px;\r\n  width: 100%;\r\n  height: ${({isConstructor}) => isConstructor ? '350px' : 0};\r\n  transition: height 0.5s ease;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  font-size: ${({mobileFontSize}) => mobileFontSize}px;\r\n  font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n  font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n  ${({offsetTop, open, isConstructor}) =>\r\n          !isConstructor && open &&\r\n          css`\r\n            height: calc(100vh - ${offsetTop}px);\r\n          `};\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 15px 13px 16px 15px;\r\n  border: solid 1px rgba(164, 198, 225, 0.39);\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  align-items: center;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  justify-content: ${({mobileLogoAlignment}) => {\r\n    if (mobileLogoAlignment === 'center') {\r\n      return 'center';\r\n    } else if (mobileLogoAlignment === 'right') {\r\n      return 'flex-end';\r\n    }\r\n    return '';\r\n  }};\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${logoImageHeight}px;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n`;\r\n\r\nNavBarMobile.propTypes = {\r\n    config: PropTypes.object,\r\n    stickyOffset: PropTypes.number,\r\n};\r\n\r\nexport default NavBarMobile;\r\n"],"names":["roundedNumber","value","Math","floor","getCropperQueryString","crop","Object","keys","length","imageBox","rotate","x","y","height","width","concat","Icon","_ref","icon","_ref$opacity","opacity","_ref$hoverOpacity","hoverOpacity","_ref$color","color","_ref$hoverColor","hoverColor","_ref$size","size","noCursor","_ref$padding","padding","tableIcon","React","IconWrapper","_renderIcon","createElement","styled","div","_templateObject","_taggedTemplateLiteral","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","propTypes","PropTypes","string","oneOfType","func","number","bool","defaultProps","ArrowIcon","viewBox","d","fill","openLinkInNewTab","link","window","open","PageWrapper","_templateObject2","navBarTextHoverColor","navBarTextClickedColor","PageWrapperMobile","_templateObject3","DropDown","memo","props","disabledRedirect","childs","dropdownSettingsInactiveFill","dropdownSettingsInactiveBorder","dropdownSettingsHoverClickedFill","dropdownSettingsHoverClickedBorder","dropdownSettingsTextColorRegular","dropdownSettingsTextColorHover","dropdownSettingsTextColorClicked","dropdownSettingsTextFontFamily","dropdownSettingsTextFontSize","dropdownSettingsTextBold","dropdownSettingsTextUnderline","dropdownSettingsTextItalic","dropdownSettingsHorizontalPadding","dropdownSettingsVerticalPadding","setOpen","rootId","parentRef","left","top","getBoundingClientRect","navbarContainer","document","querySelector","navbar","containerLeft","navbarBox","component","DropdownWrapper","className","map","el","_el$link2","DropdownElement","key","id","onClick","_el$link","title","ReactDOM","createPortal","getElementById","NavBarPage","disabledListClick","linkProps","children","isStatic","navBarHoverColor","navBarClickedColor","_useState2","_slicedToArray","useState","ref","callback","createRef","listener","e","current","contains","target","useEffect","addEventListener","removeEventListener","useOutsideClick","_useState4","containerRef","setContainerRef","isDropdown","useCallback","state","Container","undefined","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","array","NavBarButton","buttonSettingsRoundCorners","buttonSettingsBorderWidth","buttonSettingsRegularBorder","buttonSettingsRegularFill","buttonSettingsHorizontalPadding","buttonSettingsVerticalPadding","buttonSettingsHoverClickedBorder","buttonSettingsHoverClickedFill","buttonSettingsTextColorRegular","buttonSettingsTextColorHover","buttonSettingsTextColorClicked","navBarTextFontSize","ButtonWrapper","Index","forwardRef","source","alt","ignoreMaxHeight","isTurntable","isHero","styles","objectFit","maxHeight","CropArea","CropImageWrapper","imagePosition","src","style","css","object","isRequired","LogoElement","logoSrc","logoCropperOptions","hideElement","Logo","CropImage","NavBar","config","_ref2$disabledRedirec","_ref2$disabledListCli","_ref2$stickyOffset","stickyOffset","_ref2$isStatic","_ref2$hideLogo","hideLogo","_ref2$isPreview","isPreview","_ref2$rootId","navBarRegularColor","logoAlignment","navBarTextAlignment","navBarTextFontFamily","navBarTextBold","navBarTextItalic","navBarTextUnderline","navBarTextRegularColor","structure","navBarTextSpacing","navBarBehavior","Wrapper","Menu","PreviewText","type","_extends","Fragment","logoImageWidth","_templateObject5","_templateObject6","BurgerIcon","xmlns","transform","Row","mobileTextAlignment","any","NavBarMobile","_ref$stickyOffset","_ref$isConstructor","isConstructor","_ref$isStatic","_ref$disabledRedirect","_ref$disabledListClic","body","overflowY","mobileHeight","mobileLogoAlignment","mobileFontSize","LogoWrapper","ListWrapper","offsetTop","_templateObject4","_templateObject8"],"mappings":"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"}