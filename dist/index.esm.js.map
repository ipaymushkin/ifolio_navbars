{"version":3,"file":"index.esm.js","sources":["../src/modules/NavBar/Navbar.stories.js","../src/consts.js","../src/utils/getCropperQueryString.js","../src/components/Icon/index.js","../src/icons/ArrowIcon.js","../src/utils/openLinkInNewTab.js","../src/modules/styled.js","../src/modules/NavBar/Page.js","../src/hooks/useOutsideClick.js","../src/modules/NavBar/Button.js","../src/components/CropImage/index.js","../src/modules/NavBar/index.js","../src/icons/BurgerIcon.js","../src/modules/NavBarMobile/Row.js","../src/modules/NavBarMobile/Button.js","../src/modules/NavBarMobile/Page.js","../src/modules/NavBarMobile/index.js"],"sourcesContent":["import React from \"react\";\r\nimport NavBar from \"./index\";\r\nimport {config} from \"../../consts\";\r\n\r\nexport default {\r\n    title: 'Navbar Desktop',\r\n    component: NavBar,\r\n}\r\n\r\nconst Template = (args) => <NavBar {...args} />;\r\n\r\nexport const Primary = Template.bind({});\r\nPrimary.args = {\r\n    config,\r\n    isPreview: true\r\n};\r\n\r\n","import {Primary} from \"./modules/NavBar/Navbar.stories\";\r\n\r\nexport const logoImageWidth = 250;\r\nexport const logoImageHeight = 80;\r\n\r\nexport const config = {\r\n    \"name\": \"test icon color1\",\r\n    \"height\": 58,\r\n    \"logoSrc\": \"https://ifolio-cloud-s3.s3.amazonaws.com/img/navbar_logo250x80.png\",\r\n    \"structure\": [\r\n        {\r\n            \"id\": \"52ff32c0-5a85-11ed-92af-95478d94f522\",\r\n            \"link\": {\r\n                \"name\": \"Ukhanov CVX\",\r\n                \"type\": \"ifolio\",\r\n                \"value\": \"http://localhost:3000/download-app\"\r\n            },\r\n            \"type\": \"page\",\r\n            \"title\": \"with link\",\r\n            \"children\": []\r\n        },\r\n        {\r\n            \"id\": \"55f7b240-5a85-11ed-92af-95478d94f522\",\r\n            \"link\": null,\r\n            \"type\": \"page\",\r\n            \"title\": \"without link\",\r\n            \"children\": []\r\n        },\r\n        {\r\n            \"id\": \"abee9f70-5c1e-11ed-be7e-cb281a8f3f7b\",\r\n            \"type\": \"page\",\r\n            \"title\": \"inner link here\",\r\n            \"children\": [\r\n                {\r\n                    \"id\": \"cf809c40-5c1e-11ed-be7e-cb281a8f3f7b\",\r\n                    \"type\": \"page\",\r\n                    \"title\": \"here\",\r\n                    \"children\": [],\r\n                    \"link\": {\r\n                        \"type\": \"link\",\r\n                        \"value\": \"http://localhost:6006/?path=/story/navbar-desktop--primary\"\r\n                    }\r\n                }\r\n            ],\r\n            \"link\": {\r\n                \"type\": \"link\",\r\n                \"value\": \"http://seasonvar.ru/\"\r\n            },\r\n            \"expanded\": true\r\n        },\r\n        {\r\n            \"id\": \"e1e6b180-5c1e-11ed-be7e-cb281a8f3f7b\",\r\n            \"type\": \"button\",\r\n            \"title\": \"button link\",\r\n            \"children\": [],\r\n            \"link\": {\r\n                \"type\": \"link\",\r\n                \"value\": \"https://aliexpress.ru/\"\r\n            }\r\n        }\r\n    ],\r\n    \"mobileHeight\": 65,\r\n    \"logoAlignment\": \"left\",\r\n    \"mobileFontSize\": 14,\r\n    \"navBarBehavior\": \"frozen\",\r\n    \"navBarTextBold\": true,\r\n    \"navBarHoverColor\": \"#41c5c2\",\r\n    \"navBarTextItalic\": false,\r\n    \"navBarTextSpacing\": 10,\r\n    \"logoCropperOptions\": {\r\n        \"x\": 0,\r\n        \"y\": 0,\r\n        \"zoom\": 1.4,\r\n        \"width\": 500,\r\n        \"height\": 160,\r\n        \"rotate\": 0,\r\n        \"scaleX\": 1,\r\n        \"scaleY\": 1,\r\n        \"imageBox\": {\r\n            \"x\": 0,\r\n            \"y\": 0,\r\n            \"width\": 500,\r\n            \"height\": 160\r\n        },\r\n        \"imgWidth\": 250,\r\n        \"imgHeight\": 80,\r\n        \"imagePosition\": {\r\n            \"x\": 0,\r\n            \"y\": 0,\r\n            \"width\": 100,\r\n            \"height\": 100\r\n        }\r\n    },\r\n    \"navBarClickedColor\": \"#41c5c2\",\r\n    \"navBarRegularColor\": \"#41c5c2\",\r\n    \"navBarTextFontSize\": 14,\r\n    \"mobileLogoAlignment\": \"right\",\r\n    \"mobileTextAlignment\": \"left\",\r\n    \"navBarTextAlignment\": \"left\",\r\n    \"navBarTextUnderline\": false,\r\n    \"navBarTextFontFamily\": \"Arial\",\r\n    \"navBarTextHoverColor\": \"#292e50\",\r\n    \"navBarTextClickedColor\": \"#292e50\",\r\n    \"navBarTextRegularColor\": \"#ffffff\",\r\n    \"dropdownSettingsTextBold\": false,\r\n    \"buttonSettingsBorderWidth\": 2,\r\n    \"buttonSettingsRegularFill\": \"transparent\",\r\n    \"buttonSettingsRoundCorners\": 20,\r\n    \"dropdownSettingsTextItalic\": false,\r\n    \"navBarRegularOnScrollColor\": \"#41c5c2\",\r\n    \"buttonSettingsRegularBorder\": \"#fff\",\r\n    \"buttonSettingsTextColorHover\": \"#fff\",\r\n    \"dropdownSettingsInactiveFill\": \"#2cbab7\",\r\n    \"dropdownSettingsTextFontSize\": 14,\r\n    \"buttonSettingsVerticalPadding\": 8,\r\n    \"dropdownSettingsTextUnderline\": false,\r\n    \"buttonSettingsHoverClickedFill\": \"#292e50\",\r\n    \"buttonSettingsTextColorClicked\": \"#fff\",\r\n    \"buttonSettingsTextColorRegular\": \"#fff\",\r\n    \"dropdownSettingsInactiveBorder\": \"#2cbab7\",\r\n    \"dropdownSettingsTextColorHover\": \"#41c5c2\",\r\n    \"dropdownSettingsTextFontFamily\": \"Arial\",\r\n    \"buttonSettingsHorizontalPadding\": 20,\r\n    \"dropdownSettingsVerticalPadding\": 8,\r\n    \"buttonSettingsHoverClickedBorder\": \"#fff\",\r\n    \"dropdownSettingsHoverClickedFill\": \"#eeffff\",\r\n    \"dropdownSettingsTextColorClicked\": \"#41c5c2\",\r\n    \"dropdownSettingsTextColorRegular\": \"#fff\",\r\n    \"dropdownSettingsHorizontalPadding\": 10,\r\n    \"dropdownSettingsHoverClickedBorder\": \"#eeffff\"\r\n}\r\n","const roundedNumber = (value) => Math.floor(value);\n\nexport const getCropperQueryString = (crop) => {\n  if (!crop || Object.keys(crop).length === 0) {\n    return '';\n  }\n  const { imageBox, rotate } = crop;\n  const { x, y, height, width } = imageBox;\n  return `?x=${roundedNumber(x)}&y=${roundedNumber(y)}&w=${roundedNumber(width)}&h=${roundedNumber(\n    height\n  )}&rotate=${rotate}`;\n};\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = ({\r\n  icon,\r\n  opacity = 1,\r\n  hoverOpacity = 1,\r\n  color = '#000',\r\n  hoverColor = color,\r\n  size = 20,\r\n  rotate,\r\n  noCursor,\r\n  padding = 0,\r\n  width,\r\n  height,\r\n  tableIcon\r\n}) => (\r\n  <IconWrapper\r\n    color={color}\r\n    hoverColor={hoverColor}\r\n    size={size}\r\n    width={width}\r\n    height={height}\r\n    opacity={opacity}\r\n    hoverOpacity={hoverOpacity}\r\n    rotate={rotate}\r\n    noCursor={noCursor}\r\n    padding={padding}\r\n    tableIcon={tableIcon}\r\n  >\r\n    {_renderIcon(icon)}\r\n  </IconWrapper>\r\n);\r\n\r\nconst _renderIcon = (icon) => {\r\n  const Icon = icon;\r\n\r\n  if (typeof icon === 'function') {\r\n    return <Icon />;\r\n  } else if (typeof icon === 'string') {\r\n    return icon;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst IconWrapper = styled.div`\r\n  cursor: ${({ noCursor }) => (noCursor ? 'initial' : 'pointer')};\r\n  display: ${({ tableIcon }) => (tableIcon ? 'table-cell' : 'flex')};\r\n  flex: 0 0 auto;\r\n  align-items: center;\r\n  font-size: ${({ tableIcon }) => !tableIcon && '0'};\r\n  width: ${({ size, width }) => (width ? width : size)}px;\r\n  height: ${({ size, height }) => (height ? height : size)}px;\r\n  transform: rotate(${({ rotate }) => rotate}deg);\r\n  transform-origin: 50% 50%;\r\n  padding: ${({ padding }) => padding}px;\r\n\r\n  :hover {\r\n    svg {\r\n      fill: ${({ hoverColor }) => hoverColor};\r\n      opacity: ${({ hoverOpacity }) => hoverOpacity};\r\n    }\r\n  }\r\n\r\n  svg {\r\n    fill: ${({ color }) => color};\r\n    opacity: ${({ opacity }) => opacity};\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: all ease-in-out 0.3s;\r\n    vertical-align: ${({ tableIcon }) => tableIcon && 'middle'};\r\n  }\r\n`;\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string,\r\n  hoverColor: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  size: PropTypes.number,\r\n  padding: PropTypes.number,\r\n  opacity: PropTypes.number,\r\n  hoverOpacity: PropTypes.number,\r\n  rotate: PropTypes.number,\r\n  noCursor: PropTypes.bool,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  tableIcon: PropTypes.bool\r\n};\r\n\r\nIcon.defaultProps = {\r\n  opacity: 1,\r\n  color: '#000',\r\n  size: 20,\r\n  padding: 0,\r\n  rotate: 0,\r\n  noCursor: false,\r\n  tableIcon: false\r\n};\r\n\r\nexport { Icon };\r\n","import React from 'react';\r\nconst ArrowIcon = () => (\r\n  <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n    <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\r\n  </svg>\r\n);\r\n\r\nexport default ArrowIcon;\r\n","export const openLinkInNewTab = (link, inNewTab) =>\r\n    window.open(link, inNewTab ? '_blank' : '_self', 'noreferrer noopener');\r\n","import styled from \"styled-components\";\r\n\r\nexport const IconWrapper = styled.div``;\r\n\r\nexport const PageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  height: 100%;\r\n  transition: all 300ms ease-out;\r\n\r\n  &:hover {\r\n    color: ${({navBarTextHoverColor}) => navBarTextHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    color: ${({navBarTextClickedColor}) => navBarTextClickedColor};\r\n  }\r\n`;\r\n\r\nexport const PageWrapperDesktop = styled(PageWrapper)`\r\n    padding: 0 10px;\r\n`\r\n\r\nexport const PageWrapperMobile = styled(PageWrapper)`\r\n    word-break: break-word;\r\n`;\r\n","import React, {memo, useCallback, useEffect, useRef, useState} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport {useOutsideClick} from '../../hooks/useOutsideClick.js';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport {IconWrapper, PageWrapperDesktop} from \"../styled\";\r\n\r\nconst DropDown = memo((props) => {\r\n\r\n    const {\r\n        disabledRedirect,\r\n        childs,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding,\r\n        setOpen,\r\n        rootId,\r\n        parentRef,\r\n        isPreview,\r\n    } = props;\r\n\r\n    const ref= useRef();\r\n\r\n    const isClient = typeof window === \"object\";\r\n\r\n    let left = 0, top = 0;\r\n    if (isClient && parentRef) {\r\n        left = parentRef.getBoundingClientRect().left;\r\n        const navbarContainer = parentRef.closest(\"[data-navbarcontainer]\");\r\n        const navbar = parentRef.closest('.navbar-desktop');\r\n        if (navbarContainer) {\r\n            const containerLeft = navbarContainer.getBoundingClientRect().left;\r\n            if (left < containerLeft) left = containerLeft;\r\n        }\r\n        if (navbar) {\r\n            const navbarBox = navbar.getBoundingClientRect();\r\n            top = navbarBox.top + navbarBox.height + window.scrollY;\r\n        }\r\n    }\r\n\r\n    const component = <DropdownWrapper ref={ref} data-list={true} className={\"navbar-list\"} left={left} top={top} dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}>\r\n        {childs.map((el) => (\r\n            <DropdownElement\r\n                key={el.id}\r\n                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                data-link={el.link?.value}\r\n                onClick={() => {\r\n                    console.log('????')\r\n                    if (el.link?.value && !disabledRedirect) {\r\n                        openLinkInNewTab(el.link?.value, isPreview);\r\n                        setOpen(false);\r\n                    } else {\r\n                        setOpen(false);\r\n                    }\r\n                }}\r\n            >\r\n                {el.title}\r\n            </DropdownElement>\r\n        ))}\r\n    </DropdownWrapper>\r\n\r\n    if (isClient) {\r\n        return ReactDOM.createPortal(component, document.getElementById(rootId));\r\n    }\r\n    return component;\r\n})\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link: linkProps,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         dropdownSettingsInactiveFill,\r\n         dropdownSettingsInactiveBorder,\r\n         dropdownSettingsHoverClickedFill,\r\n         dropdownSettingsHoverClickedBorder,\r\n         dropdownSettingsTextColorRegular,\r\n         dropdownSettingsTextColorHover,\r\n         dropdownSettingsTextColorClicked,\r\n         dropdownSettingsTextFontFamily,\r\n         dropdownSettingsTextFontSize,\r\n         dropdownSettingsTextBold,\r\n         dropdownSettingsTextUnderline,\r\n         dropdownSettingsTextItalic,\r\n         dropdownSettingsHorizontalPadding,\r\n         dropdownSettingsVerticalPadding,\r\n         isStatic,\r\n         navBarHoverColor,\r\n         navBarClickedColor,\r\n         rootId,\r\n         isPreview,\r\n     }) => {\r\n        const [open, setOpen] = useState(isStatic);\r\n        const link = linkProps?.value;\r\n\r\n        const ref = useOutsideClick(() => {\r\n            setTimeout(() => {\r\n                setOpen(false);\r\n            }, 200)\r\n\r\n        });\r\n\r\n        const [containerRef, setContainerRef] = useState(null);\r\n        useEffect(() => {\r\n            setContainerRef(ref.current);\r\n        }, [])\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link, isPreview);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link, isPreview]);\r\n\r\n        useEffect(() => {\r\n            const handleScroll = () => {\r\n                setOpen(false)\r\n            }\r\n            document.body.addEventListener(\"scroll\", handleScroll);\r\n            return () => {\r\n                document.body.removeEventListener(\"scroll\", handleScroll);\r\n            }\r\n        }, [])\r\n\r\n        return (\r\n            <Container ref={ref} navBarHoverColor={navBarHoverColor} navBarClickedColor={navBarClickedColor}>\r\n                <PageWrapperDesktop\r\n                    navBarTextHoverColor={navBarTextHoverColor}\r\n                    navBarTextClickedColor={navBarTextClickedColor}\r\n                    onClick={onClick}\r\n                    data-link={!isDropdown ? link : undefined}\r\n                    data-isdropdown={isDropdown}\r\n                >\r\n                    {title}{' '}\r\n                    {isDropdown && (\r\n                        <IconWrapper data-arrow={true}>\r\n                            {open ? (\r\n                                <Icon icon={ArrowIcon} rotate={isStatic ? -90 : 90} color={'#ffffff'}/>\r\n                            ) : (\r\n                                <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'}/>\r\n                            )}\r\n                        </IconWrapper>\r\n                    )}\r\n                </PageWrapperDesktop>\r\n                {open && isDropdown &&\r\n                    <DropDown\r\n                        dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                        dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                        dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                        dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                        dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                        dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                        dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                        dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                        dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                        dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                        dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                        dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                        dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                        dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                        childs={children}\r\n                        setOpen={setOpen}\r\n                        disabledRedirect={disabledRedirect}\r\n                        rootId={rootId}\r\n                        parentRef={containerRef}\r\n                        isPreview={isPreview}\r\n                        open={open}\r\n                    />\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n);\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    background: ${({navBarHoverColor}) => navBarHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({navBarClickedColor}) => navBarClickedColor};\r\n  }\r\n`;\r\n\r\nconst DropdownWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  left: ${({left}) => left}px;\r\n  top: ${({top}) => top}px;\r\n  z-index: 2;\r\n  \r\n  > div {\r\n    border-right: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n    border-left: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n    border-bottom: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n  }\r\n  > div:first-child {\r\n    border-top: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n  }\r\n`;\r\n\r\nconst DropdownElement = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  background: ${({dropdownSettingsInactiveFill}) => dropdownSettingsInactiveFill};\r\n  color: ${({dropdownSettingsTextColorRegular}) => dropdownSettingsTextColorRegular};\r\n  font-size: ${({dropdownSettingsTextFontSize}) => dropdownSettingsTextFontSize}px;\r\n  font-family: ${({dropdownSettingsTextFontFamily}) => dropdownSettingsTextFontFamily};\r\n  font-weight: ${({dropdownSettingsTextBold}) => (dropdownSettingsTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({dropdownSettingsTextItalic}) => (dropdownSettingsTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({dropdownSettingsTextUnderline}) => (dropdownSettingsTextUnderline ? 'underline' : 'none')};\r\n  padding: ${({dropdownSettingsVerticalPadding, dropdownSettingsHorizontalPadding}) =>\r\n          `${dropdownSettingsVerticalPadding}px ${dropdownSettingsHorizontalPadding}px`};\r\n\r\n  &:hover {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorHover}) => dropdownSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorClicked}) => dropdownSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    dropdownSettingsInactiveFill: PropTypes.string,\r\n    dropdownSettingsInactiveBorder: PropTypes.string,\r\n    dropdownSettingsHoverClickedFill: PropTypes.string,\r\n    dropdownSettingsHoverClickedBorder: PropTypes.string,\r\n    dropdownSettingsTextColorRegular: PropTypes.string,\r\n    dropdownSettingsTextColorHover: PropTypes.string,\r\n    dropdownSettingsTextColorClicked: PropTypes.string,\r\n    dropdownSettingsTextFontFamily: PropTypes.string,\r\n    dropdownSettingsTextFontSize: PropTypes.number,\r\n    dropdownSettingsTextBold: PropTypes.bool,\r\n    dropdownSettingsTextUnderline: PropTypes.bool,\r\n    dropdownSettingsTextItalic: PropTypes.bool,\r\n    dropdownSettingsHorizontalPadding: PropTypes.number,\r\n    dropdownSettingsVerticalPadding: PropTypes.number,\r\n    navBarHoverColor: PropTypes.string,\r\n    navBarClickedColor: PropTypes.string,\r\n    rootId: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, { createRef, useEffect } from 'react';\r\n\r\nexport const useOutsideClick = (callback) => {\r\n  const ref = createRef();\r\n\r\n  const listener = (e) => {\r\n    if (ref.current && !ref?.current.contains(e.target)) {\r\n      callback(e, ref.current);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', listener);\r\n    document.addEventListener('touchstart', listener);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener);\r\n      document.removeEventListener('touchstart', listener);\r\n    };\r\n  });\r\n\r\n  return ref;\r\n};\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link: linkProps,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         navBarTextFontSize,\r\n         isPreview\r\n     }) => {\r\n\r\n        const link = linkProps?.value;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link, isPreview);\r\n            }\r\n        }, [link, disabledRedirect, isPreview]);\r\n        return (\r\n            <ButtonWrapper\r\n                buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                onClick={onClick}\r\n                data-link={link}\r\n                navBarTextFontSize={navBarTextFontSize}\r\n            >\r\n                {title}\r\n            </ButtonWrapper>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: all 300ms ease-out;\r\n  border-radius: ${({buttonSettingsRoundCorners}) => buttonSettingsRoundCorners}px;\r\n  border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsRegularBorder}) => buttonSettingsRegularBorder};\r\n  background: ${({buttonSettingsRegularFill}) => buttonSettingsRegularFill};\r\n  padding: ${({buttonSettingsHorizontalPadding}) =>\r\n          `0 ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({buttonSettingsTextColorRegular}) => buttonSettingsTextColorRegular};\r\n  height: ${({\r\n               buttonSettingsVerticalPadding,\r\n               navBarTextFontSize,\r\n               buttonSettingsBorderWidth\r\n             }) => navBarTextFontSize + ((buttonSettingsVerticalPadding || 0) * 2) + ((buttonSettingsBorderWidth || 0) * 2)}px;\r\n\r\n  &:hover {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorHover}) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorClicked}) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string,\r\n    navBarTextFontSize: PropTypes.number,\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Index = forwardRef(({ height, id, crop, source, alt, ignoreMaxHeight }, ref) => {\r\n  const styles = { width: '100%', height: '100%', objectFit: 'contain' };\r\n  if (!ignoreMaxHeight) {\r\n    styles.maxHeight = '600px';\r\n  }\r\n  return (\r\n    <CropArea ref={ref} height={height} id={id}>\r\n      <CropImageWrapper {...crop.imagePosition}>\r\n        <img src={source} alt={alt} style={styles} />\r\n      </CropImageWrapper>\r\n    </CropArea>\r\n  );\r\n});\r\n\r\nconst CropImageWrapper = styled.div`\r\n  position: relative;\r\n  left: ${({ x }) => x || 0}%;\r\n  top: ${({ y }) => y || 0}%;\r\n  width: ${({ width }) => width || 100}%;\r\n  height: ${({ height }) => height || 100}%;\r\n`;\r\n\r\nconst CropArea = styled.div`\r\n  width: 100%;\r\n  height: ${({ height }) =>\r\n    height ? height + 'px' : '100%'};\r\n  position: relative;\r\n  background-color: transparent;\r\n  overflow: hidden;\r\n`;\r\n\r\nIndex.propTypes = {\r\n  height: PropTypes.number,\r\n  id: PropTypes.string,\r\n  crop: PropTypes.object,\r\n  source: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n  ignoreMaxHeight: PropTypes.bool,\r\n};\r\n\r\nIndex.defaultProps = {\r\n  id: '',\r\n  alt: '',\r\n  ignoreMaxHeight: false,\r\n  crop: {}\r\n};\r\n\r\nexport default Index;\r\n","import React, {Fragment, useEffect, useRef} from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport {logoImageWidth} from '../../consts.js';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport NavBarPage from './Page.js';\r\nimport NavBarButton from './Button.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\n\r\nconst LogoElement = ({logoSrc, logoCropperOptions, hideElement, height}) => {\r\n    if (hideElement) return null;\r\n    return (\r\n        <Logo hideElement={hideElement} height={height}>\r\n            <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)} crop={logoCropperOptions}/>\r\n        </Logo>\r\n    )\r\n}\r\n\r\nconst NavBar = ({\r\n                    config,\r\n                    disabledRedirect = false,\r\n                    disabledListClick = false,\r\n                    stickyOffset = 0,\r\n                    isStatic = false,\r\n                    hideLogo = false,\r\n                    isPreview = false,\r\n                    isListView = false,\r\n                    rootId = \"root\"\r\n                }) => {\r\n    const ref = useRef();\r\n    const {\r\n        height,\r\n        navBarRegularColor,\r\n        navBarHoverColor,\r\n        navBarClickedColor,\r\n        navBarRegularOnScrollColor,\r\n        logoAlignment,\r\n        logoCropperOptions,\r\n        logoSrc,\r\n        navBarTextAlignment,\r\n        navBarTextFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        structure,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        navBarBehavior,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding\r\n    } = config;\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (navBarRegularColor === 'transparent') {\r\n                let color = navBarRegularOnScrollColor;\r\n                if (window.scrollY === 0) {\r\n                    if (isPreview) {\r\n                        color = \"#000\";\r\n                    } else {\r\n                        color = navBarRegularColor;\r\n                    }\r\n                }\r\n                ref.current.style.backgroundColor = color;\r\n            }\r\n        }\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n    }, [navBarRegularColor, navBarRegularOnScrollColor, isPreview])\r\n\r\n    return (\r\n        <Wrapper ref={ref} height={height} navBarRegularColor={navBarRegularColor} isPreview={isPreview}\r\n                 navBarBehavior={navBarBehavior}\r\n                 stickyOffset={stickyOffset} className={\"navbar-desktop\"} data-color={navBarRegularColor}\r\n                 data-coloronscroll={navBarRegularOnScrollColor} isListView={isListView}>\r\n            <Menu height={height}>\r\n                <LogoElement logoSrc={logoSrc} logoCropperOptions={logoCropperOptions}\r\n                             hideElement={hideLogo || logoAlignment !== 'left'} height={height}/>\r\n                <Container\r\n                    data-navbarcontainer={true}\r\n                    navBarTextAlignment={navBarTextAlignment}\r\n                    navBarTextFontSize={navBarTextFontSize}\r\n                    navBarTextFontFamily={navBarTextFontFamily}\r\n                    navBarTextBold={navBarTextBold}\r\n                    navBarTextItalic={navBarTextItalic}\r\n                    navBarTextUnderline={navBarTextUnderline}\r\n                    navBarTextRegularColor={navBarTextRegularColor}\r\n                    navBarTextSpacing={navBarTextSpacing}\r\n                    // logoAlignment={logoAlignment}\r\n                >\r\n                    {\r\n                        structure?.length === 0 && isPreview ?\r\n                            <PreviewText navBarTextAlignment={navBarTextAlignment}>Navigation will preview here once\r\n                                created</PreviewText> :\r\n                            <>\r\n                                {structure?.map((el) => {\r\n                                    let component = null;\r\n                                    if (el.type === 'button') {\r\n                                        component = (\r\n                                            <NavBarButtonWrapper>\r\n                                                <NavBarButton\r\n                                                    {...el}\r\n                                                    disabledRedirect={disabledRedirect}\r\n                                                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                                    navBarTextFontSize={navBarTextFontSize}\r\n                                                    isPreview={isPreview}\r\n                                                />\r\n                                            </NavBarButtonWrapper>\r\n                                        );\r\n                                    } else if (el.type === 'page') {\r\n                                        component = (\r\n                                            <NavBarPage\r\n                                                {...el}\r\n                                                disabledRedirect={disabledRedirect}\r\n                                                disabledListClick={disabledListClick}\r\n                                                navBarTextHoverColor={navBarTextHoverColor}\r\n                                                navBarTextClickedColor={navBarTextClickedColor}\r\n                                                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                                                dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                                                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                                                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                                                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                                                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                                                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                                                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                                                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                                                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                                                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                                                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                                                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                                                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                                                isStatic={isStatic}\r\n                                                navBarHoverColor={navBarHoverColor}\r\n                                                navBarClickedColor={navBarClickedColor}\r\n                                                rootId={rootId}\r\n                                                isPreview={isPreview}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                    return <Fragment key={el.id}>{component}</Fragment>;\r\n                                })}\r\n                            </>\r\n                    }\r\n                </Container>\r\n                <LogoElement logoSrc={logoSrc} logoCropperOptions={logoCropperOptions}\r\n                             hideElement={hideLogo || logoAlignment !== 'right'} height={height}/>\r\n            </Menu>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nNavBar.propTypes = {\r\n    config: PropTypes.object,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    stickyOffset: PropTypes.number,\r\n    isStatic: PropTypes.bool,\r\n    hideLogo: PropTypes.bool,\r\n    isPreview: PropTypes.bool,\r\n};\r\n\r\nconst PreviewText = styled.div`\r\n  font-family: Montserrat-bold, sans-serif;\r\n  display: flex !important;\r\n  align-items: center;\r\n  justify-content: ${({navBarTextAlignment}) => {\r\n    if (navBarTextAlignment === 'right') {\r\n      return 'flex-end';\r\n    } else if (navBarTextAlignment === 'left') {\r\n      return 'flex-start';\r\n    }\r\n    return 'center';\r\n  }};\r\n  width: auto;\r\n  font-size: 15px;\r\n  letter-spacing: 1.5px;\r\n  text-transform: uppercase;\r\n  height: 100%;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({\r\n                         navBarRegularColor,\r\n                         isPreview,\r\n                         isListView\r\n                       }) => (isPreview || isListView) && navBarRegularColor === 'transparent' ? \"black\" : navBarRegularColor};\r\n  padding: 0 24px;\r\n  width: 100%;\r\n  margin: auto;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n  z-index: 1002;\r\n  transition: background-color .2s ease-in-out;\r\n\r\n  ${({navBarBehavior, stickyOffset, navBarRegularColor, isPreview, isListView}) => {\r\n    if (!isListView) {\r\n      if (navBarRegularColor === 'transparent') {\r\n        if (navBarBehavior === 'frozen') {\r\n          if (isPreview) {\r\n            return css`\r\n              position: sticky;\r\n              top: ${stickyOffset}px;\r\n            `;\r\n          }\r\n          return css`\r\n            position: fixed;\r\n            top: ${stickyOffset}px;\r\n          `;\r\n        }\r\n        return css`\r\n          position: absolute;\r\n          top: ${stickyOffset}px;\r\n        `;\r\n      } else if (navBarBehavior === 'frozen') {\r\n        return css`\r\n          position: sticky;\r\n          top: ${stickyOffset}px;\r\n        `;\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${({height}) => height}px;\r\n  opacity: ${({hideElement}) => hideElement ? 0 : 1};\r\n`;\r\n\r\nconst Menu = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  max-width: 1367px;\r\n  margin: auto;\r\n  height: ${({height}) => height}px;\r\n`;\r\n\r\n/*\r\n  margin: ${({logoAlignment}) => {\r\n    if (logoAlignment === 'right') {\r\n      return '0 24px 0 0';\r\n    }\r\n    return '0 0 0 24px';\r\n  }};\r\n */\r\n\r\nconst Container = styled.div`\r\n  display: inline;\r\n  white-space: nowrap;\r\n  margin: 0 24px;\r\n  text-align: ${({navBarTextAlignment}) => navBarTextAlignment};\r\n  font-size: ${({navBarTextFontSize}) => navBarTextFontSize}px;\r\n  font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n  font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n  height: 100%;\r\n  width: calc(100% - ${logoImageWidth + 50}px);\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n\r\n  > div {\r\n    margin-right: ${({navBarTextSpacing}) => navBarTextSpacing}px;\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    transition: all 300ms ease-out;\r\n\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst NavBarButtonWrapper = styled.div`\r\n`;\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nconst BurgerIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"19.94\" height=\"16.44\" viewBox=\"0 0 19.94 16.44\">\r\n        <path d=\"M20.41,6.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,6.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,13.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,13.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,20.34H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,20.34Z\" transform=\"translate(-1.97 -3.91)\" />\r\n    </svg>\r\n);\r\n\r\nexport default BurgerIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\n\r\nconst Row = ({children, onClick, mobileTextAlignment, link, isDropdown}) => {\r\n\r\n    return (\r\n        <Wrapper onClick={onClick} mobileTextAlignment={mobileTextAlignment} data-link={link} data-isdropdown={isDropdown}>\r\n            {children}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 15px;\r\n    display: flex;\r\n    justify-content: ${({mobileTextAlignment}) => mobileTextAlignment === 'center' ? 'center' : 'flex-start'};\r\n`\r\n\r\nRow.propTypes = {\r\n    children: PropTypes.any,\r\n    onClick: PropTypes.func,\r\n    link: PropTypes.string,\r\n    isDropdown: PropTypes.bool,\r\n};\r\n\r\nexport default Row;\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link: linkProps,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         mobileTextAlignment,\r\n         isConstructor\r\n     }) => {\r\n        const link = linkProps?.value;\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link, isConstructor);\r\n            }\r\n        }, [link, disabledRedirect, isConstructor]);\r\n        return (\r\n            <Row onClick={onClick} link={link} mobileTextAlignment={mobileTextAlignment}>\r\n                <ButtonWrapper\r\n                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                >\r\n                    {title}\r\n                </ButtonWrapper>\r\n            </Row>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  word-break: break-word;\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({ buttonSettingsRoundCorners }) => buttonSettingsRoundCorners}px;\r\n  border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n    ${({ buttonSettingsRegularBorder }) => buttonSettingsRegularBorder};\r\n  background: ${({ buttonSettingsRegularFill }) => buttonSettingsRegularFill};\r\n  padding: ${({ buttonSettingsVerticalPadding, buttonSettingsHorizontalPadding }) =>\r\n    `${buttonSettingsVerticalPadding}px ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({ buttonSettingsTextColorRegular }) => buttonSettingsTextColorRegular};\r\n\r\n  &:hover {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorHover }) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorClicked }) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, {memo, useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport {IconWrapper, PageWrapperMobile} from \"../styled\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link: linkProps,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         mobileTextAlignment,\r\n         isStatic,\r\n         isConstructor\r\n     }) => {\r\n        const link = linkProps?.value;\r\n        const [open, setOpen] = useState(isStatic);\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link, isConstructor);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link, isConstructor]);\r\n\r\n        return (\r\n            <Wrapper>\r\n                <Row isDropdown={isDropdown} link={!isDropdown ? link : undefined} onClick={onClick} mobileTextAlignment={mobileTextAlignment}>\r\n                    <PageWrapperMobile\r\n                        navBarTextHoverColor={navBarTextHoverColor}\r\n                        navBarTextClickedColor={navBarTextClickedColor}\r\n                    >\r\n                        {title}{' '}\r\n                        {isDropdown && (\r\n                            <IconWrapper data-arrow={true}>\r\n                                {open ? (\r\n                                    <Icon icon={ArrowIcon} rotate={isStatic ? -90 : 90} color={'#ffffff'}/>\r\n                                ) : (\r\n                                    <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'}/>\r\n                                )}\r\n                            </IconWrapper>\r\n                        )}\r\n                    </PageWrapperMobile>\r\n                </Row>\r\n                {open && isDropdown && (\r\n                    <Container data-mobile-dropdown-list={true}>\r\n                        {children.map((el) => (\r\n                            <Row\r\n                                key={el.id}\r\n                                onClick={() => {\r\n                                    if (el.link?.value && !disabledRedirect) {\r\n                                        openLinkInNewTab(el.link.value, isConstructor);\r\n                                    }\r\n                                }}\r\n                                link={el.link?.value}\r\n                                mobileTextAlignment={mobileTextAlignment}\r\n                            >\r\n                                <PageWrapperMobile\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                >\r\n                                    {el.title}\r\n                                </PageWrapperMobile>\r\n                            </Row>\r\n                        ))}\r\n                    </Container>\r\n                )}\r\n            </Wrapper>\r\n        )\r\n    }\r\n);\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    mobileTextAlignment: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, {Fragment, useCallback, useEffect, useState, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, {css} from 'styled-components';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {Icon} from \"../../components/Icon\";\r\nimport BurgerIcon from '../../icons/BurgerIcon.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\nimport NavBarButton from \"./Button\";\r\nimport NavBarPage from \"./Page\";\r\n\r\nconst NavBarMobile = ({\r\n                          config, stickyOffset = 0, isConstructor = false, isStatic = false, disabledRedirect = false,\r\n                          disabledListClick = false\r\n                      }) => {\r\n\r\n    const [open, setOpen] = useState(isConstructor);\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        if (!isConstructor) {\r\n            document.body.style.overflowY = open ? 'hidden' : \"auto\";\r\n        }\r\n    }, [isConstructor, open])\r\n\r\n    const {\r\n        mobileHeight,\r\n        navBarRegularColor,\r\n        navBarRegularOnScrollColor,\r\n        mobileLogoAlignment,\r\n        logoSrc,\r\n        logoCropperOptions,\r\n        navBarBehavior,\r\n        mobileFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        mobileTextAlignment,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        structure\r\n    } = config;\r\n\r\n    const onClick = useCallback(() => {\r\n        if (!isConstructor && !disabledListClick) {\r\n            setOpen(value => !value);\r\n        }\r\n    }, [isConstructor, disabledListClick]);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (navBarRegularColor === 'transparent') {\r\n                ref.current.style.backgroundColor = window.scrollY === 0 && !open ? navBarRegularColor : navBarRegularOnScrollColor;\r\n            }\r\n        }\r\n        if (navBarRegularColor === 'transparent') ref.current.style.backgroundColor = open ? navBarRegularOnScrollColor : navBarRegularColor;\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n    }, [open])\r\n\r\n    let wrapperColor = navBarRegularColor;\r\n    if (isConstructor && navBarRegularColor === 'transparent') {\r\n        wrapperColor = \"#000\";\r\n    } else if (open) {\r\n        wrapperColor = navBarRegularColor === 'transparent' ? navBarRegularOnScrollColor : navBarRegularColor\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={\"navbar-mobile\"} navBarBehavior={navBarBehavior} stickyOffset={stickyOffset}\r\n                   isConstructor={isConstructor} navBarRegularColor={navBarRegularColor}>\r\n            <Wrapper height={mobileHeight} ref={ref}\r\n                     navBarRegularColor={wrapperColor}\r\n                     data-mobile-header={true}>\r\n                <IconWrapper onClick={onClick} data-mobile-menu-button={true}>\r\n                    <Icon icon={BurgerIcon} color={'#ffffff'}/>\r\n                </IconWrapper>\r\n                <LogoWrapper mobileLogoAlignment={mobileLogoAlignment}>\r\n                    <LogoInner>\r\n                        <Logo height={mobileHeight}>\r\n                            <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)}\r\n                                       crop={logoCropperOptions}/>\r\n                        </Logo>\r\n                    </LogoInner>\r\n                </LogoWrapper>\r\n            </Wrapper>\r\n            <ListWrapper data-mobile-menu={true} mobileHeight={mobileHeight} offsetTop={stickyOffset + mobileHeight}\r\n                         isConstructor={isConstructor} open={open}\r\n                         navBarRegularColor={navBarRegularColor === 'transparent' ? isConstructor ? \"#000\" : navBarRegularOnScrollColor : navBarRegularColor}\r\n                         mobileFontSize={mobileFontSize} navBarTextFontFamily={navBarTextFontFamily}\r\n                         navBarTextBold={navBarTextBold}\r\n                         navBarTextItalic={navBarTextItalic}\r\n                         navBarTextUnderline={navBarTextUnderline}\r\n                         navBarTextRegularColor={navBarTextRegularColor}\r\n                         navBarTextSpacing={navBarTextSpacing}\r\n            >\r\n                {\r\n                    structure?.map(el => {\r\n                        let component = 'any';\r\n                        if (el.type === 'button') {\r\n                            component = (\r\n                                <NavBarButton\r\n                                    {...el}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    disabledRedirect={isConstructor}\r\n                                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                    isConstructor={isConstructor}\r\n                                />\r\n                            );\r\n                        } else if (el.type === 'page') {\r\n                            component = (\r\n                                <NavBarPage\r\n                                    {...el}\r\n                                    disabledRedirect={disabledRedirect}\r\n                                    disabledListClick={disabledListClick}\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    isStatic={isStatic}\r\n                                    isConstructor={isConstructor}\r\n                                />\r\n                            );\r\n                        }\r\n                        return <Fragment key={el.id}>{component}</Fragment>;\r\n                    })\r\n                }\r\n            </ListWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n  z-index: 1001;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  ${({navBarBehavior, stickyOffset, isConstructor, navBarRegularColor}) => {\r\n    if (navBarRegularColor === 'transparent' && !isConstructor) {\r\n      if (navBarBehavior === 'frozen') {\r\n        return css`\r\n          position: fixed;\r\n          top: ${stickyOffset}px;\r\n        `;\r\n      }\r\n      return css`\r\n        position: absolute;\r\n        top: ${stickyOffset}px;\r\n      `;\r\n    } else if (navBarBehavior === 'frozen' && !isConstructor) {\r\n      return css`\r\n        position: sticky;\r\n        top: ${stickyOffset}px;\r\n      `;\r\n    }\r\n    return \"\";\r\n  }\r\n  }`;\r\n\r\nconst ListWrapper = styled.div\r\n\r\n    `\r\n      display: flex;\r\n      flex-direction: column;\r\n      position: absolute;\r\n      top: ${({mobileHeight}) => mobileHeight}px;\r\n      width: 100%;\r\n      height: ${({isConstructor}) => isConstructor ? 'auto' : 0};\r\n      ${({isConstructor}) =>\r\n              isConstructor &&\r\n              css`\r\n                max-height: 350px;\r\n              `};\r\n      transition: height 0.5s ease;\r\n      background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n      overflow-x: hidden;\r\n      overflow-y: auto;\r\n      font-size: ${({mobileFontSize}) => mobileFontSize}px;\r\n      font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n      font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n      font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n      text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n      color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n      ${({offsetTop, open, isConstructor}) =>\r\n              !isConstructor && open &&\r\n              css`\r\n                height: calc(100vh - ${offsetTop}px);\r\n              `};\r\n    `\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 15px 13px 16px 5px;\r\n  //border: solid 1px rgba(164, 198, 225, 0.39);\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  align-items: center;\r\n  overflow: hidden;\r\n  justify-content: space-between;\r\n  transition: background-color .2s ease-in-out;\r\n`;\r\n\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  width: calc(100% - 57px);\r\n  justify-content: ${({mobileLogoAlignment}) => {\r\n    if (mobileLogoAlignment === 'center') {\r\n      return 'center';\r\n    } else if (mobileLogoAlignment === 'right') {\r\n      return 'flex-end';\r\n    }\r\n    return '';\r\n  }};\r\n`;\r\n\r\nconst LogoInner = styled.div`\r\n  display: flex;\r\n  width: 250px;\r\n`\r\n\r\nconst Logo = styled.div`\r\n  width: 100%;\r\n  height: ${({height}) => height}px;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  display: flex;\r\n  width: 44px;\r\n  height: 44px;\r\n  cursor: pointer;\r\n  > div {\r\n    margin: auto;\r\n  }\r\n`;\r\n\r\nNavBarMobile.propTypes = {\r\n    config: PropTypes.object,\r\n    stickyOffset: PropTypes.number,\r\n};\r\n\r\nexport default NavBarMobile;\r\n"],"names":["args","React","createElement","NavBar","bind","config","isPreview","logoImageWidth","logoImageHeight","name","height","logoSrc","structure","id","link","type","value","title","children","expanded","mobileHeight","logoAlignment","mobileFontSize","navBarBehavior","navBarTextBold","navBarHoverColor","navBarTextItalic","navBarTextSpacing","logoCropperOptions","x","y","zoom","width","rotate","scaleX","scaleY","imageBox","imgWidth","imgHeight","imagePosition","navBarClickedColor","navBarRegularColor","navBarTextFontSize","mobileLogoAlignment","mobileTextAlignment","navBarTextAlignment","navBarTextUnderline","navBarTextFontFamily","navBarTextHoverColor","navBarTextClickedColor","navBarTextRegularColor","dropdownSettingsTextBold","buttonSettingsBorderWidth","buttonSettingsRegularFill","buttonSettingsRoundCorners","dropdownSettingsTextItalic","navBarRegularOnScrollColor","buttonSettingsRegularBorder","buttonSettingsTextColorHover","dropdownSettingsInactiveFill","dropdownSettingsTextFontSize","buttonSettingsVerticalPadding","dropdownSettingsTextUnderline","buttonSettingsHoverClickedFill","buttonSettingsTextColorClicked","buttonSettingsTextColorRegular","dropdownSettingsInactiveBorder","dropdownSettingsTextColorHover","dropdownSettingsTextFontFamily","buttonSettingsHorizontalPadding","dropdownSettingsVerticalPadding","buttonSettingsHoverClickedBorder","dropdownSettingsHoverClickedFill","dropdownSettingsTextColorClicked","dropdownSettingsTextColorRegular","dropdownSettingsHorizontalPadding","dropdownSettingsHoverClickedBorder","roundedNumber","Math","floor","getCropperQueryString","crop","Object","keys","length","concat","Icon","_ref","icon","_ref$opacity","opacity","_ref$hoverOpacity","hoverOpacity","_ref$color","color","_ref$hoverColor","hoverColor","_ref$size","size","noCursor","_ref$padding","padding","tableIcon","IconWrapper","_renderIcon","styled","div","_templateObject","_taggedTemplateLiteral","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","propTypes","PropTypes","string","oneOfType","func","number","bool","defaultProps","ArrowIcon","viewBox","d","fill","openLinkInNewTab","inNewTab","window","open","PageWrapper","_templateObject2","PageWrapperDesktop","_templateObject3","PageWrapperMobile","_templateObject4","DropDown","memo","props","disabledRedirect","childs","setOpen","rootId","parentRef","ref","useRef","isClient","left","top","getBoundingClientRect","navbarContainer","closest","navbar","containerLeft","navbarBox","scrollY","component","DropdownWrapper","className","map","el","_el$link","DropdownElement","key","onClick","_el$link2","_el$link3","console","log","ReactDOM","createPortal","document","getElementById","NavBarPage","disabledListClick","linkProps","isStatic","_useState2","_slicedToArray","useState","callback","createRef","listener","e","current","contains","target","useEffect","addEventListener","removeEventListener","useOutsideClick","setTimeout","_useState4","containerRef","setContainerRef","isDropdown","useCallback","state","handleScroll","body","Container","undefined","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","array","NavBarButton","ButtonWrapper","Index","forwardRef","source","alt","styles","objectFit","ignoreMaxHeight","maxHeight","CropArea","CropImageWrapper","src","style","object","isRequired","LogoElement","hideElement","Logo","CropImage","_ref2$disabledRedirec","_ref2$disabledListCli","_ref2$stickyOffset","stickyOffset","_ref2$isStatic","_ref2$hideLogo","hideLogo","_ref2$isPreview","_ref2$isListView","isListView","_ref2$rootId","backgroundColor","Wrapper","Menu","PreviewText","Fragment","NavBarButtonWrapper","_extends","css","_templateObject7","_templateObject8","_templateObject9","_templateObject10","BurgerIcon","xmlns","transform","Row","any","isConstructor","NavBarMobile","_ref$stickyOffset","_ref$isConstructor","_ref$isStatic","_ref$disabledRedirect","_ref$disabledListClic","overflowY","wrapperColor","LogoWrapper","LogoInner","ListWrapper","offsetTop","_templateObject5","_templateObject6","_templateObject11","_templateObject12"],"mappings":"kvDASiB,SAACA,GAAD,OAAUC,EAACC,cAAAC,GAAWH,EAAtB,GAEeI,KAAK,CAAA,GAC7BJ,KAAO,CACXK,OAAAA,EACAC,WAAW,GCZR,MAAMC,EAAiB,IACjBC,EAAkB,GAElBH,EAAS,CAClBI,KAAQ,mBACRC,OAAU,GACVC,QAAW,qEACXC,UAAa,CACT,CACIC,GAAM,uCACNC,KAAQ,CACJL,KAAQ,cACRM,KAAQ,SACRC,MAAS,sCAEbD,KAAQ,OACRE,MAAS,YACTC,SAAY,IAEhB,CACIL,GAAM,uCACNC,KAAQ,KACRC,KAAQ,OACRE,MAAS,eACTC,SAAY,IAEhB,CACIL,GAAM,uCACNE,KAAQ,OACRE,MAAS,kBACTC,SAAY,CACR,CACIL,GAAM,uCACNE,KAAQ,OACRE,MAAS,OACTC,SAAY,GACZJ,KAAQ,CACJC,KAAQ,OACRC,MAAS,gEAIrBF,KAAQ,CACJC,KAAQ,OACRC,MAAS,wBAEbG,UAAY,GAEhB,CACIN,GAAM,uCACNE,KAAQ,SACRE,MAAS,cACTC,SAAY,GACZJ,KAAQ,CACJC,KAAQ,OACRC,MAAS,4BAIrBI,aAAgB,GAChBC,cAAiB,OACjBC,eAAkB,GAClBC,eAAkB,SAClBC,gBAAkB,EAClBC,iBAAoB,UACpBC,kBAAoB,EACpBC,kBAAqB,GACrBC,mBAAsB,CAClBC,EAAK,EACLC,EAAK,EACLC,KAAQ,IACRC,MAAS,IACTtB,OAAU,IACVuB,OAAU,EACVC,OAAU,EACVC,OAAU,EACVC,SAAY,CACRP,EAAK,EACLC,EAAK,EACLE,MAAS,IACTtB,OAAU,KAEd2B,SAAY,IACZC,UAAa,GACbC,cAAiB,CACbV,EAAK,EACLC,EAAK,EACLE,MAAS,IACTtB,OAAU,MAGlB8B,mBAAsB,UACtBC,mBAAsB,UACtBC,mBAAsB,GACtBC,oBAAuB,QACvBC,oBAAuB,OACvBC,oBAAuB,OACvBC,qBAAuB,EACvBC,qBAAwB,QACxBC,qBAAwB,UACxBC,uBAA0B,UAC1BC,uBAA0B,UAC1BC,0BAA4B,EAC5BC,0BAA6B,EAC7BC,0BAA6B,cAC7BC,2BAA8B,GAC9BC,4BAA8B,EAC9BC,2BAA8B,UAC9BC,4BAA+B,OAC/BC,6BAAgC,OAChCC,6BAAgC,UAChCC,6BAAgC,GAChCC,8BAAiC,EACjCC,+BAAiC,EACjCC,+BAAkC,UAClCC,+BAAkC,OAClCC,+BAAkC,OAClCC,+BAAkC,UAClCC,+BAAkC,UAClCC,+BAAkC,QAClCC,gCAAmC,GACnCC,gCAAmC,EACnCC,iCAAoC,OACpCC,iCAAoC,UACpCC,iCAAoC,UACpCC,iCAAoC,OACpCC,kCAAqC,GACrCC,mCAAsC,WCjIpCC,EAAgB,SAAC7D,GAAD,OAAW8D,KAAKC,MAAM/D,EAAtB,EAETgE,EAAwB,SAACC,GACpC,IAAKA,GAAqC,IAA7BC,OAAOC,KAAKF,GAAMG,OAC7B,MAAO,GAET,IAAQhD,EAAqB6C,EAArB7C,SAAUH,EAAWgD,EAAXhD,OACVJ,EAAwBO,EAAxBP,EAAGC,EAAqBM,EAArBN,EAAGpB,EAAkB0B,EAAlB1B,OAAQsB,EAAUI,EAAVJ,MACtB,MAAa6C,MAAAA,OAAAA,EAAchD,iBAAQgD,EAAc/C,GAAjD,OAAAuD,OAAyDR,EAAc7C,GAAY6C,OAAAA,OAAAA,EACjFnE,sBACUuB,EACb,ECPKqD,EAAO,SAAAC,GAAA,IACXC,IAAAA,KADWC,EAAAF,EAEXG,QAAAA,aAAU,EAFCD,EAAAE,EAAAJ,EAGXK,aAAAA,aAAe,EAHJD,EAAAE,EAAAN,EAIXO,MAAAA,aAAQ,OAJGD,EAAAE,EAAAR,EAKXS,WAAAA,aAAaF,EALFC,EAAAE,EAAAV,EAMXW,KAAAA,aAAO,GANID,EAOXhE,IAAAA,OACAkE,IAAAA,SARWC,EAAAb,EASXc,QAAAA,aAAU,EATCD,EAUXpE,IAAAA,MACAtB,IAAAA,OACA4F,IAAAA,UAZW,OAcXrG,gBAACsG,EAAD,CACET,MAAOA,EACPE,WAAYA,EACZE,KAAMA,EACNlE,MAAOA,EACPtB,OAAQA,EACRgF,QAASA,EACTE,aAAcA,EACd3D,OAAQA,EACRkE,SAAUA,EACVE,QAASA,EACTC,UAAWA,GAEVE,EAAYhB,GA3BJ,EA+BPgB,EAAc,SAAChB,GACnB,IAAMF,EAAOE,EAEb,MAAoB,mBAATA,EACFvF,EAAAC,cAACoF,EAAR,MACyB,iBAATE,EACTA,EAGF,IACR,EAEKe,EAAcE,EAAOC,IACfC,IAAAA,EAAAC,EAAA,CAAA,eAAA,iBAAA,8DAAA,eAAA,kBAAA,4BAAA,mDAAA,6CAAA,qBAAA,uCAAA,mBAAA,sGAAA,eAAA,SAAAC,GAAA,SAAGV,SAA2B,UAAY,SAA1C,IACC,SAAAW,GAAA,SAAGR,UAA6B,aAAe,MAA/C,IAGE,SAAAS,GAAA,SAAGT,WAA8B,GAAjC,IACJ,SAAAU,GAAA,IAAGd,IAAAA,KAAMlE,IAAAA,MAAT,OAAsBA,GAAgBkE,CAAtC,IACC,SAAAe,GAAA,IAAGf,IAAAA,KAAMxF,IAAAA,OAAT,OAAuBA,GAAkBwF,CAAzC,IACU,SAAAgB,GAAA,SAAGjF,MAAH,IAET,SAAAkF,GAAA,SAAGd,OAAH,IAIC,SAAAe,GAAA,SAAGpB,UAAH,IACG,SAAAqB,GAAA,SAAGzB,YAAH,IAKL,SAAA0B,GAAA,SAAGxB,KAAH,IACG,SAAAyB,GAAA,SAAG7B,OAAH,IAIO,SAAA8B,GAAA,SAAGlB,WAA6B,QAAhC,IAItBhB,EAAKmC,UAAY,CACf3B,MAAO4B,EAAUC,OACjB3B,WAAY0B,EAAUC,OACtBnC,KAAMkC,EAAUE,UAAU,CAACF,EAAUC,OAAQD,EAAUG,OACvD3B,KAAMwB,EAAUI,OAChBzB,QAASqB,EAAUI,OACnBpC,QAASgC,EAAUI,OACnBlC,aAAc8B,EAAUI,OACxB7F,OAAQyF,EAAUI,OAClB3B,SAAUuB,EAAUK,KACpB/F,MAAO0F,EAAUI,OACjBpH,OAAQgH,EAAUI,OAClBxB,UAAWoB,EAAUK,MAGvBzC,EAAK0C,aAAe,CAClBtC,QAAS,EACTI,MAAO,OACPI,KAAM,GACNG,QAAS,EACTpE,OAAQ,EACRkE,UAAU,EACVG,WAAW,GCjGb,oBAAM2B,EAAY,WAAA,OAChBhI,EAAAC,cAAA,MAAA,CAAKQ,OAAO,KAAKwH,QAAQ,YAAYlG,MAAM,MACzC/B,EAAAC,cAAA,OAAA,CAAMiI,EAAE,kBAAkBC,KAAK,SAC/BnI,EAAAC,cAAA,OAAA,CAAMiI,EAAE,6DAHM,ECDLE,EAAmB,SAACvH,EAAMwH,GAAP,OAC5BC,OAAOC,KAAK1H,EAAMwH,EAAW,SAAW,QAAS,sBADrB,ECEnB/B,EAAcE,EAAOC,IAA3BC,IAAAA,EAAAC,EAAA,CAAA,OAEM6B,EAAchC,EAAOC,IASrBgC,IAAAA,EAAA9B,EAAA,CAAA,6KAAA,sCAAA,eAAA,SAAArB,GAAA,SAAEvC,oBAAF,IAIA,SAAA6D,GAAA,SAAE5D,sBAAF,IAIA0F,EAAqBlC,EAAOgC,EAAPhC,CAA3BmC,IAAAA,EAAAhC,EAAA,CAAA,+BAIMiC,EAAoBpC,EAAOgC,EAAPhC,CAA1BqC,IAAAA,EAAAlC,EAAA,CAAA,sCCfDmC,EAAWC,GAAK,SAACC,GAEnB,IACIC,EAoBAD,EApBAC,iBACAC,EAmBAF,EAnBAE,OACAxF,EAkBAsF,EAlBAtF,6BACAO,EAiBA+E,EAjBA/E,+BACAM,EAgBAyE,EAhBAzE,iCACAI,EAeAqE,EAfArE,mCACAF,EAcAuE,EAdAvE,iCACAP,EAaA8E,EAbA9E,+BACAM,EAYAwE,EAZAxE,iCACAL,EAWA6E,EAXA7E,+BACAR,EAUAqF,EAVArF,6BACAT,EASA8F,EATA9F,yBACAW,EAQAmF,EARAnF,8BACAP,EAOA0F,EAPA1F,2BACAoB,EAMAsE,EANAtE,kCACAL,EAKA2E,EALA3E,gCACA8E,EAIAH,EAJAG,QACAC,EAGAJ,EAHAI,OACAC,EAEAL,EAFAK,UACAhJ,EACA2I,EADA3I,UAGEiJ,EAAKC,IAELC,EAA6B,YAAXlB,oBAAAA,OAAAA,YAAAA,EAAAA,SAEpBmB,EAAO,EAAGC,EAAM,EACpB,GAAIF,GAAYH,EAAW,CACvBI,EAAOJ,EAAUM,wBAAwBF,KACzC,IAAMG,EAAkBP,EAAUQ,QAAQ,0BACpCC,EAAST,EAAUQ,QAAQ,mBACjC,GAAID,EAAiB,CACjB,IAAMG,EAAgBH,EAAgBD,wBAAwBF,KAC1DA,EAAOM,IAAeN,EAAOM,EACpC,CACD,GAAID,EAAQ,CACR,IAAME,EAAYF,EAAOH,wBACzBD,EAAMM,EAAUN,IAAMM,EAAUvJ,OAAS6H,OAAO2B,OACnD,CACJ,CAED,IAAMC,EAAYlK,EAAAC,cAACkK,EAAD,CAAiBb,IAAKA,EAAK,aAAW,EAAMc,UAAW,cAAeX,KAAMA,EAAMC,IAAKA,EAAKzF,+BAAgCA,GACzIiF,EAAOmB,KAAI,SAACC,GAAD,IAAAC,EAAA,OACRvK,gBAACwK,EAAD,CACIC,IAAKH,EAAG1J,GACR8C,6BAA8BA,EAC9Ba,iCAAkCA,EAClCI,mCAAoCA,EACpCF,iCAAkCA,EAClCP,+BAAgCA,EAChCM,iCAAkCA,EAClCL,+BAAgCA,EAChCR,6BAA8BA,EAC9BT,yBAA0BA,EAC1BW,8BAA+BA,EAC/BP,2BAA4BA,EAC5BoB,kCAAmCA,EACnCL,gCAAiCA,EACjC,YAAA,QAAAkG,EAAWD,EAAGzJ,YAAd,IAAA0J,OAAA,EAAWA,EAASxJ,MACpB2J,QAAS,WAAM,IAAAC,EAE8BC,GADzCC,QAAQC,IAAI,gBACRH,EAAAL,EAAGzJ,qBAAME,QAAUkI,IACnBb,UAAgBwC,EAACN,EAAGzJ,yBAAH+J,EAAS7J,MAAOV,GACjC8I,GAAQ,IAERA,GAAQ,EAEf,GAEAmB,EAAGtJ,MA3BX,KAgCL,OAAIwI,EACOuB,EAASC,aAAad,EAAWe,SAASC,eAAe9B,IAE7Dc,CACV,IAEKiB,EAAapC,GACf,SA2BOzD,GAAA,IA1BF2D,IAAAA,iBACAmC,IAAAA,kBACMC,IAANxK,KACAG,IAAAA,MACA+B,IAAAA,qBACAC,IAAAA,uBACA/B,IAAAA,SACAyC,IAAAA,6BACAO,IAAAA,+BACAM,IAAAA,iCACAI,IAAAA,mCACAF,IAAAA,iCACAP,IAAAA,+BACAM,IAAAA,iCACAL,IAAAA,+BACAR,IAAAA,6BACAT,IAAAA,yBACAW,IAAAA,8BACAP,IAAAA,2BACAoB,IAAAA,kCACAL,IAAAA,gCACAiH,IAAAA,SACA9J,IAAAA,iBACAe,IAAAA,mBACA6G,IAAAA,OACA/I,IAAAA,UAEDkL,EAAAC,EAAwBC,EAASH,GAAjC,GAAO/C,EAAPgD,EAAA,GAAapC,EAAboC,EAAA,GACM1K,EAAOwK,aAAAA,EAAAA,EAAWtK,MAElBuI,EC3HiB,SAACoC,GAC9B,IAAMpC,EAAMqC,IAENC,EAAW,SAACC,IACZvC,EAAIwC,SAAYxC,SAAAA,EAAKwC,QAAQC,SAASF,EAAEG,SAC1CN,EAASG,EAAGvC,EAAIwC,UAcpB,OAVAG,GAAU,WAIR,OAHAhB,SAASiB,iBAAiB,YAAaN,GACvCX,SAASiB,iBAAiB,aAAcN,GAEjC,WACLX,SAASkB,oBAAoB,YAAaP,GAC1CX,SAASkB,oBAAoB,aAAcP,GAE9C,IAEMtC,CACR,CDuGmB8C,EAAgB,WACxBC,YAAW,WACPlD,GAAQ,EADF,GAEP,IAEN,IAEDmD,EAAAd,EAAwCC,EAAS,MAAjD,GAAOc,EAAPD,EAAA,GAAqBE,EAArBF,EAAA,GACAL,GAAU,WACNO,EAAgBlD,EAAIwC,QADf,GAEN,IAEH,IAAMW,EAAaxL,EAASkE,OAAS,EAE/BuF,EAAUgC,GAAY,WACpBD,IAAerB,EACfjC,GAAQ,SAACwD,GAAD,OAAYA,CAAZ,IACAF,GAAexD,IAAoBpI,GAC3CuH,EAAiBvH,EAAMR,EAE9B,GAAE,CAAC+K,EAAmBnC,EAAkBwD,EAAY5L,EAAMR,IAY3D,OAVA4L,GAAU,WACN,IAAMW,EAAe,WACjBzD,GAAQ,IAGZ,OADA8B,SAAS4B,KAAKX,iBAAiB,SAAUU,GAClC,WACH3B,SAAS4B,KAAKV,oBAAoB,SAAUS,GAN3C,GAQN,IAGC5M,gBAAC8M,EAAD,CAAWxD,IAAKA,EAAK9H,iBAAkBA,EAAkBe,mBAAoBA,GACzEvC,gBAAC0I,EAAD,CACI3F,qBAAsBA,EACtBC,uBAAwBA,EACxB0H,QAASA,EACT,YAAY+B,OAAoBM,EAAPlM,EACzB,kBAAiB4L,GAEhBzL,EAAO,IACPyL,GACGzM,gBAACsG,EAAD,CAAa,cAAY,GACpBiC,EACGvI,EAAAC,cAACoF,EAAD,CAAME,KAAMyC,EAAWhG,OAAQsJ,GAAY,GAAK,GAAIzF,MAAO,YAE3D7F,gBAACqF,EAAD,CAAME,KAAMyC,EAAWhG,QAAS,GAAI6D,MAAO,cAK1D0C,GAAQkE,GACLzM,gBAAC8I,EAAD,CACIpF,6BAA8BA,EAC9BO,+BAAgCA,EAChCM,iCAAkCA,EAClCI,mCAAoCA,EACpCF,iCAAkCA,EAClCP,+BAAgCA,EAChCM,iCAAkCA,EAClCL,+BAAgCA,EAChCR,6BAA8BA,EAC9BT,yBAA0BA,EAC1BW,8BAA+BA,EAC/BP,2BAA4BA,EAC5BoB,kCAAmCA,EACnCL,gCAAiCA,EACjC6E,OAAQjI,EACRkI,QAASA,EACTF,iBAAkBA,EAClBG,OAAQA,EACRC,UAAWkD,EACXlM,UAAWA,EACXkI,KAAMA,IAKzB,IAGCuE,EAAYtG,EAAOC,IAKPC,IAAAA,EAAAC,EAAA,CAAA,4EAAA,2CAAA,eAAA,SAAAC,GAAA,SAAEpF,gBAAF,IAIA,SAAAqF,GAAA,SAAEtE,kBAAF,IAIZ4H,EAAkB3D,EAAOC,IAIrBgC,IAAAA,EAAA9B,EAAA,CAAA,iFAAA,eAAA,kEAAA,iCAAA,mCAAA,4DAAA,eAAA,SAAAG,GAAA,SAAE2C,IAAF,IACD,SAAA1C,GAAA,SAAE2C,GAAF,IAIqB,SAAA1C,GAAA,SAAE/C,8BAAF,IACD,SAAAgD,GAAA,SAAEhD,8BAAF,IACE,SAAAiD,GAAA,SAAEjD,8BAAF,IAGH,SAAAkD,GAAA,SAAElD,8BAAF,IAItBuG,EAAkBhE,EAAOC,IAKfkC,IAAAA,EAAAhC,EAAA,CAAA,yGAAA,eAAA,mBAAA,uBAAA,qBAAA,oBAAA,yBAAA,iBAAA,qCAAA,4BAAA,iBAAA,2CAAA,4BAAA,iBAAA,eAAA,SAAAS,GAAA,SAAE1D,4BAAF,IACL,SAAA2D,GAAA,SAAE5C,gCAAF,IACI,SAAA6C,GAAA,SAAE3D,4BAAF,IACE,SAAA4D,GAAA,SAAEpD,8BAAF,IACA,SAAA6I,GAAA,SAAE9J,yBAA0D,OAAS,QAArE,IACD,SAAA+J,GAAA,SAAE3J,2BAA8D,SAAW,QAA3E,IACK,SAAA4J,GAAA,SAAErJ,8BAAoE,YAAc,MAApF,IACR,SAAAsJ,GAAA,IAAE9I,IAAAA,gCAAiCK,IAAAA,kCAAnC,MACAL,GAAAA,OAAAA,gBAAqCK,EADrC,KAAA,IAIK,SAAA0I,GAAA,SAAE7I,gCAAF,IACM,SAAA8I,GAAA,SAAE1I,kCAAF,IACX,SAAA2I,GAAA,SAAEpJ,8BAAF,IAIK,SAAAqJ,GAAA,SAAEhJ,gCAAF,IACM,SAAAiJ,GAAA,SAAE7I,kCAAF,IACX,SAAA8I,GAAA,SAAEjJ,gCAAF,IAIb2G,EAAW3D,UAAY,CACnB3G,KAAM4G,EAAUC,OAChBuB,iBAAkBxB,EAAUK,KAC5BsD,kBAAmB3D,EAAUK,KAC7B9G,MAAOyG,EAAUC,OACjB3E,qBAAsB0E,EAAUC,OAChC1E,uBAAwByE,EAAUC,OAClCzG,SAAUwG,EAAUiG,MACpBhK,6BAA8B+D,EAAUC,OACxCzD,+BAAgCwD,EAAUC,OAC1CnD,iCAAkCkD,EAAUC,OAC5C/C,mCAAoC8C,EAAUC,OAC9CjD,iCAAkCgD,EAAUC,OAC5CxD,+BAAgCuD,EAAUC,OAC1ClD,iCAAkCiD,EAAUC,OAC5CvD,+BAAgCsD,EAAUC,OAC1C/D,6BAA8B8D,EAAUI,OACxC3E,yBAA0BuE,EAAUK,KACpCjE,8BAA+B4D,EAAUK,KACzCxE,2BAA4BmE,EAAUK,KACtCpD,kCAAmC+C,EAAUI,OAC7CxD,gCAAiCoD,EAAUI,OAC3CrG,iBAAkBiG,EAAUC,OAC5BnF,mBAAoBkF,EAAUC,OAC9B0B,OAAQ3B,EAAUC,QE7RtB,QAAMiG,EAAe5E,GACjB,SAiBOzD,GAAA,IAhBI+F,IAANxK,KACAoI,IAAAA,iBACAjI,IAAAA,MACAqC,IAAAA,2BACAF,IAAAA,0BACAK,IAAAA,4BACAJ,IAAAA,0BACAgB,IAAAA,gCACAR,IAAAA,8BACAU,IAAAA,iCACAR,IAAAA,+BACAE,IAAAA,+BACAP,IAAAA,6BACAM,IAAAA,+BACAtB,IAAAA,mBACApC,IAAAA,UAGKQ,EAAOwK,aAAAA,EAAAA,EAAWtK,MAElB2J,EAAUgC,GAAY,WACpB7L,IAASoI,GACTb,EAAiBvH,EAAMR,EAFJ,GAIxB,CAACQ,EAAMoI,EAAkB5I,IAC5B,OACIL,gBAAC4N,EAAD,CACIvK,2BAA4BA,EAC5BF,0BAA2BA,EAC3BK,4BAA6BA,EAC7BJ,0BAA2BA,EAC3BgB,gCAAiCA,EACjCR,8BAA+BA,EAC/BU,iCAAkCA,EAClCR,+BAAgCA,EAChCE,+BAAgCA,EAChCP,6BAA8BA,EAC9BM,+BAAgCA,EAChC2G,QAASA,EACT,YAAW7J,EACX4B,mBAAoBA,GAEnBzB,EAGZ,IAGC4M,EAAgBpH,EAAOC,IAMVC,IAAAA,EAAAC,EAAA,CAAA,+IAAA,kBAAA,YAAA,oBAAA,iBAAA,eAAA,gBAAA,mCAAA,YAAA,sBAAA,iBAAA,uCAAA,YAAA,sBAAA,iBAAA,eAAA,SAAAC,GAAA,SAAEvD,0BAAF,IACP,SAAAwD,GAAA,SAAE1D,yBAAF,IAAsE,SAAA2D,GAAA,SAAEtD,2BAAF,IAClE,SAAAuD,GAAA,SAAE3D,yBAAF,IACH,SAAA4D,GAAA,IAAE5C,IAAAA,gCAAF,MAAA,KAAAgB,OACEhB,EADF,KAAA,IAEF,SAAA6C,GAAA,SAAEjD,8BAAF,IACC,SAAAkD,GAAA,IACGtD,IAAAA,8BADH,SAEGnB,mBAEiE,GAAtCmB,GAAiC,GAA8C,KAD1GT,2BACqG,EAJxG,IAOE,SAAAgE,GAAA,SAAEhE,yBAAF,IAAsE,SAAAiE,GAAA,SAAE9C,gCAAF,IAClE,SAAA+C,GAAA,SAAEvD,8BAAF,IACL,SAAAwD,GAAA,SAAE7D,4BAAF,IAIC,SAAA8D,GAAA,SAAEpE,yBAAF,IAAsE,SAAA6J,GAAA,SAAE1I,gCAAF,IAClE,SAAA2I,GAAA,SAAEnJ,8BAAF,IACL,SAAAoJ,GAAA,SAAEnJ,8BAAF,IAIb4J,EAAanG,UAAY,CACrByB,iBAAkBxB,EAAUK,KAC5B9G,MAAOyG,EAAUC,OACjB7G,KAAM4G,EAAUC,OAChBrE,2BAA4BoE,EAAUI,OACtC1E,0BAA2BsE,EAAUI,OACrCrE,4BAA6BiE,EAAUC,OACvCtE,0BAA2BqE,EAAUC,OACrC9D,8BAA+B6D,EAAUI,OACzCzD,gCAAiCqD,EAAUI,OAC3CvD,iCAAkCmD,EAAUC,OAC5C5D,+BAAgC2D,EAAUC,OAC1C1D,+BAAgCyD,EAAUC,OAC1CjE,6BAA8BgE,EAAUC,OACxC3D,+BAAgC0D,EAAUC,OAC1CjF,mBAAoBgF,EAAUI,QCjGlC,8BAAMgG,GAAQC,GAAW,SAAAxI,EAAqDgE,GAAQ,IAA1D7I,IAAAA,OAAQG,IAAAA,GAAIoE,IAAAA,KAAM+I,IAAAA,OAAQC,IAAAA,IAC9CC,EAAS,CAAElM,MAAO,OAAQtB,OAAQ,OAAQyN,UAAW,WAI3D,SALyDC,kBAGvDF,EAAOG,UAAY,SAGnBpO,gBAACqO,GAAD,CAAU/E,IAAKA,EAAK7I,OAAQA,EAAQG,GAAIA,GACtCZ,gBAACsO,GAAqBtJ,EAAK1C,cACzBtC,EAAAC,cAAA,MAAA,CAAKsO,IAAKR,EAAQC,IAAKA,EAAKQ,MAAOP,KAI1C,IAEKK,GAAmB9H,EAAOC,IAEtBC,IAAAA,EAAAC,EAAA,CAAA,oCAAA,cAAA,gBAAA,iBAAA,WAAA,SAAAC,GAAA,SAAGhF,GAAa,CAAhB,IACD,SAAAiF,GAAA,SAAGhF,GAAa,CAAhB,IACE,SAAAiF,GAAA,SAAG/E,OAAqB,GAAxB,IACC,SAAAgF,GAAA,SAAGtG,QAAuB,GAA1B,IAGN4N,GAAW7H,EAAOC,IAEZgC,IAAAA,EAAA9B,EAAA,CAAA,+BAAA,wFAAA,SAAAK,GAAA,IAAGvG,IAAAA,OAAH,OACRA,EAASA,EAAS,KAAO,MADjB,IAOZoN,GAAMrG,UAAY,CAChB/G,OAAQgH,EAAUI,OAClBjH,GAAI6G,EAAUC,OACd1C,KAAMyC,EAAUgH,OAChBV,OAAQtG,EAAUC,OAAOgH,WACzBV,IAAKvG,EAAUC,OACfyG,gBAAiB1G,EAAUK,MAG7B+F,GAAM9F,aAAe,CACnBnH,GAAI,GACJoN,IAAK,GACLG,iBAAiB,EACjBnJ,KAAM,CAAA,GCvCR,IAAM2J,GAAc,SAAwDrJ,GAAA,IAAtD5E,IAAAA,QAASiB,IAAAA,mBAAoBiN,IAAAA,YAAanO,IAAAA,OAC5D,OAAImO,EAAoB,KAEpB5O,gBAAC6O,GAAD,CAAMD,YAAaA,EAAanO,OAAQA,GACpCT,gBAAC8O,GAAD,CAAWf,OAAQrN,EAAUqE,EAAsBpD,GAAqBqD,KAAMrD,IAGzF,EAEKzB,GAAS,SAUO0G,GAAA,IATFxG,IAAAA,OASE2O,EAAAnI,EARFqC,iBAAAA,cAQE8F,EAAAC,EAAApI,EAPFwE,kBAAAA,cAOE4D,EAAAC,EAAArI,EANFsI,aAAAA,aAAe,EAMbD,EAAAE,EAAAvI,EALF0E,SAAAA,cAKE6D,EAAAC,EAAAxI,EAJFyI,SAAAA,cAIED,EAAAE,EAAA1I,EAHFvG,UAAAA,cAGEiP,EAAAC,EAAA3I,EAFF4I,WAAAA,cAEED,EAAAE,EAAA7I,EADFwC,OAAAA,aAAS,OACPqG,EACZnG,EAAMC,IAER9I,EA6CAL,EA7CAK,OACA+B,EA4CApC,EA5CAoC,mBACAhB,EA2CApB,EA3CAoB,iBACAe,EA0CAnC,EA1CAmC,mBACAgB,EAyCAnD,EAzCAmD,2BACAnC,EAwCAhB,EAxCAgB,cACAO,EAuCAvB,EAvCAuB,mBACAjB,EAsCAN,EAtCAM,QACAkC,EAqCAxC,EArCAwC,oBACAH,EAoCArC,EApCAqC,mBACAK,EAmCA1C,EAnCA0C,qBACAvB,EAkCAnB,EAlCAmB,eACAE,EAiCArB,EAjCAqB,iBACAoB,EAgCAzC,EAhCAyC,oBACAI,EA+BA7C,EA/BA6C,uBACAtC,EA8BAP,EA9BAO,UACAoC,EA6BA3C,EA7BA2C,qBACAC,EA4BA5C,EA5BA4C,uBACAtB,EA2BAtB,EA3BAsB,kBACA2B,EA0BAjD,EA1BAiD,2BACAF,EAyBA/C,EAzBA+C,0BACAK,EAwBApD,EAxBAoD,4BACAJ,EAuBAhD,EAvBAgD,0BACAgB,EAsBAhE,EAtBAgE,gCACAR,EAqBAxD,EArBAwD,8BACAE,EAoBA1D,EApBA0D,+BACAQ,EAmBAlE,EAnBAkE,iCACAN,EAkBA5D,EAlBA4D,+BACAP,GAiBArD,EAjBAqD,6BACAM,GAgBA3D,EAhBA2D,+BACAzC,GAeAlB,EAfAkB,eACAoC,GAcAtD,EAdAsD,6BACAO,GAaA7D,EAbA6D,+BACAM,GAYAnE,EAZAmE,iCACAI,GAWAvE,EAXAuE,mCACAF,GAUArE,EAVAqE,iCACAP,GASA9D,EATA8D,+BACAM,GAQApE,EARAoE,iCACAL,GAOA/D,EAPA+D,+BACAR,GAMAvD,EANAuD,6BACAT,GAKA9C,EALA8C,yBACAW,GAIAzD,EAJAyD,8BACAP,GAGAlD,EAHAkD,2BACAoB,GAEAtE,EAFAsE,kCACAL,GACAjE,EADAiE,gCAuBJ,OApBA4H,GAAU,WACN,IAAMW,EAAe,WACjB,GAA2B,gBAAvBpK,EAAsC,CACtC,IAAIqD,EAAQtC,EACW,IAAnB+E,OAAO2B,UAEHpE,EADAxF,EACQ,OAEAmC,GAGhB8G,EAAIwC,QAAQ0C,MAAMkB,gBAAkB7J,CACvC,GAGL,OADAyC,OAAO4D,iBAAiB,SAAUU,GAC3B,WACHtE,OAAO6D,oBAAoB,SAAUS,GAhBpC,GAkBN,CAACpK,EAAoBe,EAA4BlD,IAGhDL,gBAAC2P,GAAD,CAASrG,IAAKA,EAAK7I,OAAQA,EAAQ+B,mBAAoBA,EAAoBnC,UAAWA,EAC7EiB,eAAgBA,GAChB4N,aAAcA,EAAc9E,UAAW,iBAAkB,aAAY5H,EACrE,qBAAoBe,EAA4BiM,WAAYA,GACjExP,gBAAC4P,GAAD,CAAMnP,OAAQA,GACVT,gBAAC2O,GAAD,CAAajO,QAASA,EAASiB,mBAAoBA,EACtCiN,YAAaS,GAA8B,SAAlBjO,EAA0BX,OAAQA,IACxET,gBAAC8M,GAAD,CACI,wBAAsB,EACtBlK,oBAAqBA,EACrBH,mBAAoBA,EACpBK,qBAAsBA,EACtBvB,eAAgBA,EAChBE,iBAAkBA,EAClBoB,oBAAqBA,EACrBI,uBAAwBA,EACxBvB,kBAAmBA,GAIO,KAAtBf,aAAAA,EAAAA,EAAWwE,SAAgB9E,EACvBL,gBAAC6P,GAAD,CAAajN,oBAAqBA,GAAlC,6CAEA5C,EAAAC,cAAAD,EAAA8P,SAAA,KACKnP,aADL,EACKA,EAAW0J,KAAI,SAACC,GACb,IAAIJ,EAAY,KAqDhB,MApDgB,WAAZI,EAAGxJ,KACHoJ,EACIlK,EAACC,cAAA8P,QACG/P,EAACC,cAAA0N,OACOrD,EADR,CAEIrB,iBAAkBA,EAClB5F,2BAA4BA,EAC5BF,0BAA2BA,EAC3BK,4BAA6BA,EAC7BJ,0BAA2BA,EAC3BQ,8BAA+BA,EAC/BQ,gCAAiCA,EACjCE,iCAAkCA,EAClCR,+BAAgCA,EAChCE,+BAAgCA,EAChCP,6BAA8BA,GAC9BM,+BAAgCA,GAChCtB,mBAAoBA,EACpBpC,UAAWA,MAIJ,SAAZiK,EAAGxJ,OACVoJ,EACIlK,EAAAC,cAACkL,EAAD6E,EAAA,CAAA,EACQ1F,EADR,CAEIrB,iBAAkBA,EAClBmC,kBAAmBA,EACnBrI,qBAAsBA,EACtBC,uBAAwBA,EACxBU,6BAA8BA,GAC9BO,+BAAgCA,GAChCM,iCAAkCA,GAClCI,mCAAoCA,GACpCF,iCAAkCA,GAClCP,+BAAgCA,GAChCM,iCAAkCA,GAClCL,+BAAgCA,GAChCR,6BAA8BA,GAC9BT,yBAA0BA,GAC1BW,8BAA+BA,GAC/BP,2BAA4BA,GAC5BoB,kCAAmCA,GACnCL,gCAAiCA,GACjCiH,SAAUA,EACV9J,iBAAkBA,EAClBe,mBAAoBA,EACpB6G,OAAQA,EACR/I,UAAWA,MAIhBL,gBAAC8P,EAAD,CAAUrF,IAAKH,EAAG1J,IAAKsJ,EAtDjC,MA2DjBlK,gBAAC2O,GAAD,CAAajO,QAASA,EAASiB,mBAAoBA,EACtCiN,YAAaS,GAA8B,UAAlBjO,EAA2BX,OAAQA,KAIxF,EAEDP,GAAOsH,UAAY,CACfpH,OAAQqH,EAAUgH,OAClBxF,iBAAkBxB,EAAUK,KAC5BsD,kBAAmB3D,EAAUK,KAC7BoH,aAAczH,EAAUI,OACxByD,SAAU7D,EAAUK,KACpBuH,SAAU5H,EAAUK,KACpBzH,UAAWoH,EAAUK,MAGzB,UAAM+H,GAAcrJ,EAAOC,8PAIN,SAA2BI,GAAA,IAAzBjE,IAAAA,oBACnB,MAA4B,UAAxBA,EACK,WAC0B,SAAxBA,EACF,aAEF,QACR,IAQG+M,GAAUnJ,EAAOC,IAEXgC,IAAAA,EAAA9B,EAAA,CAAA,iCAAA,4BAAA,6KAAA,SAAA,SAAAG,GAAA,SAAErG,MAAF,IACU,SAAAsG,GAAA,IACGvE,IAAAA,mBACAnC,IAAAA,UACAmP,IAAAA,WAHH,OAIQnP,GAAamP,IAAsC,gBAAvBhN,EAAuC,QAAUA,CAJrF,IAalB,SAA+EwE,GAAA,IAA7E1F,IAAAA,eAAgB4N,IAAAA,aAAc1M,IAAAA,mBAAoBnC,IAAAA,UACpD,MAD+DmP,WAC9C,CACf,GAA2B,gBAAvBhN,EACF,OAEWyN,EAFY,WAAnB3O,EACEjB,8PAGO6O,GAYR,GAAuB,WAAnB5N,EACT,OAAO2O,iFAEEf,EAGZ,CACD,MAAO,EACR,IAGGL,GAAOrI,EAAOC,IAAVyJ,KAAAA,GAAAvJ,EAAA,CAAA,cAAA,kBAAA,mBAAA,SVtQoB,KUwQlB,SAAAM,GAAA,SAAExG,MAAF,IACC,SAAAyG,GAAA,SAAE0H,YAA+B,EAAI,CAArC,IAGPgB,GAAOpJ,EAAOC,IAMR0J,KAAAA,GAAAxJ,EAAA,CAAA,gHAAA,YAAA,SAAAQ,GAAA,SAAE1G,MAAF,IAYNqM,GAAYtG,EAAOC,IAIT2J,KAAAA,GAAAzJ,EAAA,CAAA,kFAAA,mBAAA,uBAAA,qBAAA,oBAAA,yBAAA,eAAA,4CAAA,oFAAA,oKAAA,SAAAS,GAAA,SAAExE,mBAAF,IACD,SAAAyE,GAAA,SAAE5E,kBAAF,IACE,SAAA6E,GAAA,SAAExE,oBAAF,IACA,SAAAyE,GAAA,SAAEhG,eAAsC,OAAS,QAAjD,IACD,SAAAyL,GAAA,SAAEvL,iBAA0C,SAAW,QAAvD,IACK,SAAAwL,GAAA,SAAEpK,oBAAgD,YAAc,MAAhE,IACV,SAAAqK,GAAA,SAAEjK,sBAAF,GAEY3C,KAKH,SAAA6M,GAAA,SAAEzL,iBAAF,IAWdqO,GAAsBvJ,EAAOC,IAAnC4J,KAAAA,GAAA1J,EAAA,CAAA,SC3TM2J,GAAa,WAAA,OACftQ,EAAAC,cAAA,MAAA,CAAKsQ,MAAM,6BAA6BxO,MAAM,QAAQtB,OAAO,QAAQwH,QAAQ,mBACzEjI,EAAAC,cAAA,OAAA,CAAMiI,EAAE,qEAAqEsI,UAAU,2BACvFxQ,EAAAC,cAAA,OAAA,CAAMiI,EAAE,uEAAuEsI,UAAU,2BACzFxQ,EAAAC,cAAA,OAAA,CAAMiI,EAAE,uEAAuEsI,UAAU,2BAJ9E,ECGbC,GAAM,SAAgEnL,GAAA,IAA9DrE,IAAAA,SAAUyJ,IAAAA,QAAS/H,IAAAA,oBAAqB9B,IAAAA,KAAM4L,IAAAA,WAExD,OACIzM,gBAAC2P,GAAD,CAASjF,QAASA,EAAS/H,oBAAqBA,EAAqB,YAAW9B,EAAM,kBAAiB4L,GAClGxL,EAGZ,EAEK0O,GAAUnJ,EAAOC,IAGAC,KAAAA,GAAAC,EAAA,CAAA,kEAAA,UAAA,SAAAC,GAAA,MAAmD,aAAjDjE,oBAA4D,SAAW,YAAzE,IAGvB8N,GAAIjJ,UAAY,CACZvG,SAAUwG,EAAUiJ,IACpBhG,QAASjD,EAAUG,KACnB/G,KAAM4G,EAAUC,OAChB+E,WAAYhF,EAAUK,MCjB1B,UAAM6F,GAAe5E,GACjB,SAiBOzD,GAAA,IAhBI+F,IAANxK,KACAoI,IAAAA,iBACAjI,IAAAA,MACAqC,IAAAA,2BACAF,IAAAA,0BACAK,IAAAA,4BACAJ,IAAAA,0BACAgB,IAAAA,gCACAR,IAAAA,8BACAU,IAAAA,iCACAR,IAAAA,+BACAE,IAAAA,+BACAP,IAAAA,6BACAM,IAAAA,+BACApB,IAAAA,oBACAgO,IAAAA,cAEK9P,EAAOwK,aAAAA,EAAAA,EAAWtK,MAClB2J,EAAUgC,GAAY,WACpB7L,IAASoI,GACTb,EAAiBvH,EAAM8P,EAFJ,GAIxB,CAAC9P,EAAMoI,EAAkB0H,IAC5B,OACI3Q,gBAACyQ,GAAD,CAAK/F,QAASA,EAAS7J,KAAMA,EAAM8B,oBAAqBA,GACpD3C,gBAAC4N,GAAD,CACIvK,2BAA4BA,EAC5BF,0BAA2BA,EAC3BK,4BAA6BA,EAC7BJ,0BAA2BA,EAC3BgB,gCAAiCA,EACjCR,8BAA+BA,EAC/BU,iCAAkCA,EAClCR,+BAAgCA,EAChCE,+BAAgCA,EAChCP,6BAA8BA,EAC9BM,+BAAgCA,GAE/B/C,GAIhB,IAGC4M,GAAgBpH,EAAOC,IAMVC,KAAAA,GAAAC,EAAA,CAAA,uIAAA,kBAAA,iBAAA,oBAAA,iBAAA,eAAA,iCAAA,mBAAA,sBAAA,iBAAA,uCAAA,mBAAA,sBAAA,iBAAA,eAAA,SAAAC,GAAA,SAAGvD,0BAAH,IACP,SAAAwD,GAAA,SAAG1D,yBAAH,IACN,SAAA2D,GAAA,SAAGtD,2BAAH,IACU,SAAAuD,GAAA,SAAG3D,yBAAH,IACH,SAAA4D,GAAA,IAAGpD,IAAAA,8BAA+BQ,IAAAA,gCAAlC,MACNR,GAAAA,OAAAA,gBAAmCQ,EAD7B,KAAA,IAEF,SAAA6C,GAAA,SAAGjD,8BAAH,IAGG,SAAAkD,GAAA,SAAG/D,yBAAH,IACN,SAAAgE,GAAA,SAAG7C,gCAAH,IACU,SAAA8C,GAAA,SAAGtD,8BAAH,IACL,SAAAuD,GAAA,SAAG5D,4BAAH,IAIC,SAAA6D,GAAA,SAAGnE,yBAAH,IACN,SAAAoE,GAAA,SAAGjD,gCAAH,IACU,SAAA0I,GAAA,SAAGlJ,8BAAH,IACL,SAAAmJ,GAAA,SAAGlJ,8BAAH,IAIb4J,GAAanG,UAAY,CACrByB,iBAAkBxB,EAAUK,KAC5B9G,MAAOyG,EAAUC,OACjB7G,KAAM4G,EAAUC,OAChBrE,2BAA4BoE,EAAUI,OACtC1E,0BAA2BsE,EAAUI,OACrCrE,4BAA6BiE,EAAUC,OACvCtE,0BAA2BqE,EAAUC,OACrC9D,8BAA+B6D,EAAUI,OACzCzD,gCAAiCqD,EAAUI,OAC3CvD,iCAAkCmD,EAAUC,OAC5C5D,+BAAgC2D,EAAUC,OAC1C1D,+BAAgCyD,EAAUC,OAC1CjE,6BAA8BgE,EAAUC,OACxC3D,+BAAgC0D,EAAUC,QCvF9C,wCAAMyD,GAAapC,GACf,SAWOzD,GAAA,IAVF2D,IAAAA,iBACAmC,IAAAA,kBACMC,IAANxK,KACAG,IAAAA,MACA+B,IAAAA,qBACAC,IAAAA,uBACA/B,IAAAA,SACA0B,IAAAA,oBACA2I,IAAAA,SACAqF,IAAAA,cAEK9P,EAAOwK,aAAAA,EAAAA,EAAWtK,MACxBwK,EAAAC,EAAwBC,EAASH,GAAjC,GAAO/C,EAAPgD,EAAA,GAAapC,EAAboC,EAAA,GAEMkB,EAAaxL,EAASkE,OAAS,EAE/BuF,EAAUgC,GAAY,WACpBD,IAAerB,EACfjC,GAAQ,SAACwD,GAAD,OAAYA,CAAZ,IACAF,GAAexD,IAAoBpI,GAC3CuH,EAAiBvH,EAAM8P,EAE9B,GAAE,CAACvF,EAAmBnC,EAAkBwD,EAAY5L,EAAM8P,IAE3D,OACI3Q,EAACC,cAAA0P,GACG,KAAA3P,EAAAC,cAACwQ,GAAD,CAAKhE,WAAYA,EAAY5L,KAAO4L,OAAoBM,EAAPlM,EAAkB6J,QAASA,EAAS/H,oBAAqBA,GACtG3C,gBAAC4I,EAAD,CACI7F,qBAAsBA,EACtBC,uBAAwBA,GAEvBhC,EAAO,IACPyL,GACGzM,gBAACsG,EAAD,CAAa,cAAY,GACpBiC,EACGvI,EAAAC,cAACoF,EAAD,CAAME,KAAMyC,EAAWhG,OAAQsJ,GAAY,GAAK,GAAIzF,MAAO,YAE3D7F,gBAACqF,EAAD,CAAME,KAAMyC,EAAWhG,QAAS,GAAI6D,MAAO,eAM9D0C,GAAQkE,GACLzM,EAAAC,cAAC6M,GAAD,CAAW,6BAA2B,GACjC7L,EAASoJ,KAAI,SAACC,GAAD,IAAAK,EAAA,OACV3K,gBAACyQ,GAAD,CACIhG,IAAKH,EAAG1J,GACR8J,QAAS,WAAM,IAAAH,UACPA,EAAAD,EAAGzJ,qBAAME,QAAUkI,GACnBb,EAAiBkC,EAAGzJ,KAAKE,MAAO4P,EAJ5C,EAOI9P,KAAI,UAAEyJ,EAAGzJ,YAAL,IAAA8J,OAAA,EAAEA,EAAS5J,MACf4B,oBAAqBA,GAErB3C,gBAAC4I,EAAD,CACI7F,qBAAsBA,EACtBC,uBAAwBA,GAEvBsH,EAAGtJ,OAff,KAuBpB,IAGC2O,GAAUnJ,EAAOC,IAAvBC,KAAAA,GAAAC,EAAA,CAAA,sDAKMmG,GAAYtG,EAAOC,IAAzBgC,KAAAA,GAAA9B,EAAA,CAAA,sDAKAwE,GAAW3D,UAAY,CACnB3G,KAAM4G,EAAUC,OAChBuB,iBAAkBxB,EAAUK,KAC5BsD,kBAAmB3D,EAAUK,KAC7B9G,MAAOyG,EAAUC,OACjB3E,qBAAsB0E,EAAUC,OAChC1E,uBAAwByE,EAAUC,OAClCzG,SAAUwG,EAAUiG,MACpB/K,oBAAqB8E,EAAUC,QCzFnC,IAAMkJ,GAAe,SAGOtL,GAAA,IAFFlF,IAAAA,OAEEyQ,EAAAvL,EAFM4J,aAAAA,aAAe,EAErB2B,EAAAC,EAAAxL,EAFwBqL,cAAAA,cAExBG,EAAAC,EAAAzL,EAF+CgG,SAAAA,cAE/CyF,EAAAC,EAAA1L,EAFiE2D,iBAAAA,cAEjE+H,EAAAC,EAAA3L,EADF8F,kBAAAA,cACE6F,EAExB1F,EAAAC,EAAwBC,EAASkF,GAAjC,GAAOpI,EAAPgD,EAAA,GAAapC,EAAboC,EAAA,GACMjC,EAAMC,IAEZ0C,GAAU,WACD0E,IACD1F,SAAS4B,KAAK2B,MAAM0C,UAAY3I,EAAO,SAAW,OAEzD,GAAE,CAACoI,EAAepI,IAEnB,IACIpH,EA6BAf,EA7BAe,aACAqB,EA4BApC,EA5BAoC,mBACAe,EA2BAnD,EA3BAmD,2BACAb,EA0BAtC,EA1BAsC,oBACAhC,EAyBAN,EAzBAM,QACAiB,EAwBAvB,EAxBAuB,mBACAL,EAuBAlB,EAvBAkB,eACAD,EAsBAjB,EAtBAiB,eACAyB,EAqBA1C,EArBA0C,qBACAvB,EAoBAnB,EApBAmB,eACAE,EAmBArB,EAnBAqB,iBACAoB,EAkBAzC,EAlBAyC,oBACAI,EAiBA7C,EAjBA6C,uBACAvB,EAgBAtB,EAhBAsB,kBACA2B,EAeAjD,EAfAiD,2BACAF,EAcA/C,EAdA+C,0BACAK,EAaApD,EAbAoD,4BACAJ,EAYAhD,EAZAgD,0BACAgB,EAWAhE,EAXAgE,gCACAR,EAUAxD,EAVAwD,8BACAE,EASA1D,EATA0D,+BACAQ,EAQAlE,EARAkE,iCACAN,EAOA5D,EAPA4D,+BACAP,EAMArD,EANAqD,6BACAM,EAKA3D,EALA2D,+BACApB,EAIAvC,EAJAuC,oBACAI,EAGA3C,EAHA2C,qBACAC,EAEA5C,EAFA4C,uBACArC,GACAP,EADAO,UAGE+J,GAAUgC,GAAY,WACnBiE,GAAkBvF,GACnBjC,GAAQ,SAAApI,GAAK,OAAKA,CAAL,GAEpB,GAAE,CAAC4P,EAAevF,IAEnBa,GAAU,WACN,IAAMW,EAAe,WACU,gBAAvBpK,IACA8G,EAAIwC,QAAQ0C,MAAMkB,gBAAqC,IAAnBpH,OAAO2B,SAAkB1B,EAA4BhF,EAArBf,IAK5E,MAF2B,gBAAvBA,IAAsC8G,EAAIwC,QAAQ0C,MAAMkB,gBAAkBnH,EAAOhF,EAA6Bf,GAClH8F,OAAO4D,iBAAiB,SAAUU,GAC3B,WACHtE,OAAO6D,oBAAoB,SAAUS,GAE5C,GAAE,CAACrE,IAEJ,IAAI4I,GAAe3O,EAQnB,OAPImO,GAAwC,gBAAvBnO,EACjB2O,GAAe,OACR5I,IACP4I,GAAsC,gBAAvB3O,EAAuCe,EAA6Bf,GAKnFxC,gBAAC8M,GAAD,CAAW1C,UAAW,gBAAiB9I,eAAgBA,EAAgB4N,aAAcA,EAC1EyB,cAAeA,EAAenO,mBAAoBA,GACzDxC,gBAAC2P,GAAD,CAASlP,OAAQU,EAAcmI,IAAKA,EAC3B9G,mBAAoB2O,GACpB,sBAAoB,GACzBnR,gBAACsG,GAAD,CAAaoE,QAASA,GAAS,2BAAyB,GACpD1K,gBAACqF,EAAD,CAAME,KAAM+K,GAAYzK,MAAO,aAEnC7F,EAAAC,cAACmR,GAAD,CAAa1O,oBAAqBA,GAC9B1C,EAACC,cAAAoR,GACG,KAAArR,EAAAC,cAAC4O,GAAD,CAAMpO,OAAQU,GACVnB,gBAAC8O,GAAD,CAAWf,OAAQrN,EAAUqE,EAAsBpD,GACxCqD,KAAMrD,QAKjC3B,gBAACsR,GAAD,CAAa,oBAAkB,EAAMnQ,aAAcA,EAAcoQ,UAAWrC,EAAe/N,EAC9EwP,cAAeA,EAAepI,KAAMA,EACpC/F,mBAA2C,gBAAvBA,EAAuCmO,EAAgB,OAASpN,EAA6Bf,EACjHnB,eAAgBA,EAAgByB,qBAAsBA,EACtDvB,eAAgBA,EAChBE,iBAAkBA,EAClBoB,oBAAqBA,EACrBI,uBAAwBA,EACxBvB,kBAAmBA,GAGxBf,cAAAA,EAAAA,GAAW0J,KAAI,SAAAC,GACX,IAAIJ,EAAY,MAmChB,MAlCgB,WAAZI,EAAGxJ,KACHoJ,EACIlK,EAAAC,cAAC0N,GAADqC,EAAA,CAAA,EACQ1F,EADR,CAEI3H,oBAAqBA,EACrBsG,iBAAkB0H,EAClBtN,2BAA4BA,EAC5BF,0BAA2BA,EAC3BK,4BAA6BA,EAC7BJ,0BAA2BA,EAC3BQ,8BAA+BA,EAC/BQ,gCAAiCA,EACjCE,iCAAkCA,EAClCR,+BAAgCA,EAChCE,+BAAgCA,EAChCP,6BAA8BA,EAC9BM,+BAAgCA,EAChC4M,cAAeA,KAGJ,SAAZrG,EAAGxJ,OACVoJ,EACIlK,EAAAC,cAACkL,GAAD6E,EAAA,CAAA,EACQ1F,EADR,CAEIrB,iBAAkBA,EAClBmC,kBAAmBA,EACnBrI,qBAAsBA,EACtBC,uBAAwBA,EACxBL,oBAAqBA,EACrB2I,SAAUA,EACVqF,cAAeA,MAIpB3Q,gBAAC8P,EAAD,CAAUrF,IAAKH,EAAG1J,IAAKsJ,EApClC,KA0CnB,EAEK4C,GAAYtG,EAAOC,qIAOrB,SAAuEG,GAAA,IAArEtF,IAAAA,eAAgB4N,IAAAA,aAAcyB,IAAAA,cAChC,MAA2B,kBADoBnO,oBACFmO,EAWf,WAAnBrP,GAAgCqP,EAMpC,GALEV,2EAEEf,GAZAe,EADc,WAAnB3O,2JAGO4N,EAcd,IAGGoC,GAAc9K,EAAOC,IAMd+K,KAAAA,GAAA7K,EAAA,CAAA,gGAAA,0CAAA,YAAA,mEAAA,2EAAA,2BAAA,yBAAA,wBAAA,6BAAA,mBAAA,YAAA,cAAA,SAAAE,GAAA,SAAE1F,YAAF,IAEG,SAAA2F,GAAA,SAAE6J,cAAmC,OAAS,CAA9C,IACR,SAAA5J,GAAA,SAAE4J,eAEIV,EAFNwB,KAAAA,GAAA9K,EAAA,CAAA,0DAAA,IAMkB,SAAAK,GAAA,SAAExE,kBAAF,IAGP,SAAAyE,GAAA,SAAE5F,cAAF,IACE,SAAA6F,GAAA,SAAEpE,oBAAF,IACA,SAAAqE,GAAA,SAAE5F,eAAsC,OAAS,QAAjD,IACD,SAAA6F,GAAA,SAAE3F,iBAA0C,SAAW,QAAvD,IACK,SAAA4F,GAAA,SAAExE,oBAAgD,YAAc,MAAhE,IACV,SAAAyE,GAAA,SAAErE,sBAAF,IACP,SAAAsE,GAAA,IAAEgK,IAAAA,UAAWhJ,IAAAA,KAAb,SAAmBoI,eACKpI,GAClB0H,EADAC,KAAAA,GAAAvJ,EAAA,CAAA,0CAAA,0BAEyB4K,EAH/B,IAOF5B,GAAUnJ,EAAOC,IAKX0J,KAAAA,GAAAxJ,EAAA,CAAA,mIAAA,4BAAA,2IAAA,SAAAqG,GAAA,SAAEvM,MAAF,IACU,SAAAwM,GAAA,SAAEzK,kBAAF,IAOhB4O,GAAc5K,EAAOC,gGAGN,SAA2ByG,GAAA,IAAzBxK,IAAAA,oBACnB,MAA4B,WAAxBA,EACK,SAC0B,UAAxBA,EACF,WAEF,EACR,IAGG2O,GAAY7K,EAAOC,IAAzB4J,KAAAA,GAAA1J,EAAA,CAAA,4CAKMkI,GAAOrI,EAAOC,IAERiL,KAAAA,GAAA/K,EAAA,CAAA,+BAAA,YAAA,SAAAwG,GAAA,SAAE1M,MAAF,IAGN6F,GAAcE,EAAOC,IAA3BkL,KAAAA,GAAAhL,EAAA,CAAA,mHAUAiK,GAAapJ,UAAY,CACrBpH,OAAQqH,EAAUgH,OAClBS,aAAczH,EAAUI"}