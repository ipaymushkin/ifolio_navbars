{"version":3,"file":"index.esm.js","sources":["../src/consts.js","../src/utils/getCropperQueryString.js","../src/components/Icon/index.js","../src/icons/ArrowIcon.js","../src/utils/openLinkInNewTab.js","../src/modules/styled.js","../src/modules/NavBar/Page.js","../src/hooks/useOutsideClick.js","../src/modules/NavBar/Button.js","../src/components/CropImage/index.js","../src/modules/NavBar/index.js","../src/icons/BurgerIcon.js","../src/modules/NavBarMobile/Row.js","../src/modules/NavBarMobile/Button.js","../src/modules/NavBarMobile/Page.js","../src/modules/NavBarMobile/index.js"],"sourcesContent":["export const logoImageWidth = 100;\r\nexport const logoImageHeight = 50;\r\n","const roundedNumber = (value) => Math.floor(value);\n\nexport const getCropperQueryString = (crop) => {\n  if (!crop || Object.keys(crop).length === 0) {\n    return '';\n  }\n  const { imageBox, rotate } = crop;\n  const { x, y, height, width } = imageBox;\n  return `?x=${roundedNumber(x)}&y=${roundedNumber(y)}&w=${roundedNumber(width)}&h=${roundedNumber(\n    height\n  )}&rotate=${rotate}`;\n};\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = ({\r\n  icon,\r\n  opacity = 1,\r\n  hoverOpacity = 1,\r\n  color = '#000',\r\n  hoverColor = color,\r\n  size = 20,\r\n  rotate,\r\n  noCursor,\r\n  padding = 0,\r\n  width,\r\n  height,\r\n  tableIcon\r\n}) => (\r\n  <IconWrapper\r\n    color={color}\r\n    hoverColor={hoverColor}\r\n    size={size}\r\n    width={width}\r\n    height={height}\r\n    opacity={opacity}\r\n    hoverOpacity={hoverOpacity}\r\n    rotate={rotate}\r\n    noCursor={noCursor}\r\n    padding={padding}\r\n    tableIcon={tableIcon}\r\n  >\r\n    {_renderIcon(icon)}\r\n  </IconWrapper>\r\n);\r\n\r\nconst _renderIcon = (icon) => {\r\n  const Icon = icon;\r\n\r\n  if (typeof icon === 'function') {\r\n    return <Icon />;\r\n  } else if (typeof icon === 'string') {\r\n    return icon;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst IconWrapper = styled.div`\r\n  cursor: ${({ noCursor }) => (noCursor ? 'initial' : 'pointer')};\r\n  display: ${({ tableIcon }) => (tableIcon ? 'table-cell' : 'flex')};\r\n  flex: 0 0 auto;\r\n  align-items: center;\r\n  font-size: ${({ tableIcon }) => !tableIcon && '0'};\r\n  width: ${({ size, width }) => (width ? width : size)}px;\r\n  height: ${({ size, height }) => (height ? height : size)}px;\r\n  transform: rotate(${({ rotate }) => rotate}deg);\r\n  transform-origin: 50% 50%;\r\n  padding: ${({ padding }) => padding}px;\r\n\r\n  :hover {\r\n    svg {\r\n      fill: ${({ hoverColor }) => hoverColor};\r\n      opacity: ${({ hoverOpacity }) => hoverOpacity};\r\n    }\r\n  }\r\n\r\n  svg {\r\n    fill: ${({ color }) => color};\r\n    opacity: ${({ opacity }) => opacity};\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: all ease-in-out 0.3s;\r\n    vertical-align: ${({ tableIcon }) => tableIcon && 'middle'};\r\n  }\r\n`;\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string,\r\n  hoverColor: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  size: PropTypes.number,\r\n  padding: PropTypes.number,\r\n  opacity: PropTypes.number,\r\n  hoverOpacity: PropTypes.number,\r\n  rotate: PropTypes.number,\r\n  noCursor: PropTypes.bool,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  tableIcon: PropTypes.bool\r\n};\r\n\r\nIcon.defaultProps = {\r\n  opacity: 1,\r\n  color: '#000',\r\n  size: 20,\r\n  padding: 0,\r\n  rotate: 0,\r\n  noCursor: false,\r\n  tableIcon: false\r\n};\r\n\r\nexport { Icon };\r\n","import React from 'react';\r\nconst ArrowIcon = () => (\r\n  <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n    <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\r\n  </svg>\r\n);\r\n\r\nexport default ArrowIcon;\r\n","export const openLinkInNewTab = (link) => window.open(link, '_blank', 'noreferrer noopener');\r\n","import styled from \"styled-components\";\r\n\r\nexport const IconWrapper = styled.div``;\r\n\r\nexport const PageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    color: ${({navBarTextHoverColor}) => navBarTextHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    color: ${({navBarTextClickedColor}) => navBarTextClickedColor};\r\n  }\r\n`;\r\n","import React, {memo, useCallback, useEffect, useState} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport {useOutsideClick} from '../../hooks/useOutsideClick.js';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport {IconWrapper, PageWrapper} from \"../styled\";\r\n\r\nconst DropDown = memo((props) => {\r\n\r\n    const {\r\n        disabledRedirect,\r\n        childs,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding,\r\n        setOpen,\r\n        rootId,\r\n        parentRef,\r\n    } = props;\r\n\r\n    console.log('parentRef', parentRef);\r\n\r\n    let left = 0, top = 0;\r\n    if (parentRef) {\r\n        left = parentRef.getBoundingClientRect().left;\r\n        const navbarContainer = document.querySelector(\"[data-navbarcontainer]\");\r\n        const navbar = document.querySelector('.navbar-desktop');\r\n        if (navbarContainer) {\r\n            const containerLeft = navbarContainer.getBoundingClientRect().left;\r\n            if (left < containerLeft) left = containerLeft;\r\n        }\r\n        const navbarBox =navbar.getBoundingClientRect();\r\n        top = navbarBox.top + navbarBox.height;\r\n    }\r\n\r\n    const component = <DropdownWrapper data-list={true} className={\"navbar-list\"} left={left} top={top}>\r\n        {childs.map((el) => (\r\n            <DropdownElement\r\n                key={el.id}\r\n                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                onClick={() => {\r\n                    if (el.link?.value && !disabledRedirect) {\r\n                        openLinkInNewTab(el.link.value);\r\n                        setOpen(false);\r\n                    } else {\r\n                        setOpen(false);\r\n                    }\r\n                }}\r\n                data-link={el.link?.value}\r\n            >\r\n                {el.title}\r\n            </DropdownElement>\r\n        ))}\r\n    </DropdownWrapper>\r\n\r\n    return ReactDOM.createPortal(component, document.getElementById(rootId));\r\n})\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link: linkProps,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         dropdownSettingsInactiveFill,\r\n         dropdownSettingsInactiveBorder,\r\n         dropdownSettingsHoverClickedFill,\r\n         dropdownSettingsHoverClickedBorder,\r\n         dropdownSettingsTextColorRegular,\r\n         dropdownSettingsTextColorHover,\r\n         dropdownSettingsTextColorClicked,\r\n         dropdownSettingsTextFontFamily,\r\n         dropdownSettingsTextFontSize,\r\n         dropdownSettingsTextBold,\r\n         dropdownSettingsTextUnderline,\r\n         dropdownSettingsTextItalic,\r\n         dropdownSettingsHorizontalPadding,\r\n         dropdownSettingsVerticalPadding,\r\n         isStatic,\r\n         navBarHoverColor,\r\n         navBarClickedColor,\r\n         rootId,\r\n     }) => {\r\n        const [open, setOpen] = useState(isStatic);\r\n        const link = linkProps?.value;\r\n\r\n        const ref = useOutsideClick(() => {\r\n            setOpen(false);\r\n        });\r\n\r\n        const [containerRef, setContainerRef] = useState(null);\r\n        useEffect(() => {\r\n            setContainerRef(ref.current);\r\n        }, [])\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n        return (\r\n            <Container ref={ref} navBarHoverColor={navBarHoverColor} navBarClickedColor={navBarClickedColor}>\r\n                <PageWrapper\r\n                    navBarTextHoverColor={navBarTextHoverColor}\r\n                    navBarTextClickedColor={navBarTextClickedColor}\r\n                    onClick={onClick}\r\n                    data-link={!isDropdown ? link : undefined}\r\n                    data-isdropdown={isDropdown}\r\n                >\r\n                    {title}{' '}\r\n                    {isDropdown && (\r\n                        <IconWrapper data-arrow={true}>\r\n                            {open ? (\r\n                                <Icon icon={ArrowIcon} rotate={isStatic ? -90 : 90} color={'#ffffff'}/>\r\n                            ) : (\r\n                                <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'}/>\r\n                            )}\r\n                        </IconWrapper>\r\n                    )}\r\n                </PageWrapper>\r\n                {open && isDropdown &&\r\n                    <DropDown\r\n                        dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                        dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                        dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                        dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                        dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                        dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                        dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                        dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                        dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                        dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                        dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                        dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                        dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                        dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                        childs={children}\r\n                        setOpen={setOpen}\r\n                        disabledRedirect={disabledRedirect}\r\n                        rootId={rootId}\r\n                        parentRef={containerRef}\r\n                    />\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n);\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    background: ${({navBarHoverColor}) => navBarHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({navBarClickedColor}) => navBarClickedColor};\r\n  }\r\n`;\r\n\r\nconst DropdownWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  left: ${({left}) => left}px;\r\n  top: ${({top}) => top}px;\r\n  z-index: 1;\r\n`;\r\n\r\nconst DropdownElement = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  background: ${({dropdownSettingsInactiveFill}) => dropdownSettingsInactiveFill};\r\n  border: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n  color: ${({dropdownSettingsTextColorRegular}) => dropdownSettingsTextColorRegular};\r\n  font-size: ${({dropdownSettingsTextFontSize}) => dropdownSettingsTextFontSize}px;\r\n  font-family: ${({dropdownSettingsTextFontFamily}) => dropdownSettingsTextFontFamily};\r\n  font-weight: ${({dropdownSettingsTextBold}) => (dropdownSettingsTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({dropdownSettingsTextItalic}) => (dropdownSettingsTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({dropdownSettingsTextUnderline}) => (dropdownSettingsTextUnderline ? 'underline' : 'none')};\r\n  padding: ${({dropdownSettingsVerticalPadding, dropdownSettingsHorizontalPadding}) =>\r\n          `${dropdownSettingsVerticalPadding}px ${dropdownSettingsHorizontalPadding}px`};\r\n\r\n  &:hover {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorHover}) => dropdownSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorClicked}) => dropdownSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    dropdownSettingsInactiveFill: PropTypes.string,\r\n    dropdownSettingsInactiveBorder: PropTypes.string,\r\n    dropdownSettingsHoverClickedFill: PropTypes.string,\r\n    dropdownSettingsHoverClickedBorder: PropTypes.string,\r\n    dropdownSettingsTextColorRegular: PropTypes.string,\r\n    dropdownSettingsTextColorHover: PropTypes.string,\r\n    dropdownSettingsTextColorClicked: PropTypes.string,\r\n    dropdownSettingsTextFontFamily: PropTypes.string,\r\n    dropdownSettingsTextFontSize: PropTypes.number,\r\n    dropdownSettingsTextBold: PropTypes.bool,\r\n    dropdownSettingsTextUnderline: PropTypes.bool,\r\n    dropdownSettingsTextItalic: PropTypes.bool,\r\n    dropdownSettingsHorizontalPadding: PropTypes.number,\r\n    dropdownSettingsVerticalPadding: PropTypes.number,\r\n    navBarHoverColor: PropTypes.string,\r\n    navBarClickedColor: PropTypes.string,\r\n    rootId: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, { createRef, useEffect } from 'react';\r\n\r\nexport const useOutsideClick = (callback) => {\r\n  const ref = createRef();\r\n\r\n  const listener = (e) => {\r\n    if (ref.current && !ref?.current.contains(e.target)) {\r\n      callback(e, ref.current);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', listener);\r\n    document.addEventListener('touchstart', listener);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener);\r\n      document.removeEventListener('touchstart', listener);\r\n    };\r\n  });\r\n\r\n  return ref;\r\n};\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link: linkProps,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         navBarTextFontSize\r\n     }) => {\r\n\r\n        const link = linkProps?.value;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [link, disabledRedirect]);\r\n        return (\r\n            <ButtonWrapper\r\n                buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                onClick={onClick}\r\n                data-link={link}\r\n                navBarTextFontSize={navBarTextFontSize}\r\n            >\r\n                {title}\r\n            </ButtonWrapper>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({buttonSettingsRoundCorners}) => buttonSettingsRoundCorners}px;\r\n  border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsRegularBorder}) => buttonSettingsRegularBorder};\r\n  background: ${({buttonSettingsRegularFill}) => buttonSettingsRegularFill};\r\n  padding: ${({buttonSettingsHorizontalPadding}) =>\r\n          `0 ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({buttonSettingsTextColorRegular}) => buttonSettingsTextColorRegular};\r\n  height: ${({\r\n               buttonSettingsVerticalPadding,\r\n               navBarTextFontSize,\r\n               buttonSettingsBorderWidth\r\n             }) => navBarTextFontSize + ((buttonSettingsVerticalPadding || 0) * 2) + ((buttonSettingsBorderWidth || 0) * 2)}px;\r\n\r\n  &:hover {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorHover}) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorClicked}) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string,\r\n    navBarTextFontSize: PropTypes.number,\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Index = forwardRef(({ height, id, crop, source, alt, ignoreMaxHeight, isTurntable, isHero }, ref) => {\r\n  const styles = { width: '100%', height: '100%', objectFit: 'cover' };\r\n  if (!ignoreMaxHeight) {\r\n    styles.maxHeight = '600px';\r\n  }\r\n  return (\r\n    <CropArea ref={ref} isTurntable={isTurntable} isHero={isHero} height={height} id={id}>\r\n      <CropImageWrapper {...crop.imagePosition} isHero={isHero}>\r\n        <img src={source} alt={alt} style={styles} />\r\n      </CropImageWrapper>\r\n    </CropArea>\r\n  );\r\n});\r\n\r\nconst CropImageWrapper = styled.div`\r\n  position: relative;\r\n  left: ${({ x }) => x || 0}%;\r\n  top: ${({ y }) => y || 0}%;\r\n  width: ${({ width }) => width || 100}%;\r\n  height: ${({ height }) => height || 100}%;\r\n\r\n  ${({ isHero }) =>\r\n    isHero &&\r\n    css`\r\n      position: static;\r\n      img {\r\n        object-fit: cover;\r\n        //margin-left: auto;\r\n        //margin-right: auto;\r\n        //width: auto !important;\r\n      }\r\n    `};\r\n`;\r\n\r\nconst CropArea = styled.div`\r\n  width: 100%;\r\n  height: ${({ height, isTurntable, isHero }) =>\r\n    isTurntable ? '100%' : isHero ? '100%' : height ? height + 'px' : '100%'};\r\n  position: relative;\r\n  background-color: transparent;\r\n  overflow: hidden;\r\n`;\r\n\r\nIndex.propTypes = {\r\n  height: PropTypes.number,\r\n  id: PropTypes.string,\r\n  crop: PropTypes.object,\r\n  source: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n  ignoreMaxHeight: PropTypes.bool,\r\n  isTurntable: PropTypes.bool,\r\n  isHero: PropTypes.bool\r\n};\r\n\r\nIndex.defaultProps = {\r\n  id: '',\r\n  alt: '',\r\n  ignoreMaxHeight: false,\r\n  crop: {}\r\n};\r\n\r\nexport default Index;\r\n","import React, {Fragment} from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport NavBarPage from './Page.js';\r\nimport NavBarButton from './Button.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\n\r\nconst LogoElement = ({logoSrc, logoCropperOptions, hideElement}) => {\r\n    return (\r\n        <Logo hideElement={hideElement}>\r\n            <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)} crop={logoCropperOptions}/>\r\n        </Logo>\r\n    )\r\n}\r\n\r\nconst NavBar = ({\r\n                    config,\r\n                    disabledRedirect = false,\r\n                    disabledListClick = false,\r\n                    stickyOffset = 0,\r\n                    isStatic = false,\r\n                    hideLogo = false,\r\n                    isPreview = false,\r\n                    rootId = \"root\"\r\n                }) => {\r\n    const {\r\n        height,\r\n        navBarRegularColor,\r\n        navBarHoverColor,\r\n        navBarClickedColor,\r\n        logoAlignment,\r\n        logoCropperOptions,\r\n        logoSrc,\r\n        navBarTextAlignment,\r\n        navBarTextFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        structure,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        navBarBehavior,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding\r\n    } = config;\r\n\r\n    return (\r\n        <Wrapper height={height} navBarRegularColor={navBarRegularColor} navBarBehavior={navBarBehavior}\r\n                 stickyOffset={stickyOffset} className={\"navbar-desktop\"}>\r\n            <Menu height={height}>\r\n                <LogoElement logoSrc={logoSrc} logoCropperOptions={logoCropperOptions} hideElement={hideLogo || logoAlignment !== 'left'} />\r\n                <Container\r\n                    data-navbarcontainer={true}\r\n                    navBarTextAlignment={navBarTextAlignment}\r\n                    navBarTextFontSize={navBarTextFontSize}\r\n                    navBarTextFontFamily={navBarTextFontFamily}\r\n                    navBarTextBold={navBarTextBold}\r\n                    navBarTextItalic={navBarTextItalic}\r\n                    navBarTextUnderline={navBarTextUnderline}\r\n                    navBarTextRegularColor={navBarTextRegularColor}\r\n                    navBarTextSpacing={navBarTextSpacing}\r\n                    // logoAlignment={logoAlignment}\r\n                >\r\n                    {\r\n                        structure?.length === 0 && isPreview ?\r\n                            <PreviewText>Navigation will preview here once created</PreviewText> :\r\n                            <>\r\n                                {structure?.map((el) => {\r\n                                    let component = null;\r\n                                    if (el.type === 'button') {\r\n                                        component = (\r\n                                            <NavBarButton\r\n                                                {...el}\r\n                                                disabledRedirect={disabledRedirect}\r\n                                                buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                                buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                                buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                                buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                                buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                                buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                                buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                                buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                                buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                                buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                                buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                                navBarTextFontSize={navBarTextFontSize}\r\n                                            />\r\n                                        );\r\n                                    } else if (el.type === 'page') {\r\n                                        component = (\r\n                                            <NavBarPage\r\n                                                {...el}\r\n                                                disabledRedirect={disabledRedirect}\r\n                                                disabledListClick={disabledListClick}\r\n                                                navBarTextHoverColor={navBarTextHoverColor}\r\n                                                navBarTextClickedColor={navBarTextClickedColor}\r\n                                                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                                                dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                                                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                                                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                                                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                                                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                                                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                                                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                                                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                                                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                                                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                                                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                                                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                                                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                                                isStatic={isStatic}\r\n                                                navBarHoverColor={navBarHoverColor}\r\n                                                navBarClickedColor={navBarClickedColor}\r\n                                                rootId={rootId}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                    return <Fragment key={el.id}>{component}</Fragment>;\r\n                                })}\r\n                            </>\r\n                    }\r\n                </Container>\r\n                <LogoElement logoSrc={logoSrc} logoCropperOptions={logoCropperOptions} hideElement={hideLogo || logoAlignment !== 'right'} />\r\n            </Menu>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nNavBar.propTypes = {\r\n    config: PropTypes.object,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    stickyOffset: PropTypes.number,\r\n    isStatic: PropTypes.bool,\r\n    hideLogo: PropTypes.bool,\r\n    isPreview: PropTypes.bool,\r\n};\r\n\r\nconst PreviewText = styled.div`\r\n  font-family: Montserrat-bold, sans-serif;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  font-size: 15px;\r\n  letter-spacing: 1.5px;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  padding: 0 50px;\r\n  width: 100%;\r\n  margin: auto;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n  z-index: 1002;\r\n\r\n  ${({navBarBehavior, stickyOffset}) =>\r\n          navBarBehavior === 'frozen' &&\r\n          css`\r\n            position: sticky;\r\n            top: ${stickyOffset}px;\r\n          `};\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${logoImageHeight}px;\r\n  opacity: ${({hideElement}) => hideElement ? 0 : 1};\r\n`;\r\n\r\nconst Menu = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  max-width: 1120px;\r\n  margin: auto;\r\n  height: ${({height}) => height}px;\r\n`;\r\n\r\n/*\r\n  margin: ${({logoAlignment}) => {\r\n    if (logoAlignment === 'right') {\r\n      return '0 24px 0 0';\r\n    }\r\n    return '0 0 0 24px';\r\n  }};\r\n */\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  margin: 0 24px;\r\n  justify-content: ${({navBarTextAlignment}) => navBarTextAlignment};\r\n  font-size: ${({navBarTextFontSize}) => navBarTextFontSize}px;\r\n  font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n  font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n  height: 100%;\r\n  align-items: center;\r\n  width: calc(100% - 250px);\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n\r\n  > div {\r\n    margin-right: ${({navBarTextSpacing}) => navBarTextSpacing}px;\r\n\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nconst BurgerIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"19.94\" height=\"16.44\" viewBox=\"0 0 19.94 16.44\">\r\n        <path d=\"M20.41,6.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,6.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,13.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,13.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,20.34H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,20.34Z\" transform=\"translate(-1.97 -3.91)\" />\r\n    </svg>\r\n);\r\n\r\nexport default BurgerIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\n\r\nconst Row = ({children, onClick, mobileTextAlignment, link, isDropdown}) => {\r\n\r\n    return (\r\n        <Wrapper onClick={onClick} mobileTextAlignment={mobileTextAlignment} data-link={link} data-isdropdown={isDropdown}>\r\n            {children}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 15px;\r\n    display: flex;\r\n    justify-content: ${({mobileTextAlignment}) => mobileTextAlignment === 'center' ? 'center' : 'flex-start'};\r\n`\r\n\r\nRow.propTypes = {\r\n    children: PropTypes.any,\r\n    onClick: PropTypes.func,\r\n    link: PropTypes.string,\r\n    isDropdown: PropTypes.bool,\r\n};\r\n\r\nexport default Row;\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link: linkProps,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         mobileTextAlignment\r\n     }) => {\r\n        const link = linkProps?.value;\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [link, disabledRedirect]);\r\n        return (\r\n            <Row onClick={onClick} link={link} mobileTextAlignment={mobileTextAlignment}>\r\n                <ButtonWrapper\r\n                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                >\r\n                    {title}\r\n                </ButtonWrapper>\r\n            </Row>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({ buttonSettingsRoundCorners }) => buttonSettingsRoundCorners}px;\r\n  border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n    ${({ buttonSettingsRegularBorder }) => buttonSettingsRegularBorder};\r\n  background: ${({ buttonSettingsRegularFill }) => buttonSettingsRegularFill};\r\n  padding: ${({ buttonSettingsVerticalPadding, buttonSettingsHorizontalPadding }) =>\r\n    `${buttonSettingsVerticalPadding}px ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({ buttonSettingsTextColorRegular }) => buttonSettingsTextColorRegular};\r\n\r\n  &:hover {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorHover }) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorClicked }) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, {memo, useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport {IconWrapper, PageWrapper} from \"../styled\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link: linkProps,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         mobileTextAlignment,\r\n         isStatic\r\n     }) => {\r\n        const link = linkProps?.value;\r\n        const [open, setOpen] = useState(isStatic);\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n        return (\r\n            <Wrapper>\r\n                <Row isDropdown={isDropdown} link={!isDropdown ? link : undefined} onClick={onClick} mobileTextAlignment={mobileTextAlignment}>\r\n                    <PageWrapper\r\n                        navBarTextHoverColor={navBarTextHoverColor}\r\n                        navBarTextClickedColor={navBarTextClickedColor}\r\n                    >\r\n                        {title}{' '}\r\n                        {isDropdown && (\r\n                            <IconWrapper data-arrow={true}>\r\n                                {open ? (\r\n                                    <Icon icon={ArrowIcon} rotate={isStatic ? -90 : 90} color={'#ffffff'}/>\r\n                                ) : (\r\n                                    <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'}/>\r\n                                )}\r\n                            </IconWrapper>\r\n                        )}\r\n                    </PageWrapper>\r\n                </Row>\r\n                {open && isDropdown && (\r\n                    <Container data-mobile-dropdown-list={true}>\r\n                        {children.map((el) => (\r\n                            <Row\r\n                                key={el.id}\r\n                                onClick={() => {\r\n                                    if (el.link?.value && !disabledRedirect) {\r\n                                        openLinkInNewTab(el.link.value);\r\n                                    }\r\n                                }}\r\n                                link={el.link?.value}\r\n                                mobileTextAlignment={mobileTextAlignment}\r\n                            >\r\n                                <PageWrapper\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                >\r\n                                    {el.title}\r\n                                </PageWrapper>\r\n                            </Row>\r\n                        ))}\r\n                    </Container>\r\n                )}\r\n            </Wrapper>\r\n        )\r\n    }\r\n);\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    mobileTextAlignment: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, {Fragment, useCallback, useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, {css} from 'styled-components';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {Icon} from \"../../components/Icon\";\r\nimport BurgerIcon from '../../icons/BurgerIcon.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\nimport NavBarButton from \"./Button\";\r\nimport NavBarPage from \"./Page\";\r\n\r\nconst NavBarMobile = ({\r\n                          config, stickyOffset = 0, isConstructor = false, isStatic = false, disabledRedirect = false,\r\n                          disabledListClick = false\r\n                      }) => {\r\n\r\n    const [open, setOpen] = useState(isConstructor);\r\n\r\n    useEffect(() => {\r\n        if (!isConstructor) {\r\n            document.body.style.overflowY = open ? 'hidden' : \"auto\";\r\n        }\r\n    }, [isConstructor, open])\r\n\r\n    const {\r\n        mobileHeight,\r\n        navBarRegularColor,\r\n        mobileLogoAlignment,\r\n        logoSrc,\r\n        logoCropperOptions,\r\n        navBarBehavior,\r\n        mobileFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        mobileTextAlignment,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        structure\r\n    } = config;\r\n\r\n    const onClick = useCallback(() => {\r\n        if (!isConstructor && !disabledListClick) {\r\n            setOpen(value => !value);\r\n        }\r\n    }, [isConstructor, disabledListClick]);\r\n\r\n    return (\r\n        <Container className={\"navbar-mobile\"} navBarBehavior={navBarBehavior} stickyOffset={stickyOffset}\r\n                   isConstructor={isConstructor}>\r\n            <Wrapper height={mobileHeight} navBarRegularColor={navBarRegularColor} data-mobile-header={true}>\r\n                <IconWrapper onClick={onClick} data-mobile-menu-button={true}>\r\n                    <Icon icon={BurgerIcon} color={'#ffffff'}/>\r\n                </IconWrapper>\r\n                <LogoWrapper mobileLogoAlignment={mobileLogoAlignment}>\r\n                    <Logo>\r\n                        <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)}\r\n                                   crop={logoCropperOptions}/>\r\n                    </Logo>\r\n                </LogoWrapper>\r\n            </Wrapper>\r\n            <ListWrapper data-mobile-menu={true} mobileHeight={mobileHeight} offsetTop={stickyOffset + mobileHeight}\r\n                         isConstructor={isConstructor} open={open}\r\n                         navBarRegularColor={navBarRegularColor}\r\n                         mobileFontSize={mobileFontSize} navBarTextFontFamily={navBarTextFontFamily}\r\n                         navBarTextBold={navBarTextBold}\r\n                         navBarTextItalic={navBarTextItalic}\r\n                         navBarTextUnderline={navBarTextUnderline}\r\n                         navBarTextRegularColor={navBarTextRegularColor}\r\n                         navBarTextSpacing={navBarTextSpacing}\r\n            >\r\n                {\r\n                    structure?.map(el => {\r\n                        let component = 'any';\r\n                        if (el.type === 'button') {\r\n                            component = (\r\n                                <NavBarButton\r\n                                    {...el}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    disabledRedirect={isConstructor}\r\n                                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                />\r\n                            );\r\n                        } else if (el.type === 'page') {\r\n                            component = (\r\n                                <NavBarPage\r\n                                    {...el}\r\n                                    disabledRedirect={disabledRedirect}\r\n                                    disabledListClick={disabledListClick}\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    isStatic={isStatic}\r\n                                />\r\n                            );\r\n                        }\r\n                        return <Fragment key={el.id}>{component}</Fragment>;\r\n                    })\r\n                }\r\n            </ListWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n  z-index: 1001;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  ${({navBarBehavior, stickyOffset, isConstructor}) =>\r\n          navBarBehavior === 'frozen' && !isConstructor &&\r\n          css`\r\n            position: sticky;\r\n            top: ${stickyOffset}px;\r\n          `};\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: ${({mobileHeight}) => mobileHeight}px;\r\n  width: 100%;\r\n  height: ${({isConstructor}) => isConstructor ? '350px' : 0};\r\n  transition: height 0.5s ease;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  font-size: ${({mobileFontSize}) => mobileFontSize}px;\r\n  font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n  font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n  ${({offsetTop, open, isConstructor}) =>\r\n          !isConstructor && open &&\r\n          css`\r\n            height: calc(100vh - ${offsetTop}px);\r\n          `};\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 15px 13px 16px 15px;\r\n  border: solid 1px rgba(164, 198, 225, 0.39);\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  align-items: center;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  justify-content: ${({mobileLogoAlignment}) => {\r\n    if (mobileLogoAlignment === 'center') {\r\n      return 'center';\r\n    } else if (mobileLogoAlignment === 'right') {\r\n      return 'flex-end';\r\n    }\r\n    return '';\r\n  }};\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${logoImageHeight}px;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n`;\r\n\r\nNavBarMobile.propTypes = {\r\n    config: PropTypes.object,\r\n    stickyOffset: PropTypes.number,\r\n};\r\n\r\nexport default NavBarMobile;\r\n"],"names":["logoImageWidth","logoImageHeight","roundedNumber","value","Math","floor","getCropperQueryString","crop","Object","keys","length","imageBox","rotate","x","y","height","width","concat","Icon","_ref","icon","_ref$opacity","opacity","_ref$hoverOpacity","hoverOpacity","_ref$color","color","_ref$hoverColor","hoverColor","_ref$size","size","noCursor","_ref$padding","padding","tableIcon","React","IconWrapper","_renderIcon","createElement","styled","div","_templateObject","_taggedTemplateLiteral","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","propTypes","PropTypes","string","oneOfType","func","number","bool","defaultProps","ArrowIcon","viewBox","d","fill","openLinkInNewTab","link","window","open","PageWrapper","_templateObject2","navBarTextHoverColor","navBarTextClickedColor","DropDown","memo","props","disabledRedirect","childs","dropdownSettingsInactiveFill","dropdownSettingsInactiveBorder","dropdownSettingsHoverClickedFill","dropdownSettingsHoverClickedBorder","dropdownSettingsTextColorRegular","dropdownSettingsTextColorHover","dropdownSettingsTextColorClicked","dropdownSettingsTextFontFamily","dropdownSettingsTextFontSize","dropdownSettingsTextBold","dropdownSettingsTextUnderline","dropdownSettingsTextItalic","dropdownSettingsHorizontalPadding","dropdownSettingsVerticalPadding","setOpen","rootId","parentRef","console","log","left","top","getBoundingClientRect","navbarContainer","document","querySelector","navbar","containerLeft","navbarBox","component","DropdownWrapper","className","map","el","_el$link2","DropdownElement","key","id","onClick","_el$link","title","ReactDOM","createPortal","getElementById","NavBarPage","disabledListClick","linkProps","children","isStatic","navBarHoverColor","navBarClickedColor","_useState2","_slicedToArray","useState","ref","callback","createRef","listener","e","current","contains","target","useEffect","addEventListener","removeEventListener","useOutsideClick","_useState4","containerRef","setContainerRef","isDropdown","useCallback","state","Container","undefined","_templateObject3","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","array","NavBarButton","buttonSettingsRoundCorners","buttonSettingsBorderWidth","buttonSettingsRegularBorder","buttonSettingsRegularFill","buttonSettingsHorizontalPadding","buttonSettingsVerticalPadding","buttonSettingsHoverClickedBorder","buttonSettingsHoverClickedFill","buttonSettingsTextColorRegular","buttonSettingsTextColorHover","buttonSettingsTextColorClicked","navBarTextFontSize","ButtonWrapper","Index","forwardRef","source","alt","ignoreMaxHeight","isTurntable","isHero","styles","objectFit","maxHeight","CropArea","CropImageWrapper","imagePosition","src","style","css","object","isRequired","LogoElement","logoSrc","logoCropperOptions","hideElement","Logo","CropImage","NavBar","config","_ref2$disabledRedirec","_ref2$disabledListCli","_ref2$stickyOffset","stickyOffset","_ref2$isStatic","_ref2$hideLogo","hideLogo","_ref2$isPreview","isPreview","_ref2$rootId","navBarRegularColor","logoAlignment","navBarTextAlignment","navBarTextFontFamily","navBarTextBold","navBarTextItalic","navBarTextUnderline","navBarTextRegularColor","structure","navBarTextSpacing","navBarBehavior","Wrapper","Menu","PreviewText","type","_extends","Fragment","_templateObject5","_templateObject6","BurgerIcon","xmlns","transform","Row","mobileTextAlignment","any","NavBarMobile","_ref$stickyOffset","_ref$isConstructor","isConstructor","_ref$isStatic","_ref$disabledRedirect","_ref$disabledListClic","body","overflowY","mobileHeight","mobileLogoAlignment","mobileFontSize","LogoWrapper","ListWrapper","offsetTop","_templateObject4","_templateObject8"],"mappings":"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"}