{"version":3,"file":"index.esm.js","sources":["../src/consts.js","../src/utils/getCropperQueryString.js","../src/components/Icon/index.js","../src/icons/ArrowIcon.js","../src/utils/openLinkInNewTab.js","../src/modules/styled.js","../src/modules/NavBar/Page.js","../src/hooks/useOutsideClick.js","../src/modules/NavBar/Button.js","../src/components/CropImage/index.js","../src/modules/NavBar/index.js","../src/icons/BurgerIcon.js","../src/modules/NavBarMobile/Row.js","../src/modules/NavBarMobile/Button.js","../src/modules/NavBarMobile/Page.js","../src/modules/NavBarMobile/index.js"],"sourcesContent":["export const logoImageWidth = 100;\r\nexport const logoImageHeight = 50;\r\n","const roundedNumber = (value) => Math.floor(value);\n\nexport const getCropperQueryString = (crop) => {\n  if (!crop || Object.keys(crop).length === 0) {\n    return '';\n  }\n  const { imageBox, rotate } = crop;\n  const { x, y, height, width } = imageBox;\n  return `?x=${roundedNumber(x)}&y=${roundedNumber(y)}&w=${roundedNumber(width)}&h=${roundedNumber(\n    height\n  )}&rotate=${rotate}`;\n};\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = ({\r\n  icon,\r\n  opacity = 1,\r\n  hoverOpacity = 1,\r\n  color = '#000',\r\n  hoverColor = color,\r\n  size = 20,\r\n  rotate,\r\n  noCursor,\r\n  padding = 0,\r\n  width,\r\n  height,\r\n  tableIcon\r\n}) => (\r\n  <IconWrapper\r\n    color={color}\r\n    hoverColor={hoverColor}\r\n    size={size}\r\n    width={width}\r\n    height={height}\r\n    opacity={opacity}\r\n    hoverOpacity={hoverOpacity}\r\n    rotate={rotate}\r\n    noCursor={noCursor}\r\n    padding={padding}\r\n    tableIcon={tableIcon}\r\n  >\r\n    {_renderIcon(icon)}\r\n  </IconWrapper>\r\n);\r\n\r\nconst _renderIcon = (icon) => {\r\n  const Icon = icon;\r\n\r\n  if (typeof icon === 'function') {\r\n    return <Icon />;\r\n  } else if (typeof icon === 'string') {\r\n    return icon;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst IconWrapper = styled.div`\r\n  cursor: ${({ noCursor }) => (noCursor ? 'initial' : 'pointer')};\r\n  display: ${({ tableIcon }) => (tableIcon ? 'table-cell' : 'flex')};\r\n  flex: 0 0 auto;\r\n  align-items: center;\r\n  font-size: ${({ tableIcon }) => !tableIcon && '0'};\r\n  width: ${({ size, width }) => (width ? width : size)}px;\r\n  height: ${({ size, height }) => (height ? height : size)}px;\r\n  transform: rotate(${({ rotate }) => rotate}deg);\r\n  transform-origin: 50% 50%;\r\n  padding: ${({ padding }) => padding}px;\r\n\r\n  :hover {\r\n    svg {\r\n      fill: ${({ hoverColor }) => hoverColor};\r\n      opacity: ${({ hoverOpacity }) => hoverOpacity};\r\n    }\r\n  }\r\n\r\n  svg {\r\n    fill: ${({ color }) => color};\r\n    opacity: ${({ opacity }) => opacity};\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: all ease-in-out 0.3s;\r\n    vertical-align: ${({ tableIcon }) => tableIcon && 'middle'};\r\n  }\r\n`;\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string,\r\n  hoverColor: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  size: PropTypes.number,\r\n  padding: PropTypes.number,\r\n  opacity: PropTypes.number,\r\n  hoverOpacity: PropTypes.number,\r\n  rotate: PropTypes.number,\r\n  noCursor: PropTypes.bool,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  tableIcon: PropTypes.bool\r\n};\r\n\r\nIcon.defaultProps = {\r\n  opacity: 1,\r\n  color: '#000',\r\n  size: 20,\r\n  padding: 0,\r\n  rotate: 0,\r\n  noCursor: false,\r\n  tableIcon: false\r\n};\r\n\r\nexport { Icon };\r\n","import React from 'react';\r\nconst ArrowIcon = () => (\r\n  <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n    <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\r\n  </svg>\r\n);\r\n\r\nexport default ArrowIcon;\r\n","export const openLinkInNewTab = (link) => window.open(link, '_blank', 'noreferrer noopener');\r\n","import styled from \"styled-components\";\r\n\r\nexport const IconWrapper = styled.div``;\r\n\r\nexport const PageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    color: ${({navBarTextHoverColor}) => navBarTextHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    color: ${({navBarTextClickedColor}) => navBarTextClickedColor};\r\n  }\r\n`;\r\n","import React, { memo, useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { useOutsideClick } from '../../hooks/useOutsideClick.js';\r\nimport { Icon } from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport { openLinkInNewTab } from '../../utils/openLinkInNewTab.js';\r\nimport {IconWrapper, PageWrapper} from \"../styled\";\r\n\r\nconst NavBarPage = memo(\r\n  ({\r\n    disabledRedirect,\r\n    disabledListClick,\r\n    link,\r\n    title,\r\n    navBarTextHoverColor,\r\n    navBarTextClickedColor,\r\n    children,\r\n    dropdownSettingsInactiveFill,\r\n    dropdownSettingsInactiveBorder,\r\n    dropdownSettingsHoverClickedFill,\r\n    dropdownSettingsHoverClickedBorder,\r\n    dropdownSettingsTextColorRegular,\r\n    dropdownSettingsTextColorHover,\r\n    dropdownSettingsTextColorClicked,\r\n    dropdownSettingsTextFontFamily,\r\n    dropdownSettingsTextFontSize,\r\n    dropdownSettingsTextBold,\r\n    dropdownSettingsTextUnderline,\r\n    dropdownSettingsTextItalic,\r\n    dropdownSettingsHorizontalPadding,\r\n    dropdownSettingsVerticalPadding,\r\n    isStatic\r\n  }) => {\r\n    const [open, setOpen] = useState(isStatic);\r\n\r\n    const ref = useOutsideClick(() => {\r\n      setOpen(false);\r\n    });\r\n\r\n    const isDropdown = children.length > 0;\r\n\r\n    const onClick = useCallback(() => {\r\n      if (isDropdown && !disabledListClick) {\r\n        setOpen((state) => !state);\r\n      } else if (!isDropdown && !disabledRedirect && link) {\r\n        openLinkInNewTab(link);\r\n      }\r\n    }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n    return (\r\n      <Container ref={ref}>\r\n        <PageWrapper\r\n          navBarTextHoverColor={navBarTextHoverColor}\r\n          navBarTextClickedColor={navBarTextClickedColor}\r\n          onClick={onClick}\r\n          data-link={!isDropdown ? link : undefined}\r\n          data-isdropdown={isDropdown}\r\n        >\r\n          {title}{' '}\r\n          {isDropdown && (\r\n            <IconWrapper data-arrow={true}>\r\n              {open ? (\r\n                <Icon icon={ArrowIcon} rotate={isStatic ? 90 : -90} color={'#ffffff'} />\r\n              ) : (\r\n                <Icon icon={ArrowIcon} rotate={90} color={'#ffffff'} />\r\n              )}\r\n            </IconWrapper>\r\n          )}\r\n        </PageWrapper>\r\n        {open && isDropdown && (\r\n          <DropdownWrapper data-list={true} className={\"navbar-list\"}>\r\n            {children.map((el) => (\r\n              <DropdownElement\r\n                key={el.id}\r\n                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                onClick={() => {\r\n                  if (el.link && !disabledRedirect) {\r\n                    openLinkInNewTab(el.link);\r\n                    setOpen(false);\r\n                  } else {\r\n                    setOpen(false);\r\n                  }\r\n                }}\r\n                data-link={el.link}\r\n              >\r\n                {el.title}\r\n              </DropdownElement>\r\n            ))}\r\n          </DropdownWrapper>\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n);\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst DropdownWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  z-index: 1;\r\n`;\r\n\r\nconst DropdownElement = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  background: ${({dropdownSettingsInactiveFill}) => dropdownSettingsInactiveFill};\r\n  border: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n  color: ${({dropdownSettingsTextColorRegular}) => dropdownSettingsTextColorRegular};\r\n  font-size: ${({dropdownSettingsTextFontSize}) => dropdownSettingsTextFontSize}px;\r\n  font-family: ${({dropdownSettingsTextFontFamily}) => dropdownSettingsTextFontFamily};\r\n  font-weight: ${({dropdownSettingsTextBold}) => (dropdownSettingsTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({dropdownSettingsTextItalic}) => (dropdownSettingsTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({dropdownSettingsTextUnderline}) => (dropdownSettingsTextUnderline ? 'underline' : 'none')};\r\n  padding: ${({dropdownSettingsVerticalPadding, dropdownSettingsHorizontalPadding}) =>\r\n    `${dropdownSettingsVerticalPadding}px ${dropdownSettingsHorizontalPadding}px`};\r\n\r\n  &:hover {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorHover}) => dropdownSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorClicked}) => dropdownSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n  link: PropTypes.string,\r\n  disabledRedirect: PropTypes.bool,\r\n  disabledListClick: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  navBarTextHoverColor: PropTypes.string,\r\n  navBarTextClickedColor: PropTypes.string,\r\n  children: PropTypes.array,\r\n  dropdownSettingsInactiveFill: PropTypes.string,\r\n  dropdownSettingsInactiveBorder: PropTypes.string,\r\n  dropdownSettingsHoverClickedFill: PropTypes.string,\r\n  dropdownSettingsHoverClickedBorder: PropTypes.string,\r\n  dropdownSettingsTextColorRegular: PropTypes.string,\r\n  dropdownSettingsTextColorHover: PropTypes.string,\r\n  dropdownSettingsTextColorClicked: PropTypes.string,\r\n  dropdownSettingsTextFontFamily: PropTypes.string,\r\n  dropdownSettingsTextFontSize: PropTypes.number,\r\n  dropdownSettingsTextBold: PropTypes.bool,\r\n  dropdownSettingsTextUnderline: PropTypes.bool,\r\n  dropdownSettingsTextItalic: PropTypes.bool,\r\n  dropdownSettingsHorizontalPadding: PropTypes.number,\r\n  dropdownSettingsVerticalPadding: PropTypes.number\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, { createRef, useEffect } from 'react';\r\n\r\nexport const useOutsideClick = (callback) => {\r\n  const ref = createRef();\r\n\r\n  const listener = (e) => {\r\n    if (ref.current && !ref?.current.contains(e.target)) {\r\n      callback(e, ref.current);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', listener);\r\n    document.addEventListener('touchstart', listener);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener);\r\n      document.removeEventListener('touchstart', listener);\r\n    };\r\n  });\r\n\r\n  return ref;\r\n};\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         navBarTextFontSize\r\n     }) => {\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [link, disabledRedirect]);\r\n        return (\r\n            <ButtonWrapper\r\n                buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                onClick={onClick}\r\n                data-link={link}\r\n                navBarTextFontSize={navBarTextFontSize}\r\n            >\r\n                {title}\r\n            </ButtonWrapper>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({buttonSettingsRoundCorners}) => buttonSettingsRoundCorners}px;\r\n  border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsRegularBorder}) => buttonSettingsRegularBorder};\r\n  background: ${({buttonSettingsRegularFill}) => buttonSettingsRegularFill};\r\n  padding: ${({buttonSettingsHorizontalPadding}) =>\r\n          `0 ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({buttonSettingsTextColorRegular}) => buttonSettingsTextColorRegular};\r\n  height: ${({\r\n               buttonSettingsVerticalPadding,\r\n               navBarTextFontSize,\r\n               buttonSettingsBorderWidth\r\n             }) => navBarTextFontSize + ((buttonSettingsVerticalPadding || 0) * 2) + ((buttonSettingsBorderWidth || 0) * 2)};\r\n\r\n  &:hover {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorHover}) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorClicked}) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string,\r\n    navBarTextFontSize: PropTypes.number,\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Index = forwardRef(({ height, id, crop, source, alt, ignoreMaxHeight, isTurntable, isHero }, ref) => {\r\n  const styles = { width: '100%', height: '100%', objectFit: 'cover' };\r\n  if (!ignoreMaxHeight) {\r\n    styles.maxHeight = '600px';\r\n  }\r\n  return (\r\n    <CropArea ref={ref} isTurntable={isTurntable} isHero={isHero} height={height} id={id}>\r\n      <CropImageWrapper {...crop.imagePosition} isHero={isHero}>\r\n        <img src={source} alt={alt} style={styles} />\r\n      </CropImageWrapper>\r\n    </CropArea>\r\n  );\r\n});\r\n\r\nconst CropImageWrapper = styled.div`\r\n  position: relative;\r\n  left: ${({ x }) => x || 0}%;\r\n  top: ${({ y }) => y || 0}%;\r\n  width: ${({ width }) => width || 100}%;\r\n  height: ${({ height }) => height || 100}%;\r\n\r\n  ${({ isHero }) =>\r\n    isHero &&\r\n    css`\r\n      position: static;\r\n      img {\r\n        object-fit: cover;\r\n        //margin-left: auto;\r\n        //margin-right: auto;\r\n        //width: auto !important;\r\n      }\r\n    `};\r\n`;\r\n\r\nconst CropArea = styled.div`\r\n  width: 100%;\r\n  height: ${({ height, isTurntable, isHero }) =>\r\n    isTurntable ? '100%' : isHero ? '100%' : height ? height + 'px' : '100%'};\r\n  position: relative;\r\n  background-color: transparent;\r\n  overflow: hidden;\r\n`;\r\n\r\nIndex.propTypes = {\r\n  height: PropTypes.number,\r\n  id: PropTypes.string,\r\n  crop: PropTypes.object,\r\n  source: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n  ignoreMaxHeight: PropTypes.bool,\r\n  isTurntable: PropTypes.bool,\r\n  isHero: PropTypes.bool\r\n};\r\n\r\nIndex.defaultProps = {\r\n  id: '',\r\n  alt: '',\r\n  ignoreMaxHeight: false,\r\n  crop: {}\r\n};\r\n\r\nexport default Index;\r\n","import React, {Fragment} from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport NavBarPage from './Page.js';\r\nimport NavBarButton from './Button.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\n\r\nconst NavBar = ({\r\n                    config,\r\n                    disabledRedirect = false,\r\n                    disabledListClick = false,\r\n                    stickyOffset = 0,\r\n                    isStatic = false,\r\n                    hideLogo = false,\r\n                    isPreview = false\r\n                }) => {\r\n    const {\r\n        height,\r\n        navBarRegularColor,\r\n        logoAlignment,\r\n        logoCropperOptions,\r\n        logoSrc,\r\n        navBarTextAlignment,\r\n        navBarTextFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        structure,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        navBarBehavior,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding\r\n    } = config;\r\n\r\n    let LogoComponent = null;\r\n    if (!hideLogo) {\r\n        LogoComponent = (\r\n            <Logo>\r\n                <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)} crop={logoCropperOptions}/>\r\n            </Logo>\r\n        );\r\n    }\r\n    return (\r\n        <Wrapper height={height} navBarRegularColor={navBarRegularColor} navBarBehavior={navBarBehavior}\r\n                 stickyOffset={stickyOffset} className={\"navbar-desktop\"}>\r\n            <Menu height={height}>\r\n                {logoAlignment === 'left' && LogoComponent}\r\n                <Container\r\n                    navBarTextAlignment={navBarTextAlignment}\r\n                    navBarTextFontSize={navBarTextFontSize}\r\n                    navBarTextFontFamily={navBarTextFontFamily}\r\n                    navBarTextBold={navBarTextBold}\r\n                    navBarTextItalic={navBarTextItalic}\r\n                    navBarTextUnderline={navBarTextUnderline}\r\n                    navBarTextRegularColor={navBarTextRegularColor}\r\n                    navBarTextSpacing={navBarTextSpacing}\r\n                    logoAlignment={logoAlignment}\r\n                >\r\n                    {\r\n                        structure?.length === 0 && isPreview ? <PreviewText>Navigation will preview here once created</PreviewText> :\r\n                            <>\r\n                                {structure?.map((el) => {\r\n                                    let component = null;\r\n                                    if (el.type === 'button') {\r\n                                        component = (\r\n                                            <NavBarButton\r\n                                                {...el}\r\n                                                disabledRedirect={disabledRedirect}\r\n                                                buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                                buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                                buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                                buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                                buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                                buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                                buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                                buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                                buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                                buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                                buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                                navBarTextFontSize={navBarTextFontSize}\r\n                                            />\r\n                                        );\r\n                                    } else if (el.type === 'page') {\r\n                                        component = (\r\n                                            <NavBarPage\r\n                                                {...el}\r\n                                                disabledRedirect={disabledRedirect}\r\n                                                disabledListClick={disabledListClick}\r\n                                                navBarTextHoverColor={navBarTextHoverColor}\r\n                                                navBarTextClickedColor={navBarTextClickedColor}\r\n                                                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                                                dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                                                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                                                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                                                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                                                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                                                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                                                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                                                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                                                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                                                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                                                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                                                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                                                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                                                isStatic={isStatic}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                    return <Fragment key={el.id}>{component}</Fragment>;\r\n                                })}\r\n                            </>\r\n                    }\r\n                </Container>\r\n                {logoAlignment === 'right' && LogoComponent}\r\n            </Menu>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nNavBar.propTypes = {\r\n    config: PropTypes.object,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    stickyOffset: PropTypes.number,\r\n    isStatic: PropTypes.bool,\r\n    hideLogo: PropTypes.bool,\r\n    isPreview: PropTypes.bool,\r\n};\r\n\r\nconst PreviewText = styled.div`\r\n  font-family: Montserrat-bold, sans-serif;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  font-size: 15px;\r\n  letter-spacing: 1.5px;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  padding: 0 50px;\r\n  width: 100%;\r\n  margin: auto;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n  z-index: 1001;\r\n\r\n  ${({navBarBehavior, stickyOffset}) =>\r\n          navBarBehavior === 'frozen' &&\r\n          css`\r\n            position: sticky;\r\n            top: ${stickyOffset}px;\r\n          `};\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${logoImageHeight}px;\r\n`;\r\n\r\nconst Menu = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  max-width: 1120px;\r\n  margin: auto;\r\n  height: ${({height}) => height}px;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  margin: ${({logoAlignment}) => {\r\n    if (logoAlignment === 'right') {\r\n      return '0 24px 0 0';\r\n    }\r\n    return '0 0 0 24px';\r\n  }};\r\n  justify-content: ${({navBarTextAlignment}) => navBarTextAlignment};\r\n  font-size: ${({navBarTextFontSize}) => navBarTextFontSize}px;\r\n  font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n  font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n  height: 100%;\r\n\r\n  > div {\r\n    margin-right: ${({navBarTextSpacing}) => navBarTextSpacing}px;\r\n\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nconst BurgerIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"19.94\" height=\"16.44\" viewBox=\"0 0 19.94 16.44\">\r\n        <path d=\"M20.41,6.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,6.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,13.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,13.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,20.34H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,20.34Z\" transform=\"translate(-1.97 -3.91)\" />\r\n    </svg>\r\n);\r\n\r\nexport default BurgerIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\n\r\nconst Row = ({children, onClick, mobileTextAlignment, link, isDropdown}) => {\r\n\r\n    return (\r\n        <Wrapper onClick={onClick} mobileTextAlignment={mobileTextAlignment} data-link={link} data-isdropdown={isDropdown}>\r\n            {children}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 15px;\r\n    display: flex;\r\n    justify-content: ${({mobileTextAlignment}) => mobileTextAlignment === 'center' ? 'center' : 'flex-start'};\r\n`\r\n\r\nRow.propTypes = {\r\n    children: PropTypes.any,\r\n    onClick: PropTypes.func,\r\n    link: PropTypes.string,\r\n    isDropdown: PropTypes.bool,\r\n};\r\n\r\nexport default Row;\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         mobileTextAlignment\r\n     }) => {\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [link, disabledRedirect]);\r\n        return (\r\n            <Row onClick={onClick} link={link} mobileTextAlignment={mobileTextAlignment}>\r\n                <ButtonWrapper\r\n                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                >\r\n                    {title}\r\n                </ButtonWrapper>\r\n            </Row>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({ buttonSettingsRoundCorners }) => buttonSettingsRoundCorners}px;\r\n  border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n    ${({ buttonSettingsRegularBorder }) => buttonSettingsRegularBorder};\r\n  background: ${({ buttonSettingsRegularFill }) => buttonSettingsRegularFill};\r\n  padding: ${({ buttonSettingsVerticalPadding, buttonSettingsHorizontalPadding }) =>\r\n    `${buttonSettingsVerticalPadding}px ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({ buttonSettingsTextColorRegular }) => buttonSettingsTextColorRegular};\r\n\r\n  &:hover {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorHover }) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorClicked }) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, {memo, useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport {IconWrapper, PageWrapper} from \"../styled\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         mobileTextAlignment,\r\n         isStatic\r\n     }) => {\r\n        const [open, setOpen] = useState(isStatic);\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n        return (\r\n            <Wrapper>\r\n                <Row isDropdown={isDropdown} link={!isDropdown ? link : undefined} onClick={onClick} mobileTextAlignment={mobileTextAlignment}>\r\n                    <PageWrapper\r\n                        navBarTextHoverColor={navBarTextHoverColor}\r\n                        navBarTextClickedColor={navBarTextClickedColor}\r\n                    >\r\n                        {title}{' '}\r\n                        {isDropdown && (\r\n                            <IconWrapper data-arrow={true}>\r\n                                {open ? (\r\n                                    <Icon icon={ArrowIcon} rotate={isStatic ? 90 : -90} color={'#ffffff'}/>\r\n                                ) : (\r\n                                    <Icon icon={ArrowIcon} rotate={90} color={'#ffffff'}/>\r\n                                )}\r\n                            </IconWrapper>\r\n                        )}\r\n                    </PageWrapper>\r\n                </Row>\r\n                {open && isDropdown && (\r\n                    <Container data-mobile-dropdown-list={true}>\r\n                        {children.map((el) => (\r\n                            <Row\r\n                                key={el.id}\r\n                                onClick={() => {\r\n                                    if (el.link && !disabledRedirect) {\r\n                                        openLinkInNewTab(el.link);\r\n                                    }\r\n                                }}\r\n                                link={el.link}\r\n                                mobileTextAlignment={mobileTextAlignment}\r\n                            >\r\n                                <PageWrapper\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                >\r\n                                    {el.title}\r\n                                </PageWrapper>\r\n                            </Row>\r\n                        ))}\r\n                    </Container>\r\n                )}\r\n            </Wrapper>\r\n        )\r\n    }\r\n);\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    mobileTextAlignment: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, {Fragment, useCallback, useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, {css} from 'styled-components';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {Icon} from \"../../components/Icon\";\r\nimport BurgerIcon from '../../icons/BurgerIcon.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\nimport NavBarButton from \"./Button\";\r\nimport NavBarPage from \"./Page\";\r\n\r\nconst NavBarMobile = ({\r\n                          config, stickyOffset = 0, isConstructor = false, isStatic = false, disabledRedirect = false,\r\n                          disabledListClick = false\r\n                      }) => {\r\n\r\n    const [open, setOpen] = useState(isConstructor);\r\n\r\n    useEffect(() => {\r\n        if (!isConstructor) {\r\n            document.body.style.overflowY = open ? 'hidden' : \"auto\";\r\n        }\r\n    }, [isConstructor, open])\r\n\r\n    const {\r\n        mobileHeight,\r\n        navBarRegularColor,\r\n        mobileLogoAlignment,\r\n        logoSrc,\r\n        logoCropperOptions,\r\n        navBarBehavior,\r\n        mobileFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        mobileTextAlignment,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        structure\r\n    } = config;\r\n\r\n    const onClick = useCallback(() => {\r\n        if (!isConstructor && !disabledListClick) {\r\n            setOpen(value => !value);\r\n        }\r\n    }, [isConstructor, disabledListClick]);\r\n\r\n    return (\r\n        <Container className={\"navbar-mobile\"} navBarBehavior={navBarBehavior} stickyOffset={stickyOffset}\r\n                   isConstructor={isConstructor}>\r\n            <Wrapper height={mobileHeight} navBarRegularColor={navBarRegularColor} data-mobile-header={true}>\r\n                <IconWrapper onClick={onClick} data-mobile-menu-button={true}>\r\n                    <Icon icon={BurgerIcon} color={'#ffffff'}/>\r\n                </IconWrapper>\r\n                <LogoWrapper mobileLogoAlignment={mobileLogoAlignment}>\r\n                    <Logo>\r\n                        <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)}\r\n                                   crop={logoCropperOptions}/>\r\n                    </Logo>\r\n                </LogoWrapper>\r\n            </Wrapper>\r\n            <ListWrapper data-mobile-menu={true} mobileHeight={mobileHeight} offsetTop={stickyOffset + mobileHeight}\r\n                         isConstructor={isConstructor} open={open}\r\n                         navBarRegularColor={navBarRegularColor}\r\n                         mobileFontSize={mobileFontSize} navBarTextFontFamily={navBarTextFontFamily}\r\n                         navBarTextBold={navBarTextBold}\r\n                         navBarTextItalic={navBarTextItalic}\r\n                         navBarTextUnderline={navBarTextUnderline}\r\n                         navBarTextRegularColor={navBarTextRegularColor}\r\n                         navBarTextSpacing={navBarTextSpacing}>\r\n                {\r\n                    structure?.map(el => {\r\n                        let component = 'any';\r\n                        if (el.type === 'button') {\r\n                            component = (\r\n                                <NavBarButton\r\n                                    {...el}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    disabledRedirect={isConstructor}\r\n                                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                />\r\n                            );\r\n                        } else if (el.type === 'page') {\r\n                            component = (\r\n                                <NavBarPage\r\n                                    {...el}\r\n                                    disabledRedirect={disabledRedirect}\r\n                                    disabledListClick={disabledListClick}\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    isStatic={isStatic}\r\n                                />\r\n                            );\r\n                        }\r\n                        return <Fragment key={el.id}>{component}</Fragment>;\r\n                    })\r\n                }\r\n            </ListWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n  z-index: 1001;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  ${({navBarBehavior, stickyOffset, isConstructor}) =>\r\n          navBarBehavior === 'frozen' && !isConstructor &&\r\n          css`\r\n            position: sticky;\r\n            top: ${stickyOffset}px;\r\n          `};\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: ${({mobileHeight}) => mobileHeight}px;\r\n  width: 100%;\r\n  height: ${({isConstructor}) => isConstructor ? 'auto' : 0};\r\n  transition: height 0.5s ease;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  overflow: hidden;\r\n  font-size: ${({mobileFontSize}) => mobileFontSize}px;\r\n  font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n  font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n  ${({offsetTop, open, isConstructor}) =>\r\n          !isConstructor && open &&\r\n          css`\r\n            height: calc(100vh - ${offsetTop}px);\r\n          `};\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 15px 13px 16px 15px;\r\n  border: solid 1px rgba(164, 198, 225, 0.39);\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  align-items: center;\r\n`;\r\n\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  justify-content: ${({mobileLogoAlignment}) => {\r\n    if (mobileLogoAlignment === 'center') {\r\n      return 'center';\r\n    } else if (mobileLogoAlignment === 'right') {\r\n      return 'flex-end';\r\n    }\r\n    return '';\r\n  }};\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${logoImageHeight}px;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n`;\r\n\r\nNavBarMobile.propTypes = {\r\n    config: PropTypes.object,\r\n    stickyOffset: PropTypes.number,\r\n};\r\n\r\nexport default NavBarMobile;\r\n"],"names":["logoImageWidth","logoImageHeight","roundedNumber","value","Math","floor","getCropperQueryString","crop","Object","keys","length","imageBox","rotate","x","y","height","width","concat","Icon","_ref","icon","_ref$opacity","opacity","_ref$hoverOpacity","hoverOpacity","_ref$color","color","_ref$hoverColor","hoverColor","_ref$size","size","noCursor","_ref$padding","padding","tableIcon","React","IconWrapper","_renderIcon","createElement","styled","div","_templateObject","_taggedTemplateLiteral","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","propTypes","PropTypes","string","oneOfType","func","number","bool","defaultProps","ArrowIcon","viewBox","d","fill","openLinkInNewTab","link","window","open","PageWrapper","_templateObject2","navBarTextHoverColor","navBarTextClickedColor","NavBarPage","memo","disabledRedirect","disabledListClick","title","children","dropdownSettingsInactiveFill","dropdownSettingsInactiveBorder","dropdownSettingsHoverClickedFill","dropdownSettingsHoverClickedBorder","dropdownSettingsTextColorRegular","dropdownSettingsTextColorHover","dropdownSettingsTextColorClicked","dropdownSettingsTextFontFamily","dropdownSettingsTextFontSize","dropdownSettingsTextBold","dropdownSettingsTextUnderline","dropdownSettingsTextItalic","dropdownSettingsHorizontalPadding","dropdownSettingsVerticalPadding","isStatic","_useState2","_slicedToArray","useState","setOpen","ref","callback","createRef","listener","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideClick","isDropdown","onClick","useCallback","state","Container","undefined","DropdownWrapper","className","map","el","DropdownElement","key","id","_templateObject3","_ref14","_ref15","_ref16","array","NavBarButton","buttonSettingsRoundCorners","buttonSettingsBorderWidth","buttonSettingsRegularBorder","buttonSettingsRegularFill","buttonSettingsHorizontalPadding","buttonSettingsVerticalPadding","buttonSettingsHoverClickedBorder","buttonSettingsHoverClickedFill","buttonSettingsTextColorRegular","buttonSettingsTextColorHover","buttonSettingsTextColorClicked","navBarTextFontSize","ButtonWrapper","Index","forwardRef","source","alt","ignoreMaxHeight","isTurntable","isHero","styles","objectFit","maxHeight","CropArea","CropImageWrapper","imagePosition","src","style","css","object","isRequired","NavBar","config","_ref$disabledRedirect","_ref$disabledListClic","_ref$stickyOffset","stickyOffset","_ref$isStatic","_ref$hideLogo","hideLogo","_ref$isPreview","isPreview","navBarRegularColor","logoAlignment","logoCropperOptions","logoSrc","navBarTextAlignment","navBarTextFontFamily","navBarTextBold","navBarTextItalic","navBarTextUnderline","navBarTextRegularColor","structure","navBarTextSpacing","navBarBehavior","LogoComponent","Logo","CropImage","Wrapper","Menu","PreviewText","component","type","_extends","Fragment","_templateObject5","BurgerIcon","xmlns","transform","Row","mobileTextAlignment","any","NavBarMobile","_ref$isConstructor","isConstructor","body","overflowY","mobileHeight","mobileLogoAlignment","mobileFontSize","LogoWrapper","ListWrapper","offsetTop","_templateObject4","_templateObject8"],"mappings":"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"}