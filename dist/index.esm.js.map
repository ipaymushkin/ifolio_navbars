{"version":3,"file":"index.esm.js","sources":["../src/consts.js","../src/utils/getCropperQueryString.js","../src/components/Icon/index.js","../src/icons/ArrowIcon.js","../src/utils/openLinkInNewTab.js","../src/modules/NavBar/Page.js","../src/hooks/useOutsideClick.js","../src/modules/NavBar/Button.js","../src/components/CropImage/index.js","../src/modules/NavBar/index.js","../src/icons/BurgerIcon.js","../src/modules/NavBarMobile/index.js"],"sourcesContent":["export const logoImageWidth = 100;\r\nexport const logoImageHeight = 50;\r\n","const roundedNumber = (value) => Math.floor(value);\n\nexport const getCropperQueryString = (crop) => {\n  if (!crop || Object.keys(crop).length === 0) {\n    return '';\n  }\n  const { imageBox, rotate } = crop;\n  const { x, y, height, width } = imageBox;\n  return `?x=${roundedNumber(x)}&y=${roundedNumber(y)}&w=${roundedNumber(width)}&h=${roundedNumber(\n    height\n  )}&rotate=${rotate}`;\n};\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = ({\r\n  icon,\r\n  opacity = 1,\r\n  hoverOpacity = 1,\r\n  color = '#000',\r\n  hoverColor = color,\r\n  size = 20,\r\n  rotate,\r\n  noCursor,\r\n  padding = 0,\r\n  width,\r\n  height,\r\n  tableIcon\r\n}) => (\r\n  <IconWrapper\r\n    color={color}\r\n    hoverColor={hoverColor}\r\n    size={size}\r\n    width={width}\r\n    height={height}\r\n    opacity={opacity}\r\n    hoverOpacity={hoverOpacity}\r\n    rotate={rotate}\r\n    noCursor={noCursor}\r\n    padding={padding}\r\n    tableIcon={tableIcon}\r\n  >\r\n    {_renderIcon(icon)}\r\n  </IconWrapper>\r\n);\r\n\r\nconst _renderIcon = (icon) => {\r\n  const Icon = icon;\r\n\r\n  if (typeof icon === 'function') {\r\n    return <Icon />;\r\n  } else if (typeof icon === 'string') {\r\n    return icon;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst IconWrapper = styled.div`\r\n  cursor: ${({ noCursor }) => (noCursor ? 'initial' : 'pointer')};\r\n  display: ${({ tableIcon }) => (tableIcon ? 'table-cell' : 'flex')};\r\n  flex: 0 0 auto;\r\n  align-items: center;\r\n  font-size: ${({ tableIcon }) => !tableIcon && '0'};\r\n  width: ${({ size, width }) => (width ? width : size)}px;\r\n  height: ${({ size, height }) => (height ? height : size)}px;\r\n  transform: rotate(${({ rotate }) => rotate}deg);\r\n  transform-origin: 50% 50%;\r\n  padding: ${({ padding }) => padding}px;\r\n\r\n  :hover {\r\n    svg {\r\n      fill: ${({ hoverColor }) => hoverColor};\r\n      opacity: ${({ hoverOpacity }) => hoverOpacity};\r\n    }\r\n  }\r\n\r\n  svg {\r\n    fill: ${({ color }) => color};\r\n    opacity: ${({ opacity }) => opacity};\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: all ease-in-out 0.3s;\r\n    vertical-align: ${({ tableIcon }) => tableIcon && 'middle'};\r\n  }\r\n`;\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string,\r\n  hoverColor: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  size: PropTypes.number,\r\n  padding: PropTypes.number,\r\n  opacity: PropTypes.number,\r\n  hoverOpacity: PropTypes.number,\r\n  rotate: PropTypes.number,\r\n  noCursor: PropTypes.bool,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  tableIcon: PropTypes.bool\r\n};\r\n\r\nIcon.defaultProps = {\r\n  opacity: 1,\r\n  color: '#000',\r\n  size: 20,\r\n  padding: 0,\r\n  rotate: 0,\r\n  noCursor: false,\r\n  tableIcon: false\r\n};\r\n\r\nexport { Icon };\r\n","import React from 'react';\r\nconst ArrowIcon = () => (\r\n  <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n    <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\r\n  </svg>\r\n);\r\n\r\nexport default ArrowIcon;\r\n","export const openLinkInNewTab = (link) => window.open(link, '_blank', 'noreferrer noopener');\r\n","import React, { memo, useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { useOutsideClick } from '../../hooks/useOutsideClick.js';\r\nimport { Icon } from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport { openLinkInNewTab } from '../../utils/openLinkInNewTab.js';\r\n\r\nconst NavBarPage = memo(\r\n  ({\r\n    disabledRedirect,\r\n    disabledListClick,\r\n    link,\r\n    title,\r\n    navBarTextHoverColor,\r\n    navBarTextClickedColor,\r\n    children,\r\n    dropdownSettingsInactiveFill,\r\n    dropdownSettingsInactiveBorder,\r\n    dropdownSettingsHoverClickedFill,\r\n    dropdownSettingsHoverClickedBorder,\r\n    dropdownSettingsTextColorRegular,\r\n    dropdownSettingsTextColorHover,\r\n    dropdownSettingsTextColorClicked,\r\n    dropdownSettingsTextFontFamily,\r\n    dropdownSettingsTextFontSize,\r\n    dropdownSettingsTextBold,\r\n    dropdownSettingsTextUnderline,\r\n    dropdownSettingsTextItalic,\r\n    dropdownSettingsHorizontalPadding,\r\n    dropdownSettingsVerticalPadding\r\n  }) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const ref = useOutsideClick(() => {\r\n      setOpen(false);\r\n    });\r\n\r\n    const isDropdown = children.length > 0;\r\n\r\n    const onClick = useCallback(() => {\r\n      if (isDropdown && !disabledListClick) {\r\n        setOpen((state) => !state);\r\n      } else if (!isDropdown && !disabledRedirect && link) {\r\n        openLinkInNewTab(link);\r\n      }\r\n    }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n    return (\r\n      <Container ref={ref}>\r\n        <Wrapper\r\n          navBarTextHoverColor={navBarTextHoverColor}\r\n          navBarTextClickedColor={navBarTextClickedColor}\r\n          onClick={onClick}\r\n        >\r\n          {title}{' '}\r\n          {isDropdown && (\r\n            <IconWrapper>\r\n              {open ? (\r\n                <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'} />\r\n              ) : (\r\n                <Icon icon={ArrowIcon} rotate={180} color={'#ffffff'} />\r\n              )}\r\n            </IconWrapper>\r\n          )}\r\n        </Wrapper>\r\n        {open && (\r\n          <DropdownWrapper>\r\n            {children.map((el) => (\r\n              <DropdownElement\r\n                key={el.id}\r\n                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                onClick={() => {\r\n                  if (el.link && !disabledRedirect) {\r\n                    openLinkInNewTab(el.link);\r\n                    setOpen(false);\r\n                  } else {\r\n                    setOpen(false);\r\n                  }\r\n                }}\r\n              >\r\n                {el.title}\r\n              </DropdownElement>\r\n            ))}\r\n          </DropdownWrapper>\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n);\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    color: ${({ navBarTextHoverColor }) => navBarTextHoverColor};\r\n  }\r\n  &:active {\r\n    color: ${({ navBarTextClickedColor }) => navBarTextClickedColor};\r\n  }\r\n`;\r\n\r\nconst DropdownWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n`;\r\n\r\nconst IconWrapper = styled.div``;\r\n\r\nconst DropdownElement = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  background: ${({ dropdownSettingsInactiveFill }) => dropdownSettingsInactiveFill};\r\n  border: 2px solid ${({ dropdownSettingsInactiveBorder }) => dropdownSettingsInactiveBorder};\r\n  color: ${({ dropdownSettingsTextColorRegular }) => dropdownSettingsTextColorRegular};\r\n  font-size: ${({ dropdownSettingsTextFontSize }) => dropdownSettingsTextFontSize}px;\r\n  font-family: ${({ dropdownSettingsTextFontFamily }) => dropdownSettingsTextFontFamily};\r\n  font-weight: ${({ dropdownSettingsTextBold }) => (dropdownSettingsTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({ dropdownSettingsTextItalic }) => (dropdownSettingsTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({ dropdownSettingsTextUnderline }) => (dropdownSettingsTextUnderline ? 'underline' : 'none')};\r\n  padding: ${({ dropdownSettingsVerticalPadding, dropdownSettingsHorizontalPadding }) =>\r\n    `${dropdownSettingsVerticalPadding}px ${dropdownSettingsHorizontalPadding}px`};\r\n\r\n  &:hover {\r\n    background: ${({ dropdownSettingsHoverClickedFill }) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({ dropdownSettingsHoverClickedBorder }) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({ dropdownSettingsTextColorHover }) => dropdownSettingsTextColorHover};\r\n  }\r\n  &:active {\r\n    background: ${({ dropdownSettingsHoverClickedFill }) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({ dropdownSettingsHoverClickedBorder }) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({ dropdownSettingsTextColorClicked }) => dropdownSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n  link: PropTypes.string,\r\n  disabledRedirect: PropTypes.bool,\r\n  disabledListClick: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  navBarTextHoverColor: PropTypes.string,\r\n  navBarTextClickedColor: PropTypes.string,\r\n  children: PropTypes.array,\r\n  dropdownSettingsInactiveFill: PropTypes.string,\r\n  dropdownSettingsInactiveBorder: PropTypes.string,\r\n  dropdownSettingsHoverClickedFill: PropTypes.string,\r\n  dropdownSettingsHoverClickedBorder: PropTypes.string,\r\n  dropdownSettingsTextColorRegular: PropTypes.string,\r\n  dropdownSettingsTextColorHover: PropTypes.string,\r\n  dropdownSettingsTextColorClicked: PropTypes.string,\r\n  dropdownSettingsTextFontFamily: PropTypes.string,\r\n  dropdownSettingsTextFontSize: PropTypes.number,\r\n  dropdownSettingsTextBold: PropTypes.bool,\r\n  dropdownSettingsTextUnderline: PropTypes.bool,\r\n  dropdownSettingsTextItalic: PropTypes.bool,\r\n  dropdownSettingsHorizontalPadding: PropTypes.number,\r\n  dropdownSettingsVerticalPadding: PropTypes.number\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, { createRef, useEffect } from 'react';\r\n\r\nexport const useOutsideClick = (callback) => {\r\n  const ref = createRef();\r\n\r\n  const listener = (e) => {\r\n    if (ref.current && !ref?.current.contains(e.target)) {\r\n      callback(e, ref.current);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', listener);\r\n    document.addEventListener('touchstart', listener);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener);\r\n      document.removeEventListener('touchstart', listener);\r\n    };\r\n  });\r\n\r\n  return ref;\r\n};\r\n","import React, { memo, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { openLinkInNewTab } from '../../utils/openLinkInNewTab.js';\r\n\r\nconst NavBarButton = memo(\r\n  ({\r\n    link,\r\n    disabledRedirect,\r\n    title,\r\n    buttonSettingsRoundCorners,\r\n    buttonSettingsBorderWidth,\r\n    buttonSettingsRegularBorder,\r\n    buttonSettingsRegularFill,\r\n    buttonSettingsHorizontalPadding,\r\n    buttonSettingsVerticalPadding,\r\n    buttonSettingsHoverClickedBorder,\r\n    buttonSettingsHoverClickedFill,\r\n    buttonSettingsTextColorRegular,\r\n    buttonSettingsTextColorHover,\r\n    buttonSettingsTextColorClicked\r\n  }) => {\r\n    const onClick = useCallback(() => {\r\n      if (link && !disabledRedirect) {\r\n        openLinkInNewTab(link);\r\n      }\r\n    }, [link, disabledRedirect]);\r\n    return (\r\n      <Wrapper\r\n        buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n        buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n        buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n        buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n        buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n        buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n        buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n        buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n        buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n        buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n        buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n        onClick={onClick}\r\n      >\r\n        {title}\r\n      </Wrapper>\r\n    );\r\n  }\r\n);\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 10px 0;\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({ buttonSettingsRoundCorners }) => buttonSettingsRoundCorners}px;\r\n  border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n    ${({ buttonSettingsRegularBorder }) => buttonSettingsRegularBorder};\r\n  background: ${({ buttonSettingsRegularFill }) => buttonSettingsRegularFill};\r\n  padding: ${({ buttonSettingsVerticalPadding, buttonSettingsHorizontalPadding }) =>\r\n    `${buttonSettingsVerticalPadding}px ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({ buttonSettingsTextColorRegular }) => buttonSettingsTextColorRegular};\r\n\r\n  &:hover {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorHover }) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorClicked }) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n  disabledRedirect: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  link: PropTypes.string,\r\n  buttonSettingsRoundCorners: PropTypes.number,\r\n  buttonSettingsBorderWidth: PropTypes.number,\r\n  buttonSettingsRegularBorder: PropTypes.string,\r\n  buttonSettingsRegularFill: PropTypes.string,\r\n  buttonSettingsVerticalPadding: PropTypes.number,\r\n  buttonSettingsHorizontalPadding: PropTypes.number,\r\n  buttonSettingsHoverClickedBorder: PropTypes.string,\r\n  buttonSettingsHoverClickedFill: PropTypes.string,\r\n  buttonSettingsTextColorRegular: PropTypes.string,\r\n  buttonSettingsTextColorHover: PropTypes.string,\r\n  buttonSettingsTextColorClicked: PropTypes.string\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Index = forwardRef(({ height, id, crop, source, alt, ignoreMaxHeight, isTurntable, isHero }, ref) => {\r\n  const styles = { width: '100%', height: '100%', objectFit: 'cover' };\r\n  if (!ignoreMaxHeight) {\r\n    styles.maxHeight = '600px';\r\n  }\r\n  return (\r\n    <CropArea ref={ref} isTurntable={isTurntable} isHero={isHero} height={height} id={id}>\r\n      <CropImageWrapper {...crop.imagePosition} isHero={isHero}>\r\n        <img src={source} alt={alt} style={styles} />\r\n      </CropImageWrapper>\r\n    </CropArea>\r\n  );\r\n});\r\n\r\nconst CropImageWrapper = styled.div`\r\n  position: relative;\r\n  left: ${({ x }) => x || 0}%;\r\n  top: ${({ y }) => y || 0}%;\r\n  width: ${({ width }) => width || 100}%;\r\n  height: ${({ height }) => height || 100}%;\r\n\r\n  ${({ isHero }) =>\r\n    isHero &&\r\n    css`\r\n      position: static;\r\n      img {\r\n        object-fit: cover;\r\n        //margin-left: auto;\r\n        //margin-right: auto;\r\n        //width: auto !important;\r\n      }\r\n    `};\r\n`;\r\n\r\nconst CropArea = styled.div`\r\n  width: 100%;\r\n  height: ${({ height, isTurntable, isHero }) =>\r\n    isTurntable ? '100%' : isHero ? '100%' : height ? height + 'px' : '100%'};\r\n  position: relative;\r\n  background-color: transparent;\r\n  overflow: hidden;\r\n`;\r\n\r\nIndex.propTypes = {\r\n  height: PropTypes.number,\r\n  id: PropTypes.string,\r\n  crop: PropTypes.object,\r\n  source: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n  ignoreMaxHeight: PropTypes.bool,\r\n  isTurntable: PropTypes.bool,\r\n  isHero: PropTypes.bool\r\n};\r\n\r\nIndex.defaultProps = {\r\n  id: '',\r\n  alt: '',\r\n  ignoreMaxHeight: false,\r\n  crop: {}\r\n};\r\n\r\nexport default Index;\r\n","import React, { Fragment } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { logoImageHeight, logoImageWidth } from '../../consts.js';\r\nimport { getCropperQueryString } from '../../utils/getCropperQueryString.js';\r\nimport NavBarPage from './Page.js';\r\nimport NavBarButton from './Button.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\n\r\nconst NavBar = ({ config, disabledRedirect = false, disabledListClick = false, stickyOffset = 0 }) => {\r\n  const {\r\n    height,\r\n    navBarRegularColor,\r\n    logoAlignment,\r\n    logoCropperOptions,\r\n    logoSrc,\r\n    navBarTextAlignment,\r\n    navBarTextFontSize,\r\n    navBarTextFontFamily,\r\n    navBarTextBold,\r\n    navBarTextItalic,\r\n    navBarTextUnderline,\r\n    navBarTextRegularColor,\r\n    structure,\r\n    navBarTextHoverColor,\r\n    navBarTextClickedColor,\r\n    navBarTextSpacing,\r\n    buttonSettingsRoundCorners,\r\n    buttonSettingsBorderWidth,\r\n    buttonSettingsRegularBorder,\r\n    buttonSettingsRegularFill,\r\n    buttonSettingsHorizontalPadding,\r\n    buttonSettingsVerticalPadding,\r\n    buttonSettingsHoverClickedFill,\r\n    buttonSettingsHoverClickedBorder,\r\n    buttonSettingsTextColorRegular,\r\n    buttonSettingsTextColorHover,\r\n    buttonSettingsTextColorClicked,\r\n    navBarBehavior,\r\n    dropdownSettingsInactiveFill,\r\n    dropdownSettingsInactiveBorder,\r\n    dropdownSettingsHoverClickedFill,\r\n    dropdownSettingsHoverClickedBorder,\r\n    dropdownSettingsTextColorRegular,\r\n    dropdownSettingsTextColorHover,\r\n    dropdownSettingsTextColorClicked,\r\n    dropdownSettingsTextFontFamily,\r\n    dropdownSettingsTextFontSize,\r\n    dropdownSettingsTextBold,\r\n    dropdownSettingsTextUnderline,\r\n    dropdownSettingsTextItalic,\r\n    dropdownSettingsHorizontalPadding,\r\n    dropdownSettingsVerticalPadding\r\n  } = config;\r\n\r\n  const LogoComponent = (\r\n    <Logo>\r\n      <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)} crop={logoCropperOptions} />\r\n    </Logo>\r\n  );\r\n  return (\r\n    <Wrapper height={height} navBarRegularColor={navBarRegularColor} navBarBehavior={navBarBehavior} stickyOffset={stickyOffset}>\r\n      <Menu height={height}>\r\n        {logoAlignment === 'left' && LogoComponent}\r\n        <Container\r\n          navBarTextAlignment={navBarTextAlignment}\r\n          navBarTextFontSize={navBarTextFontSize}\r\n          navBarTextFontFamily={navBarTextFontFamily}\r\n          navBarTextBold={navBarTextBold}\r\n          navBarTextItalic={navBarTextItalic}\r\n          navBarTextUnderline={navBarTextUnderline}\r\n          navBarTextRegularColor={navBarTextRegularColor}\r\n          navBarTextSpacing={navBarTextSpacing}\r\n          logoAlignment={logoAlignment}\r\n        >\r\n          {(structure || []).map((el) => {\r\n            let component = null;\r\n            if (el.type === 'button') {\r\n              component = (\r\n                <NavBarButton\r\n                  {...el}\r\n                  disabledRedirect={disabledRedirect}\r\n                  buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                  buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                  buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                  buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                  buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                  buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                  buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                  buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                  buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                  buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                  buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                />\r\n              );\r\n            } else if (el.type === 'page') {\r\n              component = (\r\n                <NavBarPage\r\n                  {...el}\r\n                  disabledRedirect={disabledRedirect}\r\n                  disabledListClick={disabledListClick}\r\n                  navBarTextHoverColor={navBarTextHoverColor}\r\n                  navBarTextClickedColor={navBarTextClickedColor}\r\n                  dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                  dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                  dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                  dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                  dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                  dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                  dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                  dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                  dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                  dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                  dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                  dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                  dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                  dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                />\r\n              );\r\n            }\r\n            return <Fragment key={el.id}>{component}</Fragment>;\r\n          })}\r\n        </Container>\r\n        {logoAlignment === 'right' && LogoComponent}\r\n      </Menu>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nNavBar.propTypes = {\r\n  config: PropTypes.object,\r\n  disabledRedirect: PropTypes.bool,\r\n  disabledListClick: PropTypes.bool,\r\n  stickyOffset: PropTypes.number,\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  height: ${({ height }) => height}px;\r\n  background-color: ${({ navBarRegularColor }) => navBarRegularColor};\r\n  padding: 0 50px;\r\n  width: 100%;\r\n  margin: auto;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n  z-index: 1001;\r\n\r\n  ${({ navBarBehavior, stickyOffset }) =>\r\n    navBarBehavior === 'frozen' &&\r\n    css`\r\n      position: sticky;\r\n      top: ${stickyOffset}px;\r\n    `};\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${logoImageHeight}px;\r\n`;\r\n\r\nconst Menu = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  max-width: 1120px;\r\n  margin: auto;\r\n  height: ${({ height }) => height}px;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  margin: ${({ logoAlignment }) => {\r\n    if (logoAlignment === 'right') {\r\n      return '0 24px 0 0';\r\n    }\r\n    return '0 0 0 24px';\r\n  }};\r\n  justify-content: ${({ navBarTextAlignment }) => navBarTextAlignment};\r\n  font-size: ${({ navBarTextFontSize }) => navBarTextFontSize}px;\r\n  font-family: ${({ navBarTextFontFamily }) => navBarTextFontFamily};\r\n  font-weight: ${({ navBarTextBold }) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({ navBarTextItalic }) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({ navBarTextUnderline }) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({ navBarTextRegularColor }) => navBarTextRegularColor};\r\n  height: 100%;\r\n  > div {\r\n    margin-right: ${({ navBarTextSpacing }) => navBarTextSpacing}px;\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nconst BurgerIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"27.03\" height=\"16\" viewBox=\"0 0 27.03 16\">\r\n        <path d=\"M1.5,6.5a1,1,0,1,0,0,2h25a1,1,0,1,0,0-2H1.5Z\" transform=\"translate(-0.49 -6.5)\" />\r\n        <path d=\"M1.5,13.5a1,1,0,1,0,0,2h25a1,1,0,1,0,0-2H1.5Z\" transform=\"translate(-0.49 -6.5)\" />\r\n        <path d=\"M1.5,20.5a1,1,0,1,0,0,2h25a1,1,0,1,0,0-2H1.5Z\" transform=\"translate(-0.49 -6.5)\" />\r\n    </svg>\r\n);\r\n\r\nexport default BurgerIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, {css} from 'styled-components';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {Icon} from \"../../components/Icon\";\r\nimport BurgerIcon from '../../icons/BurgerIcon.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\n\r\nconst NavBarMobile = ({config, stickyOffset = 0}) => {\r\n    const {mobileHeight, navBarRegularColor, mobileLogoAlignment, logoSrc, logoCropperOptions, navBarBehavior} = config;\r\n    return (\r\n        <Wrapper height={mobileHeight} navBarRegularColor={navBarRegularColor} navBarBehavior={navBarBehavior} stickyOffset={stickyOffset}>\r\n            <IconWrapper>\r\n                <Icon icon={BurgerIcon} color={'#ffffff'}/>\r\n            </IconWrapper>\r\n            <LogoWrapper mobileLogoAlignment={mobileLogoAlignment}>\r\n                <Logo>\r\n                    <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)} crop={logoCropperOptions}/>\r\n                </Logo>\r\n            </LogoWrapper>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  z-index: 1001;\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 15px 13px 16px 15px;\r\n  border-radius: 3px;\r\n  border: solid 1px rgba(164, 198, 225, 0.39);\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  align-items: center;\r\n  position: relative;\r\n  ${({navBarBehavior, stickyOffset}) =>\r\n          navBarBehavior === 'frozen' &&\r\n          css`\r\n            position: sticky;\r\n            top: ${stickyOffset}px;\r\n          `};\r\n`;\r\n\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  justify-content: ${({mobileLogoAlignment}) => {\r\n    if (mobileLogoAlignment === 'center') {\r\n      return 'center';\r\n    } else if (mobileLogoAlignment === 'right') {\r\n      return 'flex-end';\r\n    }\r\n    return '';\r\n  }};\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${logoImageHeight}px;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n`;\r\n\r\nNavBarMobile.propTypes = {\r\n    config: PropTypes.object,\r\n    stickyOffset: PropTypes.number,\r\n};\r\n\r\nexport default NavBarMobile;\r\n"],"names":["roundedNumber","value","Math","floor","getCropperQueryString","crop","Object","keys","length","imageBox","rotate","x","y","height","width","concat","Icon","_ref","icon","_ref$opacity","opacity","_ref$hoverOpacity","hoverOpacity","_ref$color","color","_ref$hoverColor","hoverColor","_ref$size","size","noCursor","_ref$padding","padding","tableIcon","_jsx","IconWrapper","children","_renderIcon","styled","div","_templateObject","_taggedTemplateLiteral","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","propTypes","PropTypes","string","oneOfType","func","number","bool","defaultProps","ArrowIcon","_jsxs","viewBox","d","fill","openLinkInNewTab","link","window","open","NavBarPage","memo","disabledRedirect","disabledListClick","title","navBarTextHoverColor","navBarTextClickedColor","dropdownSettingsInactiveFill","dropdownSettingsInactiveBorder","dropdownSettingsHoverClickedFill","dropdownSettingsHoverClickedBorder","dropdownSettingsTextColorRegular","dropdownSettingsTextColorHover","dropdownSettingsTextColorClicked","dropdownSettingsTextFontFamily","dropdownSettingsTextFontSize","dropdownSettingsTextBold","dropdownSettingsTextUnderline","dropdownSettingsTextItalic","dropdownSettingsHorizontalPadding","dropdownSettingsVerticalPadding","_useState2","_slicedToArray","useState","setOpen","ref","callback","createRef","listener","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideClick","isDropdown","onClick","useCallback","state","Container","Wrapper","DropdownWrapper","map","el","DropdownElement","id","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_ref14","_ref15","_ref16","_ref17","_ref18","array","NavBarButton","buttonSettingsRoundCorners","buttonSettingsBorderWidth","buttonSettingsRegularBorder","buttonSettingsRegularFill","buttonSettingsHorizontalPadding","buttonSettingsVerticalPadding","buttonSettingsHoverClickedBorder","buttonSettingsHoverClickedFill","buttonSettingsTextColorRegular","buttonSettingsTextColorHover","buttonSettingsTextColorClicked","Index","forwardRef","source","alt","ignoreMaxHeight","isTurntable","isHero","styles","objectFit","maxHeight","CropArea","CropImageWrapper","imagePosition","src","style","css","object","isRequired","NavBar","config","_ref$disabledRedirect","_ref$disabledListClic","_ref$stickyOffset","stickyOffset","navBarRegularColor","logoAlignment","logoCropperOptions","logoSrc","navBarTextAlignment","navBarTextFontSize","navBarTextFontFamily","navBarTextBold","navBarTextItalic","navBarTextUnderline","navBarTextRegularColor","structure","navBarTextSpacing","navBarBehavior","LogoComponent","Logo","CropImage","Menu","component","type","_objectSpread","Fragment","logoImageWidth","BurgerIcon","xmlns","transform","NavBarMobile","mobileHeight","mobileLogoAlignment","LogoWrapper"],"mappings":"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"}