{"version":3,"file":"index.esm.js","sources":["../src/modules/NavBar/Navbar.stories.js","../src/consts.js","../src/utils/getCropperQueryString.js","../src/components/Icon/index.js","../src/icons/ArrowIcon.js","../src/utils/openLinkInNewTab.js","../src/modules/styled.js","../src/modules/NavBar/Page.js","../src/hooks/useOutsideClick.js","../src/modules/NavBar/Button.js","../src/components/CropImage/index.js","../src/modules/NavBar/index.js","../src/icons/BurgerIcon.js","../src/modules/NavBarMobile/Row.js","../src/modules/NavBarMobile/Button.js","../src/modules/NavBarMobile/Page.js","../src/modules/NavBarMobile/index.js"],"sourcesContent":["import React from \"react\";\r\nimport NavBar from \"./index\";\r\nimport {config} from \"../../consts\";\r\n\r\nexport default {\r\n    title: 'Navbar Desktop',\r\n    component: NavBar,\r\n}\r\n\r\nconst Template = (args) => <NavBar {...args} />;\r\n\r\nexport const Primary = Template.bind({});\r\nPrimary.args = {\r\n    config,\r\n};\r\n\r\n","import {Primary} from \"./modules/NavBar/Navbar.stories\";\r\n\r\nexport const logoImageWidth = 250;\r\nexport const logoImageHeight = 80;\r\n\r\nexport const config = {\r\n        \"name\": \"Nav Bar Template Clone\",\r\n        \"height\": 59,\r\n        \"logoSrc\": \"https://api.ifolio.cloud/medias/By/6I/By6IfDU0klbCi3blQAGMR0WgMF83dxq1DNuK6wfO.png\",\r\n        \"structure\": [\r\n            {\r\n                \"id\": \"c8eb4d50-2dc3-11ed-ae24-1b53f41c03b5\",\r\n                \"link\": {\r\n                    \"type\": \"link\",\r\n                    \"value\": \"https://ifoliocorp.com/\"\r\n                },\r\n                \"type\": \"page\",\r\n                \"title\": \"SERVICES\",\r\n                \"children\": [],\r\n                \"expanded\": true\r\n            },\r\n            {\r\n                \"id\": \"c8eb4d50-2dc3-11ed-ae24-1b53441c03b5\",\r\n                \"link\": {\r\n                    \"type\": \"link\",\r\n                    \"value\": \"https://ifoliocorp.com/\"\r\n                },\r\n                \"type\": \"page\",\r\n                \"title\": \"SERVICES 2\",\r\n                \"children\": [],\r\n                \"expanded\": true\r\n            },\r\n            {\r\n                \"id\": \"18eb4d50-2dc3-11ed-ae24-1b53441c03b5\",\r\n                \"link\": {\r\n                    \"type\": \"link\",\r\n                    \"value\": \"https://ifoliocorp.com/\"\r\n                },\r\n                \"type\": \"page\",\r\n                \"title\": \"SERVICES 3\",\r\n                \"children\": [],\r\n                \"expanded\": true\r\n            },\r\n            {\r\n                \"id\": \"bfe87a70-2dc3-11ed-ae24-1b53f41c03b5\",\r\n                \"link\": null,\r\n                \"type\": \"page\",\r\n                \"title\": \"ABOUT\",\r\n                \"children\": [\r\n                    {\r\n                        \"id\": \"fd95d0c0-2dc3-11ed-a7eb-c30aa007ce78\",\r\n                        \"link\": {\r\n                            \"type\": \"link\",\r\n                            \"value\": \"https://ifoliocorp.com/\"\r\n                        },\r\n                        \"type\": \"page\",\r\n                        \"title\": \"Success stories\",\r\n                        \"children\": []\r\n                    },\r\n                    {\r\n                        \"id\": \"efc59750-2dc3-11ed-a7eb-c30aa007ce78\",\r\n                        \"link\": {\r\n                            \"type\": \"link\",\r\n                            \"value\": \"https://ifoliocorp.com/\"\r\n                        },\r\n                        \"type\": \"page\",\r\n                        \"title\": \"Our company\",\r\n                        \"children\": []\r\n                    },\r\n                    {\r\n                        \"id\": \"c8d2c6d0-2dc4-11ed-a7eb-c30aa007ce78\",\r\n                        \"link\": null,\r\n                        \"type\": \"page\",\r\n                        \"title\": \"Our approach\",\r\n                        \"children\": []\r\n                    }\r\n                ],\r\n                \"expanded\": true\r\n            },\r\n            {\r\n                \"id\": \"c4f3ad50-2dc3-11ed-ae24-1b53f41c03b5\",\r\n                \"link\": {\r\n                    \"type\": \"link\",\r\n                    \"value\": \"https://ifoliocorp.com/\"\r\n                },\r\n                \"type\": \"page\",\r\n                \"title\": \"INDUSTRIES\",\r\n                \"children\": [\r\n                    {\r\n                        \"id\": \"ba430df0-2dc4-11ed-a7eb-c30aa007ce78\",\r\n                        \"link\": null,\r\n                        \"type\": \"page\",\r\n                        \"title\": \"Marketing\",\r\n                        \"children\": []\r\n                    },\r\n                    {\r\n                        \"id\": \"bed196c0-2dc4-11ed-a7eb-c30aa007ce78\",\r\n                        \"link\": null,\r\n                        \"type\": \"page\",\r\n                        \"title\": \"Sales\",\r\n                        \"children\": []\r\n                    }\r\n                ],\r\n                \"expanded\": true\r\n            },\r\n            {\r\n                \"id\": \"46a21260-2dc4-11ed-a7eb-c30aa007ce78\",\r\n                \"link\": null,\r\n                \"type\": \"button\",\r\n                \"title\": \"LOG-IN\",\r\n                \"children\": []\r\n            }\r\n        ],\r\n        \"mobileHeight\": 65,\r\n        \"logoAlignment\": \"left\",\r\n        \"mobileFontSize\": 14,\r\n        \"navBarBehavior\": \"frozen\",\r\n        \"navBarTextBold\": true,\r\n        \"navBarHoverColor\": \"#41c5c2\",\r\n        \"navBarTextItalic\": false,\r\n        \"navBarTextSpacing\": 27,\r\n        \"logoCropperOptions\": {\r\n            \"x\": 0,\r\n            \"y\": -32.222,\r\n            \"zoom\": 1.0086455331412103,\r\n            \"width\": 349.774,\r\n            \"height\": 174.887,\r\n            \"rotate\": 0,\r\n            \"scaleX\": 1,\r\n            \"scaleY\": 1,\r\n            \"imageBox\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"width\": 347,\r\n                \"height\": 104\r\n            },\r\n            \"imgWidth\": 347,\r\n            \"imgHeight\": 104,\r\n            \"imagePosition\": {\r\n                \"x\": 0,\r\n                \"y\": 18.43,\r\n                \"width\": 99.21,\r\n                \"height\": 59.47\r\n            }\r\n        },\r\n        \"navBarClickedColor\": \"#41c5c2\",\r\n        \"navBarRegularColor\": \"#41c5c2\",\r\n        \"navBarTextFontSize\": 14,\r\n        \"mobileLogoAlignment\": \"right\",\r\n        \"mobileTextAlignment\": \"center\",\r\n        \"navBarTextAlignment\": \"center\",\r\n        \"navBarTextUnderline\": false,\r\n        \"navBarTextFontFamily\": \"Avenir-heavy\",\r\n        \"navBarTextHoverColor\": \"#292e50\",\r\n        \"navBarTextClickedColor\": \"#292e50\",\r\n        \"navBarTextRegularColor\": \"#ffffff\",\r\n        \"dropdownSettingsTextBold\": false,\r\n        \"buttonSettingsBorderWidth\": 2,\r\n        \"buttonSettingsRegularFill\": \"transparent\",\r\n        \"buttonSettingsRoundCorners\": 20,\r\n        \"dropdownSettingsTextItalic\": false,\r\n        \"buttonSettingsRegularBorder\": \"#fff\",\r\n        \"buttonSettingsTextColorHover\": \"#fff\",\r\n        \"dropdownSettingsInactiveFill\": \"#2cbab7\",\r\n        \"dropdownSettingsTextFontSize\": 14,\r\n        \"buttonSettingsVerticalPadding\": 8,\r\n        \"dropdownSettingsTextUnderline\": false,\r\n        \"buttonSettingsHoverClickedFill\": \"#292e50\",\r\n        \"buttonSettingsTextColorClicked\": \"#fff\",\r\n        \"buttonSettingsTextColorRegular\": \"#fff\",\r\n        \"dropdownSettingsInactiveBorder\": \"#2cbab7\",\r\n        \"dropdownSettingsTextColorHover\": \"#41c5c2\",\r\n        \"dropdownSettingsTextFontFamily\": \"Roboto\",\r\n        \"buttonSettingsHorizontalPadding\": 20,\r\n        \"dropdownSettingsVerticalPadding\": 8,\r\n        \"buttonSettingsHoverClickedBorder\": \"#fff\",\r\n        \"dropdownSettingsHoverClickedFill\": \"#eeffff\",\r\n        \"dropdownSettingsTextColorClicked\": \"#41c5c2\",\r\n        \"dropdownSettingsTextColorRegular\": \"#fff\",\r\n        \"dropdownSettingsHorizontalPadding\": 10,\r\n        \"dropdownSettingsHoverClickedBorder\": \"#eeffff\"\r\n    }\r\n","const roundedNumber = (value) => Math.floor(value);\r\n\r\nexport const getCropperQueryString = (crop) => {\r\n  if (!crop || Object.keys(crop).length === 0) {\r\n    return '';\r\n  }\r\n  const { imageBox, rotate } = crop;\r\n  const { x, y, height, width } = imageBox;\r\n  return `?x=${roundedNumber(x)}&y=${roundedNumber(y)}&w=${roundedNumber(width)}&h=${roundedNumber(\r\n    height\r\n  )}&rotate=${rotate}`;\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = ({\r\n  icon,\r\n  opacity = 1,\r\n  hoverOpacity = 1,\r\n  color = '#000',\r\n  hoverColor = color,\r\n  size = 20,\r\n  rotate,\r\n  noCursor,\r\n  padding = 0,\r\n  width,\r\n  height,\r\n  tableIcon\r\n}) => (\r\n  <IconWrapper\r\n    color={color}\r\n    hoverColor={hoverColor}\r\n    size={size}\r\n    width={width}\r\n    height={height}\r\n    opacity={opacity}\r\n    hoverOpacity={hoverOpacity}\r\n    rotate={rotate}\r\n    noCursor={noCursor}\r\n    padding={padding}\r\n    tableIcon={tableIcon}\r\n  >\r\n    {_renderIcon(icon)}\r\n  </IconWrapper>\r\n);\r\n\r\nconst _renderIcon = (icon) => {\r\n  const Icon = icon;\r\n\r\n  if (typeof icon === 'function') {\r\n    return <Icon />;\r\n  } else if (typeof icon === 'string') {\r\n    return icon;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst IconWrapper = styled.div`\r\n  cursor: ${({ noCursor }) => (noCursor ? 'initial' : 'pointer')};\r\n  display: ${({ tableIcon }) => (tableIcon ? 'table-cell' : 'flex')};\r\n  flex: 0 0 auto;\r\n  align-items: center;\r\n  font-size: ${({ tableIcon }) => !tableIcon && '0'};\r\n  width: ${({ size, width }) => (width ? width : size)}px;\r\n  height: ${({ size, height }) => (height ? height : size)}px;\r\n  transform: rotate(${({ rotate }) => rotate}deg);\r\n  transform-origin: 50% 50%;\r\n  padding: ${({ padding }) => padding}px;\r\n\r\n  :hover {\r\n    svg {\r\n      fill: ${({ hoverColor }) => hoverColor};\r\n      opacity: ${({ hoverOpacity }) => hoverOpacity};\r\n    }\r\n  }\r\n\r\n  svg {\r\n    fill: ${({ color }) => color};\r\n    opacity: ${({ opacity }) => opacity};\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: all ease-in-out 0.3s;\r\n    vertical-align: ${({ tableIcon }) => tableIcon && 'middle'};\r\n  }\r\n`;\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string,\r\n  hoverColor: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  size: PropTypes.number,\r\n  padding: PropTypes.number,\r\n  opacity: PropTypes.number,\r\n  hoverOpacity: PropTypes.number,\r\n  rotate: PropTypes.number,\r\n  noCursor: PropTypes.bool,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  tableIcon: PropTypes.bool\r\n};\r\n\r\nIcon.defaultProps = {\r\n  opacity: 1,\r\n  color: '#000',\r\n  size: 20,\r\n  padding: 0,\r\n  rotate: 0,\r\n  noCursor: false,\r\n  tableIcon: false\r\n};\r\n\r\nexport { Icon };\r\n","import React from 'react';\r\nconst ArrowIcon = () => (\r\n  <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n    <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\r\n  </svg>\r\n);\r\n\r\nexport default ArrowIcon;\r\n","export const openLinkInNewTab = (link) => window.open(link, '_blank', 'noreferrer noopener');\r\n","import styled from \"styled-components\";\r\n\r\nexport const IconWrapper = styled.div``;\r\n\r\nexport const PageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    color: ${({navBarTextHoverColor}) => navBarTextHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    color: ${({navBarTextClickedColor}) => navBarTextClickedColor};\r\n  }\r\n`;\r\n\r\nexport const PageWrapperDesktop = styled(PageWrapper)`\r\n    padding: 0 10px;\r\n`\r\n\r\nexport const PageWrapperMobile = styled(PageWrapper)`\r\n    word-break: break-word;\r\n`;\r\n","import React, {memo, useCallback, useEffect, useState} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport {useOutsideClick} from '../../hooks/useOutsideClick.js';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport {IconWrapper, PageWrapperDesktop} from \"../styled\";\r\n\r\nconst DropDown = memo((props) => {\r\n\r\n    const {\r\n        disabledRedirect,\r\n        childs,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding,\r\n        setOpen,\r\n        rootId,\r\n        parentRef,\r\n    } = props;\r\n\r\n    const isClient = typeof window === \"object\";\r\n\r\n    let left = 0, top = 0;\r\n    if (isClient && parentRef) {\r\n        left = parentRef.getBoundingClientRect().left;\r\n        const navbarContainer = parentRef.closest(\"[data-navbarcontainer]\");\r\n        const navbar = parentRef.closest('.navbar-desktop');\r\n        if (navbarContainer) {\r\n            const containerLeft = navbarContainer.getBoundingClientRect().left;\r\n            if (left < containerLeft) left = containerLeft;\r\n        }\r\n        if (navbar) {\r\n            const navbarBox = navbar.getBoundingClientRect();\r\n            top = navbarBox.top + navbarBox.height + window.scrollY;\r\n        }\r\n    }\r\n\r\n    const component = <DropdownWrapper data-list={true} className={\"navbar-list\"} left={left} top={top} dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}>\r\n        {childs.map((el) => (\r\n            <DropdownElement\r\n                key={el.id}\r\n                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                onClick={() => {\r\n                    if (el.link?.value && !disabledRedirect) {\r\n                        openLinkInNewTab(el.link.value);\r\n                        setOpen(false);\r\n                    } else {\r\n                        setOpen(false);\r\n                    }\r\n                }}\r\n                data-link={el.link?.value}\r\n            >\r\n                {el.title}\r\n            </DropdownElement>\r\n        ))}\r\n    </DropdownWrapper>\r\n\r\n    if (isClient) {\r\n        return ReactDOM.createPortal(component, document.getElementById(rootId));\r\n    }\r\n    return component;\r\n})\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link: linkProps,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         dropdownSettingsInactiveFill,\r\n         dropdownSettingsInactiveBorder,\r\n         dropdownSettingsHoverClickedFill,\r\n         dropdownSettingsHoverClickedBorder,\r\n         dropdownSettingsTextColorRegular,\r\n         dropdownSettingsTextColorHover,\r\n         dropdownSettingsTextColorClicked,\r\n         dropdownSettingsTextFontFamily,\r\n         dropdownSettingsTextFontSize,\r\n         dropdownSettingsTextBold,\r\n         dropdownSettingsTextUnderline,\r\n         dropdownSettingsTextItalic,\r\n         dropdownSettingsHorizontalPadding,\r\n         dropdownSettingsVerticalPadding,\r\n         isStatic,\r\n         navBarHoverColor,\r\n         navBarClickedColor,\r\n         rootId,\r\n     }) => {\r\n        const [open, setOpen] = useState(isStatic);\r\n        const link = linkProps?.value;\r\n\r\n        const ref = useOutsideClick(() => {\r\n            setOpen(false);\r\n        });\r\n\r\n        const [containerRef, setContainerRef] = useState(null);\r\n        useEffect(() => {\r\n            setContainerRef(ref.current);\r\n        }, [])\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n        useEffect(() => {\r\n            const handleScroll = () => {\r\n                setOpen(false)\r\n            }\r\n            document.body.addEventListener(\"scroll\", handleScroll);\r\n            return () => {\r\n                document.body.removeEventListener(\"scroll\", handleScroll);\r\n            }\r\n        }, [])\r\n\r\n        return (\r\n            <Container ref={ref} navBarHoverColor={navBarHoverColor} navBarClickedColor={navBarClickedColor}>\r\n                <PageWrapperDesktop\r\n                    navBarTextHoverColor={navBarTextHoverColor}\r\n                    navBarTextClickedColor={navBarTextClickedColor}\r\n                    onClick={onClick}\r\n                    data-link={!isDropdown ? link : undefined}\r\n                    data-isdropdown={isDropdown}\r\n                >\r\n                    {title}{' '}\r\n                    {isDropdown && (\r\n                        <IconWrapper data-arrow={true}>\r\n                            {open ? (\r\n                                <Icon icon={ArrowIcon} rotate={isStatic ? -90 : 90} color={'#ffffff'}/>\r\n                            ) : (\r\n                                <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'}/>\r\n                            )}\r\n                        </IconWrapper>\r\n                    )}\r\n                </PageWrapperDesktop>\r\n                {open && isDropdown &&\r\n                    <DropDown\r\n                        dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                        dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                        dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                        dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                        dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                        dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                        dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                        dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                        dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                        dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                        dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                        dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                        dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                        dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                        childs={children}\r\n                        setOpen={setOpen}\r\n                        disabledRedirect={disabledRedirect}\r\n                        rootId={rootId}\r\n                        parentRef={containerRef}\r\n                    />\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n);\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    background: ${({navBarHoverColor}) => navBarHoverColor};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({navBarClickedColor}) => navBarClickedColor};\r\n  }\r\n`;\r\n\r\nconst DropdownWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  left: ${({left}) => left}px;\r\n  top: ${({top}) => top}px;\r\n  z-index: 2;\r\n  \r\n  > div {\r\n    border-right: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n    border-left: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n    border-bottom: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n  }\r\n  > div:first-child {\r\n    border-top: 2px solid ${({dropdownSettingsInactiveBorder}) => dropdownSettingsInactiveBorder};\r\n  }\r\n`;\r\n\r\nconst DropdownElement = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  background: ${({dropdownSettingsInactiveFill}) => dropdownSettingsInactiveFill};\r\n  color: ${({dropdownSettingsTextColorRegular}) => dropdownSettingsTextColorRegular};\r\n  font-size: ${({dropdownSettingsTextFontSize}) => dropdownSettingsTextFontSize}px;\r\n  font-family: ${({dropdownSettingsTextFontFamily}) => dropdownSettingsTextFontFamily};\r\n  font-weight: ${({dropdownSettingsTextBold}) => (dropdownSettingsTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({dropdownSettingsTextItalic}) => (dropdownSettingsTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({dropdownSettingsTextUnderline}) => (dropdownSettingsTextUnderline ? 'underline' : 'none')};\r\n  padding: ${({dropdownSettingsVerticalPadding, dropdownSettingsHorizontalPadding}) =>\r\n          `${dropdownSettingsVerticalPadding}px ${dropdownSettingsHorizontalPadding}px`};\r\n\r\n  &:hover {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorHover}) => dropdownSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    background: ${({dropdownSettingsHoverClickedFill}) => dropdownSettingsHoverClickedFill};\r\n    border: 2px solid ${({dropdownSettingsHoverClickedBorder}) => dropdownSettingsHoverClickedBorder};\r\n    color: ${({dropdownSettingsTextColorClicked}) => dropdownSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    dropdownSettingsInactiveFill: PropTypes.string,\r\n    dropdownSettingsInactiveBorder: PropTypes.string,\r\n    dropdownSettingsHoverClickedFill: PropTypes.string,\r\n    dropdownSettingsHoverClickedBorder: PropTypes.string,\r\n    dropdownSettingsTextColorRegular: PropTypes.string,\r\n    dropdownSettingsTextColorHover: PropTypes.string,\r\n    dropdownSettingsTextColorClicked: PropTypes.string,\r\n    dropdownSettingsTextFontFamily: PropTypes.string,\r\n    dropdownSettingsTextFontSize: PropTypes.number,\r\n    dropdownSettingsTextBold: PropTypes.bool,\r\n    dropdownSettingsTextUnderline: PropTypes.bool,\r\n    dropdownSettingsTextItalic: PropTypes.bool,\r\n    dropdownSettingsHorizontalPadding: PropTypes.number,\r\n    dropdownSettingsVerticalPadding: PropTypes.number,\r\n    navBarHoverColor: PropTypes.string,\r\n    navBarClickedColor: PropTypes.string,\r\n    rootId: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, { createRef, useEffect } from 'react';\r\n\r\nexport const useOutsideClick = (callback) => {\r\n  const ref = createRef();\r\n\r\n  const listener = (e) => {\r\n    if (ref.current && !ref?.current.contains(e.target)) {\r\n      callback(e, ref.current);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', listener);\r\n    document.addEventListener('touchstart', listener);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener);\r\n      document.removeEventListener('touchstart', listener);\r\n    };\r\n  });\r\n\r\n  return ref;\r\n};\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link: linkProps,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         navBarTextFontSize\r\n     }) => {\r\n\r\n        const link = linkProps?.value;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [link, disabledRedirect]);\r\n        return (\r\n            <ButtonWrapper\r\n                buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                onClick={onClick}\r\n                data-link={link}\r\n                navBarTextFontSize={navBarTextFontSize}\r\n            >\r\n                {title}\r\n            </ButtonWrapper>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({buttonSettingsRoundCorners}) => buttonSettingsRoundCorners}px;\r\n  border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsRegularBorder}) => buttonSettingsRegularBorder};\r\n  background: ${({buttonSettingsRegularFill}) => buttonSettingsRegularFill};\r\n  padding: ${({buttonSettingsHorizontalPadding}) =>\r\n          `0 ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({buttonSettingsTextColorRegular}) => buttonSettingsTextColorRegular};\r\n  height: ${({\r\n               buttonSettingsVerticalPadding,\r\n               navBarTextFontSize,\r\n               buttonSettingsBorderWidth\r\n             }) => navBarTextFontSize + ((buttonSettingsVerticalPadding || 0) * 2) + ((buttonSettingsBorderWidth || 0) * 2)}px;\r\n\r\n  &:hover {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorHover}) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({buttonSettingsBorderWidth}) => buttonSettingsBorderWidth}px solid ${({buttonSettingsHoverClickedBorder}) => buttonSettingsHoverClickedBorder};\r\n    background: ${({buttonSettingsHoverClickedFill}) => buttonSettingsHoverClickedFill};\r\n    color: ${({buttonSettingsTextColorClicked}) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string,\r\n    navBarTextFontSize: PropTypes.number,\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Index = forwardRef(({ height, id, crop, source, alt, ignoreMaxHeight }, ref) => {\r\n  const styles = { width: '100%', height: '100%', objectFit: 'contain' };\r\n  if (!ignoreMaxHeight) {\r\n    styles.maxHeight = '600px';\r\n  }\r\n  return (\r\n    <CropArea ref={ref} height={height} id={id}>\r\n      <CropImageWrapper {...crop.imagePosition}>\r\n        <img src={source} alt={alt} style={styles} />\r\n      </CropImageWrapper>\r\n    </CropArea>\r\n  );\r\n});\r\n\r\nconst CropImageWrapper = styled.div`\r\n  position: relative;\r\n  left: ${({ x }) => x || 0}%;\r\n  top: ${({ y }) => y || 0}%;\r\n  width: ${({ width }) => width || 100}%;\r\n  height: ${({ height }) => height || 100}%;\r\n`;\r\n\r\nconst CropArea = styled.div`\r\n  width: 100%;\r\n  height: ${({ height }) =>\r\n    height ? height + 'px' : '100%'};\r\n  position: relative;\r\n  background-color: transparent;\r\n  overflow: hidden;\r\n`;\r\n\r\nIndex.propTypes = {\r\n  height: PropTypes.number,\r\n  id: PropTypes.string,\r\n  crop: PropTypes.object,\r\n  source: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n  ignoreMaxHeight: PropTypes.bool,\r\n};\r\n\r\nIndex.defaultProps = {\r\n  id: '',\r\n  alt: '',\r\n  ignoreMaxHeight: false,\r\n  crop: {}\r\n};\r\n\r\nexport default Index;\r\n","import React, {Fragment, useEffect, useRef} from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport {logoImageWidth} from '../../consts.js';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport NavBarPage from './Page.js';\r\nimport NavBarButton from './Button.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\n\r\nconst LogoElement = ({logoSrc, logoCropperOptions, hideElement, height}) => {\r\n    return (\r\n        <Logo hideElement={hideElement} height={height}>\r\n            <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)} crop={logoCropperOptions}/>\r\n        </Logo>\r\n    )\r\n}\r\n\r\nconst NavBar = ({\r\n                    config,\r\n                    disabledRedirect = false,\r\n                    disabledListClick = false,\r\n                    stickyOffset = 0,\r\n                    isStatic = false,\r\n                    hideLogo = false,\r\n                    isPreview = false,\r\n                    isListView = false,\r\n                    rootId = \"root\"\r\n                }) => {\r\n    const ref = useRef();\r\n    const {\r\n        height,\r\n        navBarRegularColor,\r\n        navBarHoverColor,\r\n        navBarClickedColor,\r\n        navBarRegularOnScrollColor,\r\n        logoAlignment,\r\n        logoCropperOptions,\r\n        logoSrc,\r\n        navBarTextAlignment,\r\n        navBarTextFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        structure,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        navBarBehavior,\r\n        dropdownSettingsInactiveFill,\r\n        dropdownSettingsInactiveBorder,\r\n        dropdownSettingsHoverClickedFill,\r\n        dropdownSettingsHoverClickedBorder,\r\n        dropdownSettingsTextColorRegular,\r\n        dropdownSettingsTextColorHover,\r\n        dropdownSettingsTextColorClicked,\r\n        dropdownSettingsTextFontFamily,\r\n        dropdownSettingsTextFontSize,\r\n        dropdownSettingsTextBold,\r\n        dropdownSettingsTextUnderline,\r\n        dropdownSettingsTextItalic,\r\n        dropdownSettingsHorizontalPadding,\r\n        dropdownSettingsVerticalPadding\r\n    } = config;\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (navBarRegularColor === 'transparent') {\r\n                ref.current.style.backgroundColor = window.scrollY === 0 ? navBarRegularColor : navBarRegularOnScrollColor;\r\n            }\r\n        }\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Wrapper ref={ref} height={height} navBarRegularColor={navBarRegularColor} isPreview={isPreview}\r\n                 navBarBehavior={navBarBehavior}\r\n                 stickyOffset={stickyOffset} className={\"navbar-desktop\"} data-color={navBarRegularColor}\r\n                 data-coloronscroll={navBarRegularOnScrollColor} isListView={isListView}>\r\n            <Menu height={height}>\r\n                <LogoElement logoSrc={logoSrc} logoCropperOptions={logoCropperOptions}\r\n                             hideElement={hideLogo || logoAlignment !== 'left'} height={height}/>\r\n                <Container\r\n                    data-navbarcontainer={true}\r\n                    navBarTextAlignment={navBarTextAlignment}\r\n                    navBarTextFontSize={navBarTextFontSize}\r\n                    navBarTextFontFamily={navBarTextFontFamily}\r\n                    navBarTextBold={navBarTextBold}\r\n                    navBarTextItalic={navBarTextItalic}\r\n                    navBarTextUnderline={navBarTextUnderline}\r\n                    navBarTextRegularColor={navBarTextRegularColor}\r\n                    navBarTextSpacing={navBarTextSpacing}\r\n                    // logoAlignment={logoAlignment}\r\n                >\r\n                    {\r\n                        structure?.length === 0 && isPreview ?\r\n                            <PreviewText>Navigation will preview here once created</PreviewText> :\r\n                            <>\r\n                                {structure?.map((el) => {\r\n                                    let component = null;\r\n                                    if (el.type === 'button') {\r\n                                        component = (\r\n                                            <NavBarButtonWrapper>\r\n                                                <NavBarButton\r\n                                                    {...el}\r\n                                                    disabledRedirect={disabledRedirect}\r\n                                                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                                    navBarTextFontSize={navBarTextFontSize}\r\n                                                />\r\n                                            </NavBarButtonWrapper>\r\n                                        );\r\n                                    } else if (el.type === 'page') {\r\n                                        component = (\r\n                                            <NavBarPage\r\n                                                {...el}\r\n                                                disabledRedirect={disabledRedirect}\r\n                                                disabledListClick={disabledListClick}\r\n                                                navBarTextHoverColor={navBarTextHoverColor}\r\n                                                navBarTextClickedColor={navBarTextClickedColor}\r\n                                                dropdownSettingsInactiveFill={dropdownSettingsInactiveFill}\r\n                                                dropdownSettingsInactiveBorder={dropdownSettingsInactiveBorder}\r\n                                                dropdownSettingsHoverClickedFill={dropdownSettingsHoverClickedFill}\r\n                                                dropdownSettingsHoverClickedBorder={dropdownSettingsHoverClickedBorder}\r\n                                                dropdownSettingsTextColorRegular={dropdownSettingsTextColorRegular}\r\n                                                dropdownSettingsTextColorHover={dropdownSettingsTextColorHover}\r\n                                                dropdownSettingsTextColorClicked={dropdownSettingsTextColorClicked}\r\n                                                dropdownSettingsTextFontFamily={dropdownSettingsTextFontFamily}\r\n                                                dropdownSettingsTextFontSize={dropdownSettingsTextFontSize}\r\n                                                dropdownSettingsTextBold={dropdownSettingsTextBold}\r\n                                                dropdownSettingsTextUnderline={dropdownSettingsTextUnderline}\r\n                                                dropdownSettingsTextItalic={dropdownSettingsTextItalic}\r\n                                                dropdownSettingsHorizontalPadding={dropdownSettingsHorizontalPadding}\r\n                                                dropdownSettingsVerticalPadding={dropdownSettingsVerticalPadding}\r\n                                                isStatic={isStatic}\r\n                                                navBarHoverColor={navBarHoverColor}\r\n                                                navBarClickedColor={navBarClickedColor}\r\n                                                rootId={rootId}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                    return <Fragment key={el.id}>{component}</Fragment>;\r\n                                })}\r\n                            </>\r\n                    }\r\n                </Container>\r\n                <LogoElement logoSrc={logoSrc} logoCropperOptions={logoCropperOptions}\r\n                             hideElement={hideLogo || logoAlignment !== 'right'} height={height}/>\r\n            </Menu>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nNavBar.propTypes = {\r\n    config: PropTypes.object,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    stickyOffset: PropTypes.number,\r\n    isStatic: PropTypes.bool,\r\n    hideLogo: PropTypes.bool,\r\n    isPreview: PropTypes.bool,\r\n};\r\n\r\nconst PreviewText = styled.div`\r\n  font-family: Montserrat-bold, sans-serif;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  font-size: 15px;\r\n  letter-spacing: 1.5px;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({\r\n                         navBarRegularColor,\r\n                         isPreview,\r\n                         isListView\r\n                       }) => (isPreview || isListView) && navBarRegularColor === 'transparent' ? \"black\" : navBarRegularColor};\r\n  padding: 0 50px;\r\n  width: 100%;\r\n  margin: auto;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n  z-index: 1002;\r\n  transition: background-color .2s ease-in-out;\r\n\r\n  ${({navBarBehavior, stickyOffset, navBarRegularColor, isPreview, isListView}) => {\r\n    if (!isPreview && !isListView) {\r\n      if (navBarRegularColor === 'transparent') {\r\n        if (navBarBehavior === 'frozen') {\r\n          return css`\r\n            position: fixed;\r\n            top: ${stickyOffset}px;\r\n          `;\r\n        }\r\n        return css`\r\n          position: absolute;\r\n          top: ${stickyOffset}px;\r\n        `;\r\n      } else if (navBarBehavior === 'frozen') {\r\n        return css`\r\n          position: sticky;\r\n          top: ${stickyOffset}px;\r\n        `;\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: ${logoImageWidth}px;\r\n  height: ${({height}) => height}px;\r\n  opacity: ${({hideElement}) => hideElement ? 0 : 1};\r\n`;\r\n\r\nconst Menu = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  max-width: 1120px;\r\n  margin: auto;\r\n  height: ${({height}) => height}px;\r\n`;\r\n\r\n/*\r\n  margin: ${({logoAlignment}) => {\r\n    if (logoAlignment === 'right') {\r\n      return '0 24px 0 0';\r\n    }\r\n    return '0 0 0 24px';\r\n  }};\r\n */\r\n\r\nconst Container = styled.div`\r\n  display: inline;\r\n  white-space: nowrap;\r\n  margin: 0 24px;\r\n  text-align: ${({navBarTextAlignment}) => navBarTextAlignment};\r\n  font-size: ${({navBarTextFontSize}) => navBarTextFontSize}px;\r\n  font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n  font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n  font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n  text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n  color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n  height: 100%;\r\n  width: calc(100% - ${2 * logoImageWidth + 50}px);\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n\r\n  > div {\r\n    margin-right: ${({navBarTextSpacing}) => navBarTextSpacing}px;\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst NavBarButtonWrapper = styled.div`\r\n`;\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nconst BurgerIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"19.94\" height=\"16.44\" viewBox=\"0 0 19.94 16.44\">\r\n        <path d=\"M20.41,6.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,6.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,13.91H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,13.91Z\" transform=\"translate(-1.97 -3.91)\" />\r\n        <path d=\"M20.41,20.34H3.47a1.5,1.5,0,0,1,0-3H20.41A1.5,1.5,0,0,1,20.41,20.34Z\" transform=\"translate(-1.97 -3.91)\" />\r\n    </svg>\r\n);\r\n\r\nexport default BurgerIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\n\r\nconst Row = ({children, onClick, mobileTextAlignment, link, isDropdown}) => {\r\n\r\n    return (\r\n        <Wrapper onClick={onClick} mobileTextAlignment={mobileTextAlignment} data-link={link} data-isdropdown={isDropdown}>\r\n            {children}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 15px;\r\n    display: flex;\r\n    justify-content: ${({mobileTextAlignment}) => mobileTextAlignment === 'center' ? 'center' : 'flex-start'};\r\n`\r\n\r\nRow.propTypes = {\r\n    children: PropTypes.any,\r\n    onClick: PropTypes.func,\r\n    link: PropTypes.string,\r\n    isDropdown: PropTypes.bool,\r\n};\r\n\r\nexport default Row;\r\n","import React, {memo, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarButton = memo(\r\n    ({\r\n         link: linkProps,\r\n         disabledRedirect,\r\n         title,\r\n         buttonSettingsRoundCorners,\r\n         buttonSettingsBorderWidth,\r\n         buttonSettingsRegularBorder,\r\n         buttonSettingsRegularFill,\r\n         buttonSettingsHorizontalPadding,\r\n         buttonSettingsVerticalPadding,\r\n         buttonSettingsHoverClickedBorder,\r\n         buttonSettingsHoverClickedFill,\r\n         buttonSettingsTextColorRegular,\r\n         buttonSettingsTextColorHover,\r\n         buttonSettingsTextColorClicked,\r\n         mobileTextAlignment\r\n     }) => {\r\n        const link = linkProps?.value;\r\n        const onClick = useCallback(() => {\r\n            if (link && !disabledRedirect) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [link, disabledRedirect]);\r\n        return (\r\n            <Row onClick={onClick} link={link} mobileTextAlignment={mobileTextAlignment}>\r\n                <ButtonWrapper\r\n                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                >\r\n                    {title}\r\n                </ButtonWrapper>\r\n            </Row>\r\n        );\r\n    }\r\n);\r\n\r\nconst ButtonWrapper = styled.div`\r\n  word-break: break-word;\r\n  line-height: normal;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: ${({ buttonSettingsRoundCorners }) => buttonSettingsRoundCorners}px;\r\n  border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n    ${({ buttonSettingsRegularBorder }) => buttonSettingsRegularBorder};\r\n  background: ${({ buttonSettingsRegularFill }) => buttonSettingsRegularFill};\r\n  padding: ${({ buttonSettingsVerticalPadding, buttonSettingsHorizontalPadding }) =>\r\n    `${buttonSettingsVerticalPadding}px ${buttonSettingsHorizontalPadding}px`};\r\n  color: ${({ buttonSettingsTextColorRegular }) => buttonSettingsTextColorRegular};\r\n\r\n  &:hover {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorHover }) => buttonSettingsTextColorHover};\r\n  }\r\n\r\n  &:active {\r\n    border: ${({ buttonSettingsBorderWidth }) => buttonSettingsBorderWidth}px solid\r\n      ${({ buttonSettingsHoverClickedBorder }) => buttonSettingsHoverClickedBorder};\r\n    background: ${({ buttonSettingsHoverClickedFill }) => buttonSettingsHoverClickedFill};\r\n    color: ${({ buttonSettingsTextColorClicked }) => buttonSettingsTextColorClicked};\r\n  }\r\n`;\r\n\r\nNavBarButton.propTypes = {\r\n    disabledRedirect: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    link: PropTypes.string,\r\n    buttonSettingsRoundCorners: PropTypes.number,\r\n    buttonSettingsBorderWidth: PropTypes.number,\r\n    buttonSettingsRegularBorder: PropTypes.string,\r\n    buttonSettingsRegularFill: PropTypes.string,\r\n    buttonSettingsVerticalPadding: PropTypes.number,\r\n    buttonSettingsHorizontalPadding: PropTypes.number,\r\n    buttonSettingsHoverClickedBorder: PropTypes.string,\r\n    buttonSettingsHoverClickedFill: PropTypes.string,\r\n    buttonSettingsTextColorRegular: PropTypes.string,\r\n    buttonSettingsTextColorHover: PropTypes.string,\r\n    buttonSettingsTextColorClicked: PropTypes.string\r\n};\r\n\r\nexport default NavBarButton;\r\n","import React, {memo, useCallback, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from '../../components/Icon';\r\nimport ArrowIcon from '../../icons/ArrowIcon.js';\r\nimport {openLinkInNewTab} from '../../utils/openLinkInNewTab.js';\r\nimport Row from \"./Row\";\r\nimport {IconWrapper, PageWrapperMobile} from \"../styled\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBarPage = memo(\r\n    ({\r\n         disabledRedirect,\r\n         disabledListClick,\r\n         link: linkProps,\r\n         title,\r\n         navBarTextHoverColor,\r\n         navBarTextClickedColor,\r\n         children,\r\n         mobileTextAlignment,\r\n         isStatic\r\n     }) => {\r\n        const link = linkProps?.value;\r\n        const [open, setOpen] = useState(isStatic);\r\n\r\n        const isDropdown = children.length > 0;\r\n\r\n        const onClick = useCallback(() => {\r\n            if (isDropdown && !disabledListClick) {\r\n                setOpen((state) => !state);\r\n            } else if (!isDropdown && !disabledRedirect && link) {\r\n                openLinkInNewTab(link);\r\n            }\r\n        }, [disabledListClick, disabledRedirect, isDropdown, link]);\r\n\r\n        return (\r\n            <Wrapper>\r\n                <Row isDropdown={isDropdown} link={!isDropdown ? link : undefined} onClick={onClick} mobileTextAlignment={mobileTextAlignment}>\r\n                    <PageWrapperMobile\r\n                        navBarTextHoverColor={navBarTextHoverColor}\r\n                        navBarTextClickedColor={navBarTextClickedColor}\r\n                    >\r\n                        {title}{' '}\r\n                        {isDropdown && (\r\n                            <IconWrapper data-arrow={true}>\r\n                                {open ? (\r\n                                    <Icon icon={ArrowIcon} rotate={isStatic ? -90 : 90} color={'#ffffff'}/>\r\n                                ) : (\r\n                                    <Icon icon={ArrowIcon} rotate={-90} color={'#ffffff'}/>\r\n                                )}\r\n                            </IconWrapper>\r\n                        )}\r\n                    </PageWrapperMobile>\r\n                </Row>\r\n                {open && isDropdown && (\r\n                    <Container data-mobile-dropdown-list={true}>\r\n                        {children.map((el) => (\r\n                            <Row\r\n                                key={el.id}\r\n                                onClick={() => {\r\n                                    if (el.link?.value && !disabledRedirect) {\r\n                                        openLinkInNewTab(el.link.value);\r\n                                    }\r\n                                }}\r\n                                link={el.link?.value}\r\n                                mobileTextAlignment={mobileTextAlignment}\r\n                            >\r\n                                <PageWrapperMobile\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                >\r\n                                    {el.title}\r\n                                </PageWrapperMobile>\r\n                            </Row>\r\n                        ))}\r\n                    </Container>\r\n                )}\r\n            </Wrapper>\r\n        )\r\n    }\r\n);\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nNavBarPage.propTypes = {\r\n    link: PropTypes.string,\r\n    disabledRedirect: PropTypes.bool,\r\n    disabledListClick: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    navBarTextHoverColor: PropTypes.string,\r\n    navBarTextClickedColor: PropTypes.string,\r\n    children: PropTypes.array,\r\n    mobileTextAlignment: PropTypes.string,\r\n};\r\n\r\nexport default NavBarPage;\r\n","import React, {Fragment, useCallback, useEffect, useState, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, {css} from 'styled-components';\r\nimport {getCropperQueryString} from '../../utils/getCropperQueryString.js';\r\nimport {logoImageHeight, logoImageWidth} from '../../consts.js';\r\nimport {Icon} from \"../../components/Icon\";\r\nimport BurgerIcon from '../../icons/BurgerIcon.js';\r\nimport CropImage from '../../components/CropImage/index.js';\r\nimport NavBarButton from \"./Button\";\r\nimport NavBarPage from \"./Page\";\r\n\r\nconst NavBarMobile = ({\r\n                          config, stickyOffset = 0, isConstructor = false, isStatic = false, disabledRedirect = false,\r\n                          disabledListClick = false\r\n                      }) => {\r\n\r\n    const [open, setOpen] = useState(isConstructor);\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        if (!isConstructor) {\r\n            document.body.style.overflowY = open ? 'hidden' : \"auto\";\r\n        }\r\n    }, [isConstructor, open])\r\n\r\n    const {\r\n        mobileHeight,\r\n        navBarRegularColor,\r\n        navBarRegularOnScrollColor,\r\n        mobileLogoAlignment,\r\n        logoSrc,\r\n        logoCropperOptions,\r\n        navBarBehavior,\r\n        mobileFontSize,\r\n        navBarTextFontFamily,\r\n        navBarTextBold,\r\n        navBarTextItalic,\r\n        navBarTextUnderline,\r\n        navBarTextRegularColor,\r\n        navBarTextSpacing,\r\n        buttonSettingsRoundCorners,\r\n        buttonSettingsBorderWidth,\r\n        buttonSettingsRegularBorder,\r\n        buttonSettingsRegularFill,\r\n        buttonSettingsHorizontalPadding,\r\n        buttonSettingsVerticalPadding,\r\n        buttonSettingsHoverClickedFill,\r\n        buttonSettingsHoverClickedBorder,\r\n        buttonSettingsTextColorRegular,\r\n        buttonSettingsTextColorHover,\r\n        buttonSettingsTextColorClicked,\r\n        mobileTextAlignment,\r\n        navBarTextHoverColor,\r\n        navBarTextClickedColor,\r\n        structure\r\n    } = config;\r\n\r\n    const onClick = useCallback(() => {\r\n        if (!isConstructor && !disabledListClick) {\r\n            setOpen(value => !value);\r\n        }\r\n    }, [isConstructor, disabledListClick]);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (navBarRegularColor === 'transparent') {\r\n                ref.current.style.backgroundColor = window.scrollY === 0 && !open ? navBarRegularColor : navBarRegularOnScrollColor;\r\n            }\r\n        }\r\n        if (navBarRegularColor === 'transparent') ref.current.style.backgroundColor = open ? navBarRegularOnScrollColor : navBarRegularColor;\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n    }, [open])\r\n\r\n    let wrapperColor = navBarRegularColor;\r\n    if (isConstructor && navBarRegularColor === 'transparent') {\r\n        wrapperColor = \"#000\";\r\n    } else if (open) {\r\n        wrapperColor = navBarRegularColor === 'transparent' ? navBarRegularOnScrollColor : navBarRegularColor\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={\"navbar-mobile\"} navBarBehavior={navBarBehavior} stickyOffset={stickyOffset}\r\n                   isConstructor={isConstructor} navBarRegularColor={navBarRegularColor}>\r\n            <Wrapper height={mobileHeight} ref={ref}\r\n                     navBarRegularColor={wrapperColor}\r\n                     data-mobile-header={true}>\r\n                <IconWrapper onClick={onClick} data-mobile-menu-button={true}>\r\n                    <Icon icon={BurgerIcon} color={'#ffffff'}/>\r\n                </IconWrapper>\r\n                <LogoWrapper mobileLogoAlignment={mobileLogoAlignment}>\r\n                    <LogoInner>\r\n                        <Logo height={mobileHeight}>\r\n                            <CropImage source={logoSrc + getCropperQueryString(logoCropperOptions)}\r\n                                       crop={logoCropperOptions}/>\r\n                        </Logo>\r\n                    </LogoInner>\r\n                </LogoWrapper>\r\n            </Wrapper>\r\n            <ListWrapper data-mobile-menu={true} mobileHeight={mobileHeight} offsetTop={stickyOffset + mobileHeight}\r\n                         isConstructor={isConstructor} open={open}\r\n                         navBarRegularColor={navBarRegularColor === 'transparent' ? isConstructor ? \"#000\" : navBarRegularOnScrollColor : navBarRegularColor}\r\n                         mobileFontSize={mobileFontSize} navBarTextFontFamily={navBarTextFontFamily}\r\n                         navBarTextBold={navBarTextBold}\r\n                         navBarTextItalic={navBarTextItalic}\r\n                         navBarTextUnderline={navBarTextUnderline}\r\n                         navBarTextRegularColor={navBarTextRegularColor}\r\n                         navBarTextSpacing={navBarTextSpacing}\r\n            >\r\n                {\r\n                    structure?.map(el => {\r\n                        let component = 'any';\r\n                        if (el.type === 'button') {\r\n                            component = (\r\n                                <NavBarButton\r\n                                    {...el}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    disabledRedirect={isConstructor}\r\n                                    buttonSettingsRoundCorners={buttonSettingsRoundCorners}\r\n                                    buttonSettingsBorderWidth={buttonSettingsBorderWidth}\r\n                                    buttonSettingsRegularBorder={buttonSettingsRegularBorder}\r\n                                    buttonSettingsRegularFill={buttonSettingsRegularFill}\r\n                                    buttonSettingsVerticalPadding={buttonSettingsVerticalPadding}\r\n                                    buttonSettingsHorizontalPadding={buttonSettingsHorizontalPadding}\r\n                                    buttonSettingsHoverClickedBorder={buttonSettingsHoverClickedBorder}\r\n                                    buttonSettingsHoverClickedFill={buttonSettingsHoverClickedFill}\r\n                                    buttonSettingsTextColorRegular={buttonSettingsTextColorRegular}\r\n                                    buttonSettingsTextColorHover={buttonSettingsTextColorHover}\r\n                                    buttonSettingsTextColorClicked={buttonSettingsTextColorClicked}\r\n                                />\r\n                            );\r\n                        } else if (el.type === 'page') {\r\n                            component = (\r\n                                <NavBarPage\r\n                                    {...el}\r\n                                    disabledRedirect={disabledRedirect}\r\n                                    disabledListClick={disabledListClick}\r\n                                    navBarTextHoverColor={navBarTextHoverColor}\r\n                                    navBarTextClickedColor={navBarTextClickedColor}\r\n                                    mobileTextAlignment={mobileTextAlignment}\r\n                                    isStatic={isStatic}\r\n                                />\r\n                            );\r\n                        }\r\n                        return <Fragment key={el.id}>{component}</Fragment>;\r\n                    })\r\n                }\r\n            </ListWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n  z-index: 1001;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  ${({navBarBehavior, stickyOffset, isConstructor, navBarRegularColor}) => {\r\n    if (navBarRegularColor === 'transparent' && !isConstructor) {\r\n      if (navBarBehavior === 'frozen') {\r\n        return css`\r\n          position: fixed;\r\n          top: ${stickyOffset}px;\r\n        `;\r\n      }\r\n      return css`\r\n        position: absolute;\r\n        top: ${stickyOffset}px;\r\n      `;\r\n    } else if (navBarBehavior === 'frozen' && !isConstructor) {\r\n      return css`\r\n        position: sticky;\r\n        top: ${stickyOffset}px;\r\n      `;\r\n    }\r\n    return \"\";\r\n  }\r\n  }`;\r\n\r\nconst ListWrapper = styled.div\r\n\r\n    `\r\n      display: flex;\r\n      flex-direction: column;\r\n      position: absolute;\r\n      top: ${({mobileHeight}) => mobileHeight}px;\r\n      width: 100%;\r\n      height: ${({isConstructor}) => isConstructor ? 'auto' : 0};\r\n      ${({isConstructor}) =>\r\n              isConstructor &&\r\n              css`\r\n                max-height: 350px;\r\n              `};\r\n      transition: height 0.5s ease;\r\n      background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n      overflow-x: hidden;\r\n      overflow-y: auto;\r\n      font-size: ${({mobileFontSize}) => mobileFontSize}px;\r\n      font-family: ${({navBarTextFontFamily}) => navBarTextFontFamily};\r\n      font-weight: ${({navBarTextBold}) => (navBarTextBold ? 'bold' : 'normal')};\r\n      font-style: ${({navBarTextItalic}) => (navBarTextItalic ? 'italic' : 'normal')};\r\n      text-decoration: ${({navBarTextUnderline}) => (navBarTextUnderline ? 'underline' : 'none')};\r\n      color: ${({navBarTextRegularColor}) => navBarTextRegularColor};\r\n      ${({offsetTop, open, isConstructor}) =>\r\n              !isConstructor && open &&\r\n              css`\r\n                height: calc(100vh - ${offsetTop}px);\r\n              `};\r\n    `\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 15px 13px 16px 15px;\r\n  //border: solid 1px rgba(164, 198, 225, 0.39);\r\n  height: ${({height}) => height}px;\r\n  background-color: ${({navBarRegularColor}) => navBarRegularColor};\r\n  align-items: center;\r\n  overflow: hidden;\r\n  justify-content: space-between;\r\n  transition: background-color .2s ease-in-out;\r\n`;\r\n\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  width: calc(100% - 50px);\r\n  justify-content: ${({mobileLogoAlignment}) => {\r\n    if (mobileLogoAlignment === 'center') {\r\n      return 'center';\r\n    } else if (mobileLogoAlignment === 'right') {\r\n      return 'flex-end';\r\n    }\r\n    return '';\r\n  }};\r\n`;\r\n\r\nconst LogoInner = styled.div`\r\n  display: flex;\r\n  width: calc(100% - 50px);\r\n  justify-content: center;\r\n`\r\n\r\nconst Logo = styled.div`\r\n  width: 100%;\r\n  height: ${({height}) => height}px;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  display: flex;\r\n  //position: absolute;\r\n`;\r\n\r\nNavBarMobile.propTypes = {\r\n    config: PropTypes.object,\r\n    stickyOffset: PropTypes.number,\r\n};\r\n\r\nexport default NavBarMobile;\r\n"],"names":["args","React","createElement","NavBar","bind","config","logoImageWidth","logoImageHeight","name","height","logoSrc","structure","id","link","type","value","title","children","expanded","mobileHeight","logoAlignment","mobileFontSize","navBarBehavior","navBarTextBold","navBarHoverColor","navBarTextItalic","navBarTextSpacing","logoCropperOptions","x","y","zoom","width","rotate","scaleX","scaleY","imageBox","imgWidth","imgHeight","imagePosition","navBarClickedColor","navBarRegularColor","navBarTextFontSize","mobileLogoAlignment","mobileTextAlignment","navBarTextAlignment","navBarTextUnderline","navBarTextFontFamily","navBarTextHoverColor","navBarTextClickedColor","navBarTextRegularColor","dropdownSettingsTextBold","buttonSettingsBorderWidth","buttonSettingsRegularFill","buttonSettingsRoundCorners","dropdownSettingsTextItalic","buttonSettingsRegularBorder","buttonSettingsTextColorHover","dropdownSettingsInactiveFill","dropdownSettingsTextFontSize","buttonSettingsVerticalPadding","dropdownSettingsTextUnderline","buttonSettingsHoverClickedFill","buttonSettingsTextColorClicked","buttonSettingsTextColorRegular","dropdownSettingsInactiveBorder","dropdownSettingsTextColorHover","dropdownSettingsTextFontFamily","buttonSettingsHorizontalPadding","dropdownSettingsVerticalPadding","buttonSettingsHoverClickedBorder","dropdownSettingsHoverClickedFill","dropdownSettingsTextColorClicked","dropdownSettingsTextColorRegular","dropdownSettingsHorizontalPadding","dropdownSettingsHoverClickedBorder","roundedNumber","Math","floor","getCropperQueryString","crop","Object","keys","length","concat","Icon","_ref","icon","_ref$opacity","opacity","_ref$hoverOpacity","hoverOpacity","_ref$color","color","_ref$hoverColor","hoverColor","_ref$size","size","noCursor","_ref$padding","padding","tableIcon","IconWrapper","_renderIcon","styled","div","_templateObject","_taggedTemplateLiteral","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","propTypes","PropTypes","string","oneOfType","func","number","bool","defaultProps","ArrowIcon","viewBox","d","fill","openLinkInNewTab","window","open","PageWrapper","_templateObject2","PageWrapperDesktop","_templateObject3","PageWrapperMobile","_templateObject4","DropDown","memo","props","disabledRedirect","childs","setOpen","rootId","parentRef","isClient","left","top","getBoundingClientRect","navbarContainer","closest","navbar","containerLeft","navbarBox","scrollY","component","DropdownWrapper","className","map","el","_el$link2","DropdownElement","key","onClick","_el$link","ReactDOM","createPortal","document","getElementById","NavBarPage","disabledListClick","linkProps","isStatic","_useState2","_slicedToArray","useState","ref","callback","createRef","listener","e","current","contains","target","useEffect","addEventListener","removeEventListener","useOutsideClick","_useState4","containerRef","setContainerRef","isDropdown","useCallback","state","handleScroll","body","Container","undefined","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","array","NavBarButton","ButtonWrapper","Index","forwardRef","source","alt","styles","objectFit","ignoreMaxHeight","maxHeight","CropArea","CropImageWrapper","src","style","object","isRequired","LogoElement","hideElement","Logo","CropImage","_ref2$disabledRedirec","_ref2$disabledListCli","_ref2$stickyOffset","stickyOffset","_ref2$isStatic","_ref2$hideLogo","hideLogo","_ref2$isPreview","isPreview","_ref2$isListView","isListView","_ref2$rootId","useRef","navBarRegularOnScrollColor","backgroundColor","Wrapper","Menu","PreviewText","NavBarButtonWrapper","_extends","Fragment","css","_templateObject6","_templateObject7","_templateObject8","_templateObject9","BurgerIcon","xmlns","transform","Row","any","NavBarMobile","_ref$stickyOffset","_ref$isConstructor","isConstructor","_ref$isStatic","_ref$disabledRedirect","_ref$disabledListClic","overflowY","wrapperColor","LogoWrapper","LogoInner","ListWrapper","offsetTop","_templateObject5","_templateObject10","_templateObject11","_templateObject12"],"mappings":"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"}